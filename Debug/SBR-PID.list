
SBR-PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008f18  08008f18  00018f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f0  080093f0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f8  080093f8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001f0  080095f0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080095f0  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148f0  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c17  00000000  00000000  00034b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240ff  00000000  00000000  000396c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014748  00000000  00000000  0005d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e21  00000000  00000000  00071f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146d30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  00146d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008efc 	.word	0x08008efc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08008efc 	.word	0x08008efc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MPU6050_Read>:
int16_t GxOFF = 0;
int16_t GyOFF = 0;
int16_t GzOFF = 0;


Measures_t MPU6050_Read(I2C_HandleTypeDef hi2c) {
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	b5b0      	push	{r4, r5, r7, lr}
 8000fc4:	b08e      	sub	sp, #56	; 0x38
 8000fc6:	af04      	add	r7, sp, #16
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t Rec_data[6];

	/* Accel Reading */
	while(HAL_I2C_Mem_Read(&hi2c, GY521_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, Rec_data, 6, 100) != HAL_OK);
 8000fd2:	bf00      	nop
 8000fd4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2306      	movs	r3, #6
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	223b      	movs	r2, #59	; 0x3b
 8000fea:	21d0      	movs	r1, #208	; 0xd0
 8000fec:	f002 f8b2 	bl	8003154 <HAL_I2C_Mem_Read>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1ee      	bne.n	8000fd4 <MPU6050_Read+0x14>

	/* Accel Registers Merging */
	Accel_X_RAW = (int16_t)(Rec_data[0] << 8 | Rec_data[1]);
 8000ff6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b61      	ldr	r3, [pc, #388]	; (8001190 <MPU6050_Read+0x1d0>)
 800100a:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_data[2] << 8 | Rec_data[3]);
 800100c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <MPU6050_Read+0x1d4>)
 8001020:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_data[4] << 8 | Rec_data[5]);
 8001022:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <MPU6050_Read+0x1d8>)
 8001036:	801a      	strh	r2, [r3, #0]

	/* Gyro Reading */
	while(HAL_I2C_Mem_Read(&hi2c, GY521_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, Rec_data, 6, 100) != HAL_OK);
 8001038:	bf00      	nop
 800103a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2306      	movs	r3, #6
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	2243      	movs	r2, #67	; 0x43
 8001050:	21d0      	movs	r1, #208	; 0xd0
 8001052:	f002 f87f 	bl	8003154 <HAL_I2C_Mem_Read>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1ee      	bne.n	800103a <MPU6050_Read+0x7a>

	/* Gyro Registers Merging */
	//Gyro_X_RAW = (int16_t)(Rec_data[0] << 8 | Rec_data[1]);
	Gyro_Y_RAW = (int16_t)(Rec_data[2] << 8 | Rec_data[3]);
 800105c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b4b      	ldr	r3, [pc, #300]	; (800119c <MPU6050_Read+0x1dc>)
 8001070:	801a      	strh	r2, [r3, #0]
	//Gyro_Z_RAW = (int16_t)(Rec_data[4] << 8 | Rec_data[5]);

	Measures_t Measures;

	/* Raw Data Scaling */
	Measures.Ax = (Accel_X_RAW - AxOFF) / 16384.0 * 9.81;
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <MPU6050_Read+0x1d0>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	461a      	mov	r2, r3
 800107a:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <MPU6050_Read+0x1e0>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa6e 	bl	8000564 <__aeabi_i2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <MPU6050_Read+0x1e4>)
 800108e:	f7ff fbfd 	bl	800088c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	a33b      	add	r3, pc, #236	; (adr r3, 8001188 <MPU6050_Read+0x1c8>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff faca 	bl	8000638 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fdbc 	bl	8000c28 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	60bb      	str	r3, [r7, #8]
	Measures.Ay = (Accel_Y_RAW - AyOFF) / 16384.0 * 9.81;
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <MPU6050_Read+0x1d4>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <MPU6050_Read+0x1e8>)
 80010be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa4d 	bl	8000564 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <MPU6050_Read+0x1e4>)
 80010d0:	f7ff fbdc 	bl	800088c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	a32a      	add	r3, pc, #168	; (adr r3, 8001188 <MPU6050_Read+0x1c8>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff faa9 	bl	8000638 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd9b 	bl	8000c28 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60fb      	str	r3, [r7, #12]
	Measures.Az = (Accel_Z_RAW - AzOFF) / 16384.0 * 9.81;
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MPU6050_Read+0x1d8>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <MPU6050_Read+0x1ec>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa2c 	bl	8000564 <__aeabi_i2d>
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MPU6050_Read+0x1e4>)
 8001112:	f7ff fbbb 	bl	800088c <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	a31a      	add	r3, pc, #104	; (adr r3, 8001188 <MPU6050_Read+0x1c8>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa88 	bl	8000638 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd7a 	bl	8000c28 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]

	//Measures.Gx = (Gyro_X_RAW - GxOFF) / 131;
	Measures.Gy = (Gyro_Y_RAW - GyOFF) / 131;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MPU6050_Read+0x1dc>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	461a      	mov	r2, r3
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MPU6050_Read+0x1f0>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <MPU6050_Read+0x1f4>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1152      	asrs	r2, r2, #5
 8001150:	17db      	asrs	r3, r3, #31
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115c:	edc7 7a06 	vstr	s15, [r7, #24]
	//Measures.Gz = (Gyro_Z_RAW - GzOFF) / 131;

	return Measures;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	461d      	mov	r5, r3
 8001164:	f107 0408 	add.w	r4, r7, #8
 8001168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001170:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800117e:	b004      	add	sp, #16
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	51eb851f 	.word	0x51eb851f
 800118c:	40239eb8 	.word	0x40239eb8
 8001190:	2000020c 	.word	0x2000020c
 8001194:	2000020e 	.word	0x2000020e
 8001198:	20000210 	.word	0x20000210
 800119c:	20000218 	.word	0x20000218
 80011a0:	20000212 	.word	0x20000212
 80011a4:	40d00000 	.word	0x40d00000
 80011a8:	20000214 	.word	0x20000214
 80011ac:	20000216 	.word	0x20000216
 80011b0:	2000021a 	.word	0x2000021a
 80011b4:	3e88cb3d 	.word	0x3e88cb3d

080011b8 <MPU6050_Init>:

int MPU6050_Init(I2C_HandleTypeDef hi2c, int iter, int timeout) {
 80011b8:	b084      	sub	sp, #16
 80011ba:	b5b0      	push	{r4, r5, r7, lr}
 80011bc:	b09e      	sub	sp, #120	; 0x78
 80011be:	af12      	add	r7, sp, #72	; 0x48
 80011c0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t check, data;

	/* WHO_AM_I Register check */
	uint16_t t1 = HAL_GetTick();
 80011c8:	f001 fa7c 	bl	80026c4 <HAL_GetTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	847b      	strh	r3, [r7, #34]	; 0x22
	while(HAL_I2C_Mem_Read(&hi2c, GY521_ADDR, WHO_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 100) == HAL_BUSY && HAL_GetTick() - t1 <= timeout) {
 80011d0:	bf00      	nop
 80011d2:	2364      	movs	r3, #100	; 0x64
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 031d 	add.w	r3, r7, #29
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2275      	movs	r2, #117	; 0x75
 80011e4:	21d0      	movs	r1, #208	; 0xd0
 80011e6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80011ea:	f001 ffb3 	bl	8003154 <HAL_I2C_Mem_Read>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d108      	bne.n	8001206 <MPU6050_Init+0x4e>
 80011f4:	f001 fa66 	bl	80026c4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011fc:	1ad2      	subs	r2, r2, r3
 80011fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001202:	429a      	cmp	r2, r3
 8001204:	d9e5      	bls.n	80011d2 <MPU6050_Init+0x1a>
	}

	if (check == 0x68) {
 8001206:	7f7b      	ldrb	r3, [r7, #29]
 8001208:	2b68      	cmp	r3, #104	; 0x68
 800120a:	f040 80da 	bne.w	80013c2 <MPU6050_Init+0x20a>

		/* GY-581 Register Configuration */
	  	data = 8;
 800120e:	2308      	movs	r3, #8
 8001210:	773b      	strb	r3, [r7, #28]
	  	HAL_I2C_Mem_Write(&hi2c, GY521_ADDR, PWR_MNG1, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);		// PWR_MGMT_1
 8001212:	2332      	movs	r3, #50	; 0x32
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	226b      	movs	r2, #107	; 0x6b
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800122a:	f001 fe99 	bl	8002f60 <HAL_I2C_Mem_Write>
	  	HAL_Delay(50);
 800122e:	2032      	movs	r0, #50	; 0x32
 8001230:	f001 fa54 	bl	80026dc <HAL_Delay>

	  	data = 7;
 8001234:	2307      	movs	r3, #7
 8001236:	773b      	strb	r3, [r7, #28]
	  	HAL_I2C_Mem_Write(&hi2c, GY521_ADDR, SMPRT_DIV, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);	 	// SMPRT_DIV
 8001238:	2332      	movs	r3, #50	; 0x32
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	2219      	movs	r2, #25
 800124a:	21d0      	movs	r1, #208	; 0xd0
 800124c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001250:	f001 fe86 	bl	8002f60 <HAL_I2C_Mem_Write>
	  	HAL_Delay(50);
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f001 fa41 	bl	80026dc <HAL_Delay>

	  	data = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	773b      	strb	r3, [r7, #28]
	  	HAL_I2C_Mem_Write(&hi2c, GY521_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50); 	// GYRO_CONFIG
 800125e:	2332      	movs	r3, #50	; 0x32
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	221b      	movs	r2, #27
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001276:	f001 fe73 	bl	8002f60 <HAL_I2C_Mem_Write>
	  	HAL_Delay(50);
 800127a:	2032      	movs	r0, #50	; 0x32
 800127c:	f001 fa2e 	bl	80026dc <HAL_Delay>

	  	data = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	773b      	strb	r3, [r7, #28]
	  	HAL_I2C_Mem_Write(&hi2c, GY521_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);	// ACCEL_CONFIG
 8001284:	2332      	movs	r3, #50	; 0x32
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2301      	movs	r3, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	221c      	movs	r2, #28
 8001296:	21d0      	movs	r1, #208	; 0xd0
 8001298:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800129c:	f001 fe60 	bl	8002f60 <HAL_I2C_Mem_Write>
	  	HAL_Delay(50);
 80012a0:	2032      	movs	r0, #50	; 0x32
 80012a2:	f001 fa1b 	bl	80026dc <HAL_Delay>

	  	/* GY-581 Gyroscope and Accelerometer Calibration */
	  	int16_t _GxOFF = 0, _GyOFF = 0, _GzOFF = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	843b      	strh	r3, [r7, #32]
 80012aa:	2300      	movs	r3, #0
 80012ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80012ae:	2300      	movs	r3, #0
 80012b0:	83fb      	strh	r3, [r7, #30]
	  	int16_t _AxOFF = 0, _AyOFF = 0, _AzOFF = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80012b6:	2300      	movs	r3, #0
 80012b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80012ba:	2300      	movs	r3, #0
 80012bc:	853b      	strh	r3, [r7, #40]	; 0x28

	  	for (int i=0; i<iter; i++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
 80012c2:	e04b      	b.n	800135c <MPU6050_Init+0x1a4>
	  		MPU6050_Read(hi2c);
 80012c4:	463c      	mov	r4, r7
 80012c6:	4668      	mov	r0, sp
 80012c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012cc:	2248      	movs	r2, #72	; 0x48
 80012ce:	4619      	mov	r1, r3
 80012d0:	f004 fc14 	bl	8005afc <memcpy>
 80012d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff fe70 	bl	8000fc0 <MPU6050_Read>
	  		//_GxOFF += Gyro_X_RAW;
	  	  	_GyOFF += Gyro_Y_RAW;
 80012e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <MPU6050_Init+0x21c>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  	  	//_GzOFF += Gyro_Z_RAW;
	  	    _AxOFF += Accel_X_RAW;
 80012f0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <MPU6050_Init+0x220>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  	  	_AyOFF += Accel_Y_RAW;
 8001300:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <MPU6050_Init+0x224>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	857b      	strh	r3, [r7, #42]	; 0x2a
	  	  	_AzOFF += Accel_Z_RAW - 16384.0;
 8001310:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f925 	bl	8000564 <__aeabi_i2d>
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <MPU6050_Init+0x228>)
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f91d 	bl	8000564 <__aeabi_i2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MPU6050_Init+0x22c>)
 8001330:	f7fe ffca 	bl	80002c8 <__aeabi_dsub>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffc6 	bl	80002cc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc26 	bl	8000b98 <__aeabi_d2iz>
 800134c:	4603      	mov	r3, r0
 800134e:	853b      	strh	r3, [r7, #40]	; 0x28
	  	  	HAL_Delay(2);	/* Used to simulate control sampling time */
 8001350:	2002      	movs	r0, #2
 8001352:	f001 f9c3 	bl	80026dc <HAL_Delay>
	  	for (int i=0; i<iter; i++) {
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	3301      	adds	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001362:	429a      	cmp	r2, r3
 8001364:	dbae      	blt.n	80012c4 <MPU6050_Init+0x10c>
	  	}

	  	//GxOFF = _GxOFF / iter;
	  	GyOFF = _GyOFF / iter;
 8001366:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800136a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800136e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MPU6050_Init+0x230>)
 8001376:	801a      	strh	r2, [r3, #0]
	  	//GzOFF = _GzOFF / iter;

	  	AxOFF = _AxOFF / iter;
 8001378:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800137c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001380:	fb92 f3f3 	sdiv	r3, r2, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MPU6050_Init+0x234>)
 8001388:	801a      	strh	r2, [r3, #0]
	  	AyOFF = _AyOFF / iter;
 800138a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800138e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001392:	fb92 f3f3 	sdiv	r3, r2, r3
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MPU6050_Init+0x238>)
 800139a:	801a      	strh	r2, [r3, #0]
	  	AzOFF = _AzOFF / iter;
 800139c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80013a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MPU6050_Init+0x23c>)
 80013ac:	801a      	strh	r2, [r3, #0]

	  	Control_Data.angleY = 0;
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MPU6050_Init+0x240>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
	  	Control_Data.Gy = 0;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MPU6050_Init+0x240>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]

	  	return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <MPU6050_Init+0x20c>
	}
	return 1;
 80013c2:	2301      	movs	r3, #1

}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013ce:	b004      	add	sp, #16
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000218 	.word	0x20000218
 80013d8:	2000020c 	.word	0x2000020c
 80013dc:	2000020e 	.word	0x2000020e
 80013e0:	20000210 	.word	0x20000210
 80013e4:	40d00000 	.word	0x40d00000
 80013e8:	2000021a 	.word	0x2000021a
 80013ec:	20000212 	.word	0x20000212
 80013f0:	20000214 	.word	0x20000214
 80013f4:	20000216 	.word	0x20000216
 80013f8:	2000022c 	.word	0x2000022c
 80013fc:	00000000 	.word	0x00000000

08001400 <MPU6050_Data>:

Control_Data_t MPU6050_Data(I2C_HandleTypeDef hi2c, float dt) {
 8001400:	b084      	sub	sp, #16
 8001402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001406:	b0a1      	sub	sp, #132	; 0x84
 8001408:	af12      	add	r7, sp, #72	; 0x48
 800140a:	f107 0658 	add.w	r6, r7, #88	; 0x58
 800140e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001412:	ed87 0a03 	vstr	s0, [r7, #12]
	/* Measurements processing and angles computation */

	Measures_t Measures = MPU6050_Read(hi2c);
 8001416:	f107 0614 	add.w	r6, r7, #20
 800141a:	4668      	mov	r0, sp
 800141c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001420:	2248      	movs	r2, #72	; 0x48
 8001422:	4619      	mov	r1, r3
 8001424:	f004 fb6a 	bl	8005afc <memcpy>
 8001428:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800142c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142e:	4630      	mov	r0, r6
 8001430:	f7ff fdc6 	bl	8000fc0 <MPU6050_Read>

	Control_Data.angleY += dt * (Measures.Gy + Control_Data.Gy) / 2;
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <MPU6050_Data+0x178>)
 8001436:	ed93 7a00 	vldr	s14, [r3]
 800143a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <MPU6050_Data+0x178>)
 8001440:	edd3 7a01 	vldr	s15, [r3, #4]
 8001444:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001448:	edd7 7a03 	vldr	s15, [r7, #12]
 800144c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001450:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001454:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <MPU6050_Data+0x178>)
 800145e:	edc3 7a00 	vstr	s15, [r3]
	Control_Data.Gy = Measures.Gy;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	4a44      	ldr	r2, [pc, #272]	; (8001578 <MPU6050_Data+0x178>)
 8001466:	6053      	str	r3, [r2, #4]
	float accel_angleY = - atan2(Measures.Ax,sqrt(Measures.Az * Measures.Az)) * 180 / M_PI;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f88c 	bl	8000588 <__aeabi_f2d>
 8001470:	4680      	mov	r8, r0
 8001472:	4689      	mov	r9, r1
 8001474:	ed97 7a07 	vldr	s14, [r7, #28]
 8001478:	edd7 7a07 	vldr	s15, [r7, #28]
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	ee17 0a90 	vmov	r0, s15
 8001484:	f7ff f880 	bl	8000588 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	ec43 2b10 	vmov	d0, r2, r3
 8001490:	f007 f9d4 	bl	800883c <sqrt>
 8001494:	eeb0 7a40 	vmov.f32	s14, s0
 8001498:	eef0 7a60 	vmov.f32	s15, s1
 800149c:	eeb0 1a47 	vmov.f32	s2, s14
 80014a0:	eef0 1a67 	vmov.f32	s3, s15
 80014a4:	ec49 8b10 	vmov	d0, r8, r9
 80014a8:	f007 f9c6 	bl	8008838 <atan2>
 80014ac:	ec53 2b10 	vmov	r2, r3, d0
 80014b0:	4614      	mov	r4, r2
 80014b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <MPU6050_Data+0x17c>)
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7ff f8ba 	bl	8000638 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	a324      	add	r3, pc, #144	; (adr r3, 8001560 <MPU6050_Data+0x160>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9db 	bl	800088c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fba3 	bl	8000c28 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Complementary filter */
	Control_Data.angleY = Control_Data.angleY * 0.999 + accel_angleY * 0.001;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MPU6050_Data+0x178>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f84c 	bl	8000588 <__aeabi_f2d>
 80014f0:	a31d      	add	r3, pc, #116	; (adr r3, 8001568 <MPU6050_Data+0x168>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	461d      	mov	r5, r3
 8001502:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001504:	f7ff f840 	bl	8000588 <__aeabi_f2d>
 8001508:	a319      	add	r3, pc, #100	; (adr r3, 8001570 <MPU6050_Data+0x170>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f893 	bl	8000638 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe fed7 	bl	80002cc <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb7f 	bl	8000c28 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MPU6050_Data+0x178>)
 800152e:	6013      	str	r3, [r2, #0]

    return Control_Data;
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <MPU6050_Data+0x178>)
 8001532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153a:	e883 0003 	stmia.w	r3, {r0, r1}
 800153e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	ee07 2a10 	vmov	s14, r2
 8001546:	ee07 3a90 	vmov	s15, r3

}
 800154a:	eeb0 0a47 	vmov.f32	s0, s14
 800154e:	eef0 0a67 	vmov.f32	s1, s15
 8001552:	373c      	adds	r7, #60	; 0x3c
 8001554:	46bd      	mov	sp, r7
 8001556:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800155a:	b004      	add	sp, #16
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	54442d18 	.word	0x54442d18
 8001564:	400921fb 	.word	0x400921fb
 8001568:	d916872b 	.word	0xd916872b
 800156c:	3feff7ce 	.word	0x3feff7ce
 8001570:	d2f1a9fc 	.word	0xd2f1a9fc
 8001574:	3f50624d 	.word	0x3f50624d
 8001578:	2000022c 	.word	0x2000022c
 800157c:	40668000 	.word	0x40668000

08001580 <PID_Control>:

// LQR PARAMETERS
double K[4] = {-0.293249385038703,	47.0534994121473,	-6.72510997203132,	9.30922001696825};
float x_pos = 0;

float PID_Control(Control_Data_t Control_Data, float dt) {
 8001580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	eeb0 7a40 	vmov.f32	s14, s0
 800158c:	eef0 7a60 	vmov.f32	s15, s1
 8001590:	ed87 1a01 	vstr	s2, [r7, #4]
 8001594:	ed87 7a02 	vstr	s14, [r7, #8]
 8001598:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Max control angle check */
	if (Control_Data.angleY < -MAX_CTRL_ANG || Control_Data.angleY > MAX_CTRL_ANG) {
 800159c:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001780 <PID_Control+0x200>
 80015a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d408      	bmi.n	80015c0 <PID_Control+0x40>
 80015ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001784 <PID_Control+0x204>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dd02      	ble.n	80015c6 <PID_Control+0x46>
		return 0;
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e0cd      	b.n	8001762 <PID_Control+0x1e2>
	}

	/* Integrative component and anti wind-up filter */
	Control_Param.Yi += ( Control_Data.angleY * M_PI / 180) * dt;
 80015c6:	4b70      	ldr	r3, [pc, #448]	; (8001788 <PID_Control+0x208>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffdc 	bl	8000588 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	a366      	add	r3, pc, #408	; (adr r3, 8001778 <PID_Control+0x1f8>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f829 	bl	8000638 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b66      	ldr	r3, [pc, #408]	; (800178c <PID_Control+0x20c>)
 80015f4:	f7ff f94a 	bl	800088c <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4690      	mov	r8, r2
 80015fe:	4699      	mov	r9, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7fe ffc1 	bl	8000588 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4640      	mov	r0, r8
 800160c:	4649      	mov	r1, r9
 800160e:	f7ff f813 	bl	8000638 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7fe fe57 	bl	80002cc <__adddf3>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff faff 	bl	8000c28 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <PID_Control+0x208>)
 800162e:	60d3      	str	r3, [r2, #12]

	if (Control_Param.Yi * Control_Param.Ki > MAX_CTRL_INT) {
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <PID_Control+0x208>)
 8001632:	ed93 7a03 	vldr	s14, [r3, #12]
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <PID_Control+0x208>)
 8001638:	edd3 7a01 	vldr	s15, [r3, #4]
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	dd09      	ble.n	8001662 <PID_Control+0xe2>
		Control_Param.Yi = MAX_CTRL_INT / Control_Param.Ki;
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <PID_Control+0x208>)
 8001650:	ed93 7a01 	vldr	s14, [r3, #4]
 8001654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165c:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <PID_Control+0x208>)
 800165e:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if (Control_Param.Yi * Control_Param.Ki < -MAX_CTRL_INT) {
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <PID_Control+0x208>)
 8001664:	ed93 7a03 	vldr	s14, [r3, #12]
 8001668:	4b47      	ldr	r3, [pc, #284]	; (8001788 <PID_Control+0x208>)
 800166a:	edd3 7a01 	vldr	s15, [r3, #4]
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d509      	bpl.n	8001694 <PID_Control+0x114>
		Control_Param.Yi = -MAX_CTRL_INT / Control_Param.Ki;
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <PID_Control+0x208>)
 8001682:	ed93 7a01 	vldr	s14, [r3, #4]
 8001686:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800168a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <PID_Control+0x208>)
 8001690:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	/* PID control action */
	float velocity = Control_Param.Kp * (Control_Data.angleY * M_PI / 180) + Control_Param.Ki * Control_Param.Yi + Control_Param.Kd * (Control_Data.Gy * M_PI / 180);
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <PID_Control+0x208>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff75 	bl	8000588 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff6f 	bl	8000588 <__aeabi_f2d>
 80016aa:	a333      	add	r3, pc, #204	; (adr r3, 8001778 <PID_Control+0x1f8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ffc2 	bl	8000638 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <PID_Control+0x20c>)
 80016c2:	f7ff f8e3 	bl	800088c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ffb3 	bl	8000638 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <PID_Control+0x208>)
 80016dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <PID_Control+0x208>)
 80016e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	ee17 0a90 	vmov	r0, s15
 80016ee:	f7fe ff4b 	bl	8000588 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fde7 	bl	80002cc <__adddf3>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4690      	mov	r8, r2
 8001704:	4699      	mov	r9, r3
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <PID_Control+0x208>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff3c 	bl	8000588 <__aeabi_f2d>
 8001710:	4604      	mov	r4, r0
 8001712:	460d      	mov	r5, r1
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff36 	bl	8000588 <__aeabi_f2d>
 800171c:	a316      	add	r3, pc, #88	; (adr r3, 8001778 <PID_Control+0x1f8>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe ff89 	bl	8000638 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <PID_Control+0x20c>)
 8001734:	f7ff f8aa 	bl	800088c <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe ff7a 	bl	8000638 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4640      	mov	r0, r8
 800174a:	4649      	mov	r1, r9
 800174c:	f7fe fdbe 	bl	80002cc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa66 	bl	8000c28 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	617b      	str	r3, [r7, #20]


	return velocity;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	ee07 3a90 	vmov	s15, r3
}
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	54442d18 	.word	0x54442d18
 800177c:	400921fb 	.word	0x400921fb
 8001780:	c2340000 	.word	0xc2340000
 8001784:	42340000 	.word	0x42340000
 8001788:	20000000 	.word	0x20000000
 800178c:	40668000 	.word	0x40668000

08001790 <Speed_Actuation>:

void Speed_Actuation(TIM_HandleTypeDef htim_1, TIM_HandleTypeDef htim_2, float velocity) {
 8001790:	b084      	sub	sp, #16
 8001792:	b5b0      	push	{r4, r5, r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800179c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80017a0:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Max velocity check */
	if (velocity >  MAX_CTRL_ACT) {
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7fe feef 	bl	8000588 <__aeabi_f2d>
 80017aa:	a39c      	add	r3, pc, #624	; (adr r3, 8001a1c <Speed_Actuation+0x28c>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7ff f9d2 	bl	8000b58 <__aeabi_dcmpgt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <Speed_Actuation+0x2e>
		velocity =  MAX_CTRL_ACT;
 80017ba:	4b93      	ldr	r3, [pc, #588]	; (8001a08 <Speed_Actuation+0x278>)
 80017bc:	607b      	str	r3, [r7, #4]
	}
	if (velocity < - MAX_CTRL_ACT) {
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fee2 	bl	8000588 <__aeabi_f2d>
 80017c4:	a386      	add	r3, pc, #536	; (adr r3, 80019e0 <Speed_Actuation+0x250>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7ff f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <Speed_Actuation+0x48>
		velocity = - MAX_CTRL_ACT;
 80017d4:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <Speed_Actuation+0x27c>)
 80017d6:	607b      	str	r3, [r7, #4]
	}

	/* Max acceleration check */
	if ((velocity - velocity_old) > MAX_ACC) {
 80017d8:	4b8d      	ldr	r3, [pc, #564]	; (8001a10 <Speed_Actuation+0x280>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e6:	ee17 0a90 	vmov	r0, s15
 80017ea:	f7fe fecd 	bl	8000588 <__aeabi_f2d>
 80017ee:	a37e      	add	r3, pc, #504	; (adr r3, 80019e8 <Speed_Actuation+0x258>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f9b0 	bl	8000b58 <__aeabi_dcmpgt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d011      	beq.n	8001822 <Speed_Actuation+0x92>
		velocity = velocity_old + MAX_ACC;
 80017fe:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <Speed_Actuation+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fec0 	bl	8000588 <__aeabi_f2d>
 8001808:	a377      	add	r3, pc, #476	; (adr r3, 80019e8 <Speed_Actuation+0x258>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fd5d 	bl	80002cc <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff fa05 	bl	8000c28 <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	607b      	str	r3, [r7, #4]
	}
	if ((velocity - velocity_old) < -MAX_ACC) {
 8001822:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <Speed_Actuation+0x280>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ed97 7a01 	vldr	s14, [r7, #4]
 800182c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001830:	ee17 0a90 	vmov	r0, s15
 8001834:	f7fe fea8 	bl	8000588 <__aeabi_f2d>
 8001838:	a36d      	add	r3, pc, #436	; (adr r3, 80019f0 <Speed_Actuation+0x260>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f96d 	bl	8000b1c <__aeabi_dcmplt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d011      	beq.n	800186c <Speed_Actuation+0xdc>
		velocity = velocity_old - MAX_ACC;
 8001848:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <Speed_Actuation+0x280>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe9b 	bl	8000588 <__aeabi_f2d>
 8001852:	a365      	add	r3, pc, #404	; (adr r3, 80019e8 <Speed_Actuation+0x258>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fd36 	bl	80002c8 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f9e0 	bl	8000c28 <__aeabi_d2f>
 8001868:	4603      	mov	r3, r0
 800186a:	607b      	str	r3, [r7, #4]
	}

	velocity_old = velocity;
 800186c:	4a68      	ldr	r2, [pc, #416]	; (8001a10 <Speed_Actuation+0x280>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]

	/* PWM frequency computation */
	float freq = ABS(velocity / (RADIUS * RESOLUTION * M_PI / 180));
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe88 	bl	8000588 <__aeabi_f2d>
 8001878:	a35f      	add	r3, pc, #380	; (adr r3, 80019f8 <Speed_Actuation+0x268>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7ff f805 	bl	800088c <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f7ff f961 	bl	8000b58 <__aeabi_dcmpgt>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00c      	beq.n	80018b6 <Speed_Actuation+0x126>
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7fe fe73 	bl	8000588 <__aeabi_f2d>
 80018a2:	a355      	add	r3, pc, #340	; (adr r3, 80019f8 <Speed_Actuation+0x268>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fff0 	bl	800088c <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	e00c      	b.n	80018d0 <Speed_Actuation+0x140>
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	a34e      	add	r3, pc, #312	; (adr r3, 80019f8 <Speed_Actuation+0x268>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe ffe3 	bl	800088c <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7ff f9a8 	bl	8000c28 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]


	/* Direction check */
	if (velocity < 0) {
 80018dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d505      	bpl.n	80018f6 <Speed_Actuation+0x166>
		HAL_GPIO_WritePin(DIR_D10_GPIO_Port, DIR_D10_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2140      	movs	r1, #64	; 0x40
 80018ee:	4849      	ldr	r0, [pc, #292]	; (8001a14 <Speed_Actuation+0x284>)
 80018f0:	f001 f9be 	bl	8002c70 <HAL_GPIO_WritePin>
 80018f4:	e004      	b.n	8001900 <Speed_Actuation+0x170>
	} else {
		HAL_GPIO_WritePin(DIR_D10_GPIO_Port, DIR_D10_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	4846      	ldr	r0, [pc, #280]	; (8001a14 <Speed_Actuation+0x284>)
 80018fc:	f001 f9b8 	bl	8002c70 <HAL_GPIO_WritePin>
	}

	/* PSC scale check */
	uint16_t PSC;
	if(freq <= FREQ_CNG_PSC) {
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7fe fe41 	bl	8000588 <__aeabi_f2d>
 8001906:	a33e      	add	r3, pc, #248	; (adr r3, 8001a00 <Speed_Actuation+0x270>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7ff f910 	bl	8000b30 <__aeabi_dcmple>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <Speed_Actuation+0x19e>
		PSC = 60000;
 8001916:	f64e 2360 	movw	r3, #60000	; 0xea60
 800191a:	82fb      	strh	r3, [r7, #22]
		__HAL_TIM_SET_PRESCALER(&htim_1, PSC - 1);
 800191c:	8afb      	ldrh	r3, [r7, #22]
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_PRESCALER(&htim_2, PSC - 1);
 8001924:	8afb      	ldrh	r3, [r7, #22]
 8001926:	1e5a      	subs	r2, r3, #1
 8001928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
 800192c:	e009      	b.n	8001942 <Speed_Actuation+0x1b2>

	} else {
		PSC = 11;
 800192e:	230b      	movs	r3, #11
 8001930:	82fb      	strh	r3, [r7, #22]
		__HAL_TIM_SET_PRESCALER(&htim_1, PSC - 1);
 8001932:	8afb      	ldrh	r3, [r7, #22]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_PRESCALER(&htim_2, PSC - 1);
 800193a:	8afb      	ldrh	r3, [r7, #22]
 800193c:	1e5a      	subs	r2, r3, #1
 800193e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* ARR computation */
	uint32_t ARR = (uint32_t) FCLK / (freq * PSC) - 1;
 8001942:	8afb      	ldrh	r3, [r7, #22]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001954:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001a18 <Speed_Actuation+0x288>
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	613b      	str	r3, [r7, #16]

	if (ARR < MIN_ARR) {
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f241 3287 	movw	r2, #4999	; 0x1387
 8001974:	4293      	cmp	r3, r2
 8001976:	d802      	bhi.n	800197e <Speed_Actuation+0x1ee>
		ARR = MIN_ARR;
 8001978:	f241 3388 	movw	r3, #5000	; 0x1388
 800197c:	613b      	str	r3, [r7, #16]
	}

	if (ARR > MAX_ARR) {
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f113 0f06 	cmn.w	r3, #6
 8001984:	d901      	bls.n	800198a <Speed_Actuation+0x1fa>
		ARR = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
	}


	uint32_t CCR = round(ARR/2);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdd8 	bl	8000544 <__aeabi_ui2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f924 	bl	8000be8 <__aeabi_d2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60bb      	str	r3, [r7, #8]

	/* PWM TIM register update */
	__HAL_TIM_SET_COMPARE(&htim_1,TIM_CHANNEL_1,CCR);
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim_2,TIM_CHANNEL_1,CCR);
 80019aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_AUTORELOAD(&htim_1, ARR);
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(&htim_2, ARR);
 80019ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	67fb      	str	r3, [r7, #124]	; 0x7c

	htim_1.Instance->EGR = TIM_EGR_UG;
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	2201      	movs	r2, #1
 80019c8:	615a      	str	r2, [r3, #20]
	htim_2.Instance->EGR = TIM_EGR_UG;
 80019ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019cc:	2201      	movs	r2, #1
 80019ce:	615a      	str	r2, [r3, #20]
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019da:	b004      	add	sp, #16
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	cccccccd 	.word	0xcccccccd
 80019e4:	bffccccc 	.word	0xbffccccc
 80019e8:	70a3d70a 	.word	0x70a3d70a
 80019ec:	3fc70a3d 	.word	0x3fc70a3d
 80019f0:	70a3d70a 	.word	0x70a3d70a
 80019f4:	bfc70a3d 	.word	0xbfc70a3d
 80019f8:	bde3e662 	.word	0xbde3e662
 80019fc:	3f57298e 	.word	0x3f57298e
 8001a00:	1eb851ec 	.word	0x1eb851ec
 8001a04:	3fc1eb85 	.word	0x3fc1eb85
 8001a08:	3fe66666 	.word	0x3fe66666
 8001a0c:	bfe66666 	.word	0xbfe66666
 8001a10:	2000021c 	.word	0x2000021c
 8001a14:	40020400 	.word	0x40020400
 8001a18:	4ca037a0 	.word	0x4ca037a0
 8001a1c:	cccccccd 	.word	0xcccccccd
 8001a20:	3ffccccc 	.word	0x3ffccccc

08001a24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a2e      	ldr	r2, [pc, #184]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2120      	movs	r1, #32
 8001aae:	481b      	ldr	r0, [pc, #108]	; (8001b1c <MX_GPIO_Init+0xf8>)
 8001ab0:	f001 f8de 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_D10_GPIO_Port, DIR_D10_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	4819      	ldr	r0, [pc, #100]	; (8001b20 <MX_GPIO_Init+0xfc>)
 8001aba:	f001 f8d9 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_GPIO_Init+0x100>)
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4815      	ldr	r0, [pc, #84]	; (8001b28 <MX_GPIO_Init+0x104>)
 8001ad4:	f000 ff38 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <MX_GPIO_Init+0xf8>)
 8001af0:	f000 ff2a 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_D10_Pin;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_D10_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_GPIO_Init+0xfc>)
 8001b0c:	f000 ff1c 	bl	8002948 <HAL_GPIO_Init>

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	10210000 	.word	0x10210000
 8001b28:	40020800 	.word	0x40020800

08001b2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <MX_I2C1_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b6a:	f001 f8b5 	bl	8002cd8 <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 f9a0 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000234 	.word	0x20000234
 8001b80:	40005400 	.word	0x40005400
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12c      	bne.n	8001c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <HAL_I2C_MspInit+0x8c>)
 8001be4:	f000 feb0 	bl	8002948 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b095      	sub	sp, #84	; 0x54
 8001c1c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1e:	f000 fceb 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c22:	f000 f881 	bl	8001d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c26:	f7ff fefd 	bl	8001a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c2a:	f000 fc49 	bl	80024c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c2e:	f000 fa7d 	bl	800212c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c32:	f000 fad3 	bl	80021dc <MX_TIM5_Init>
  MX_TIM10_Init();
 8001c36:	f000 fb29 	bl	800228c <MX_TIM10_Init>
  MX_TIM11_Init();
 8001c3a:	f000 fb4b 	bl	80022d4 <MX_TIM11_Init>
  MX_I2C1_Init();
 8001c3e:	f7ff ff75 	bl	8001b2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* START ROBOT CONFIGURATION */
  uart_buf_len = sprintf(uart_buf, "STARTING SERIAL COMMUNICATION\r\n");
 8001c42:	492d      	ldr	r1, [pc, #180]	; (8001cf8 <main+0xe0>)
 8001c44:	482d      	ldr	r0, [pc, #180]	; (8001cfc <main+0xe4>)
 8001c46:	f004 fbd9 	bl	80063fc <siprintf>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <main+0xe8>)
 8001c4e:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <main+0xe8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	2364      	movs	r3, #100	; 0x64
 8001c58:	4928      	ldr	r1, [pc, #160]	; (8001cfc <main+0xe4>)
 8001c5a:	482a      	ldr	r0, [pc, #168]	; (8001d04 <main+0xec>)
 8001c5c:	f003 fc7f 	bl	800555e <HAL_UART_Transmit>


  /* MPU6050 Initialization */
  if (MPU6050_Init(hi2c1, 500, 1000)) {	/* if MPU6050_Init() = 1 -> HAL_Busy error */
 8001c60:	4c29      	ldr	r4, [pc, #164]	; (8001d08 <main+0xf0>)
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	9312      	str	r3, [sp, #72]	; 0x48
 8001c68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c6c:	9311      	str	r3, [sp, #68]	; 0x44
 8001c6e:	4668      	mov	r0, sp
 8001c70:	f104 0310 	add.w	r3, r4, #16
 8001c74:	2244      	movs	r2, #68	; 0x44
 8001c76:	4619      	mov	r1, r3
 8001c78:	f003 ff40 	bl	8005afc <memcpy>
 8001c7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c80:	f7ff fa9a 	bl	80011b8 <MPU6050_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d017      	beq.n	8001cba <main+0xa2>
	  uart_buf_len = sprintf(uart_buf, "CONFIGURATION ERROR: MPU6050 is not reachable\r\n");
 8001c8a:	4920      	ldr	r1, [pc, #128]	; (8001d0c <main+0xf4>)
 8001c8c:	481b      	ldr	r0, [pc, #108]	; (8001cfc <main+0xe4>)
 8001c8e:	f004 fbb5 	bl	80063fc <siprintf>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a1a      	ldr	r2, [pc, #104]	; (8001d00 <main+0xe8>)
 8001c96:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <main+0xe8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	4916      	ldr	r1, [pc, #88]	; (8001cfc <main+0xe4>)
 8001ca2:	4818      	ldr	r0, [pc, #96]	; (8001d04 <main+0xec>)
 8001ca4:	f003 fc5b 	bl	800555e <HAL_UART_Transmit>
	  while (1) {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001ca8:	2120      	movs	r1, #32
 8001caa:	4819      	ldr	r0, [pc, #100]	; (8001d10 <main+0xf8>)
 8001cac:	f000 fff9 	bl	8002ca2 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8001cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb4:	f000 fd12 	bl	80026dc <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001cb8:	e7f6      	b.n	8001ca8 <main+0x90>
	  }
  }

  uart_buf_len = sprintf(uart_buf, "CONFIGURATION COMPLETED\r\n");
 8001cba:	4916      	ldr	r1, [pc, #88]	; (8001d14 <main+0xfc>)
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <main+0xe4>)
 8001cbe:	f004 fb9d 	bl	80063fc <siprintf>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <main+0xe8>)
 8001cc6:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <main+0xe8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	490a      	ldr	r1, [pc, #40]	; (8001cfc <main+0xe4>)
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <main+0xec>)
 8001cd4:	f003 fc43 	bl	800555e <HAL_UART_Transmit>

  /* TIM Initialization */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	480f      	ldr	r0, [pc, #60]	; (8001d18 <main+0x100>)
 8001cdc:	f002 fe36 	bl	800494c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <main+0x104>)
 8001ce4:	f002 fe32 	bl	800494c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <main+0x108>)
 8001cea:	f002 fd6f 	bl	80047cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <main+0x10c>)
 8001cf0:	f002 fd6c 	bl	80047cc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <main+0xdc>
 8001cf6:	bf00      	nop
 8001cf8:	08008f18 	.word	0x08008f18
 8001cfc:	20000290 	.word	0x20000290
 8001d00:	2000028c 	.word	0x2000028c
 8001d04:	200003e4 	.word	0x200003e4
 8001d08:	20000234 	.word	0x20000234
 8001d0c:	08008f38 	.word	0x08008f38
 8001d10:	40020000 	.word	0x40020000
 8001d14:	08008f68 	.word	0x08008f68
 8001d18:	2000039c 	.word	0x2000039c
 8001d1c:	2000030c 	.word	0x2000030c
 8001d20:	200002c4 	.word	0x200002c4
 8001d24:	20000354 	.word	0x20000354

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2234      	movs	r2, #52	; 0x34
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 feee 	bl	8005b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <SystemClock_Config+0xd4>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <SystemClock_Config+0xd4>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <SystemClock_Config+0xd4>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <SystemClock_Config+0xd8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <SystemClock_Config+0xd8>)
 8001d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <SystemClock_Config+0xd8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d90:	2310      	movs	r3, #16
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d94:	2302      	movs	r3, #2
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001da0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001da4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001da6:	2304      	movs	r3, #4
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fa1a 	bl	80041f0 <HAL_RCC_OscConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001dc2:	f000 f879 	bl	8001eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	2102      	movs	r1, #2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 ff38 	bl	8003c58 <HAL_RCC_ClockConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001dee:	f000 f863 	bl	8001eb8 <Error_Handler>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3750      	adds	r7, #80	; 0x50
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b0a7      	sub	sp, #156	; 0x9c
 8001e08:	af20      	add	r7, sp, #128	; 0x80
 8001e0a:	6078      	str	r0, [r7, #4]

	if (htim==&htim10)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a25      	ldr	r2, [pc, #148]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d143      	bne.n	8001e9c <HAL_TIM_PeriodElapsedCallback+0x98>
//
//		uart_buf_len = sprintf(uart_buf, "Time= %.4f s \r\n", dt);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

		/* Sampling time */
		float dt = (float) 20 / 10000;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e16:	617b      	str	r3, [r7, #20]


		/* Sensor reading */
		Control_Data_t Control_Data = MPU6050_Data(hi2c1, dt);
 8001e18:	4c24      	ldr	r4, [pc, #144]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e1a:	4668      	mov	r0, sp
 8001e1c:	f104 0310 	add.w	r3, r4, #16
 8001e20:	2244      	movs	r2, #68	; 0x44
 8001e22:	4619      	mov	r1, r3
 8001e24:	f003 fe6a 	bl	8005afc <memcpy>
 8001e28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e2c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e30:	f7ff fae6 	bl	8001400 <MPU6050_Data>
 8001e34:	eeb0 7a40 	vmov.f32	s14, s0
 8001e38:	eef0 7a60 	vmov.f32	s15, s1
 8001e3c:	ed87 7a02 	vstr	s14, [r7, #8]
 8001e40:	edc7 7a03 	vstr	s15, [r7, #12]


		/* Control selection */
		float velocity = 0;
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
		if (CONTROL_TYPE == 0) {
			velocity = PID_Control(Control_Data, dt);
 8001e4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e52:	ed97 1a05 	vldr	s2, [r7, #20]
 8001e56:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5a:	eef0 0a67 	vmov.f32	s1, s15
 8001e5e:	f7ff fb8f 	bl	8001580 <PID_Control>
 8001e62:	ed87 0a04 	vstr	s0, [r7, #16]
			velocity = LQR_Control(Control_Data, dt);
		}


		/* Speed actuation */
		Speed_Actuation(htim2, htim5, velocity);
 8001e66:	4e12      	ldr	r6, [pc, #72]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e68:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e6a:	ab0e      	add	r3, sp, #56	; 0x38
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	2248      	movs	r2, #72	; 0x48
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fe43 	bl	8005afc <memcpy>
 8001e76:	466d      	mov	r5, sp
 8001e78:	f106 0410 	add.w	r4, r6, #16
 8001e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e94:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e98:	f7ff fc7a 	bl	8001790 <Speed_Actuation>
//		uart_buf_len = sprintf(uart_buf, "Time= %.4f s \r\n", dt);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

	}

}
 8001e9c:	bf00      	nop
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea4:	200002c4 	.word	0x200002c4
 8001ea8:	3b03126f 	.word	0x3b03126f
 8001eac:	20000234 	.word	0x20000234
 8001eb0:	2000039c 	.word	0x2000039c
 8001eb4:	2000030c 	.word	0x2000030c

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
}
 8001ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <Error_Handler+0x8>
	...

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x4c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f02:	2007      	movs	r0, #7
 8001f04:	f000 fcde 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <NMI_Handler+0x4>

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler+0x4>

08001f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f60:	f000 fb9c 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f6e:	f002 fdb5 	bl	8004adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200002c4 	.word	0x200002c4

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f96:	f003 fd87 	bl	8005aa8 <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fbe:	e7fe      	b.n	8001fbe <_exit+0x12>

08001fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00a      	b.n	8001fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd2:	f3af 8000 	nop.w
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf0      	blt.n	8001fd2 <_read+0x12>
	}

return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e009      	b.n	8002020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf1      	blt.n	800200c <_write+0x12>
	}
	return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_close>:

int _close(int file)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205a:	605a      	str	r2, [r3, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_isatty>:

int _isatty(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return 1;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f003 fcec 	bl	8005aa8 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20020000 	.word	0x20020000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000220 	.word	0x20000220
 8002104:	20000440 	.word	0x20000440

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	615a      	str	r2, [r3, #20]
 800214c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_TIM2_Init+0xac>)
 8002150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002154:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_TIM2_Init+0xac>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_TIM2_Init+0xac>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_TIM2_Init+0xac>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_TIM2_Init+0xac>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_TIM2_Init+0xac>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002174:	4818      	ldr	r0, [pc, #96]	; (80021d8 <MX_TIM2_Init+0xac>)
 8002176:	f002 fb99 	bl	80048ac <HAL_TIM_PWM_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002180:	f7ff fe9a 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	4619      	mov	r1, r3
 8002192:	4811      	ldr	r0, [pc, #68]	; (80021d8 <MX_TIM2_Init+0xac>)
 8002194:	f003 f906 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800219e:	f7ff fe8b 	bl	8001eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a2:	2360      	movs	r3, #96	; 0x60
 80021a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	4807      	ldr	r0, [pc, #28]	; (80021d8 <MX_TIM2_Init+0xac>)
 80021ba:	f002 fd97 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80021c4:	f7ff fe78 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <MX_TIM2_Init+0xac>)
 80021ca:	f000 f91b 	bl	8002404 <HAL_TIM_MspPostInit>

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000039c 	.word	0x2000039c

080021dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e2:	f107 0320 	add.w	r3, r7, #32
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	615a      	str	r2, [r3, #20]
 80021fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <MX_TIM5_Init+0xac>)
 8002202:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <MX_TIM5_Init+0xa8>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <MX_TIM5_Init+0xa8>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002224:	f002 fb42 	bl	80048ac <HAL_TIM_PWM_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800222e:	f7ff fe43 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800223a:	f107 0320 	add.w	r3, r7, #32
 800223e:	4619      	mov	r1, r3
 8002240:	4810      	ldr	r0, [pc, #64]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002242:	f003 f8af 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800224c:	f7ff fe34 	bl	8001eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002250:	2360      	movs	r3, #96	; 0x60
 8002252:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	4807      	ldr	r0, [pc, #28]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002268:	f002 fd40 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002272:	f7ff fe21 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_TIM5_Init+0xa8>)
 8002278:	f000 f8c4 	bl	8002404 <HAL_TIM_MspPostInit>

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000030c 	.word	0x2000030c
 8002288:	40000c00 	.word	0x40000c00

0800228c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_TIM10_Init+0x40>)
 8002292:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <MX_TIM10_Init+0x44>)
 8002294:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4 - 1;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <MX_TIM10_Init+0x40>)
 8002298:	2203      	movs	r2, #3
 800229a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_TIM10_Init+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 42000 - 1;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <MX_TIM10_Init+0x40>)
 80022a4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80022a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_TIM10_Init+0x40>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_TIM10_Init+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_TIM10_Init+0x40>)
 80022b8:	f002 fa38 	bl	800472c <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80022c2:	f7ff fdf9 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002c4 	.word	0x200002c4
 80022d0:	40014400 	.word	0x40014400

080022d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_TIM11_Init+0x40>)
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <MX_TIM11_Init+0x44>)
 80022dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400 - 1;
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <MX_TIM11_Init+0x40>)
 80022e0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80022e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <MX_TIM11_Init+0x40>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_TIM11_Init+0x40>)
 80022ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <MX_TIM11_Init+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_TIM11_Init+0x40>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <MX_TIM11_Init+0x40>)
 8002302:	f002 fa13 	bl	800472c <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800230c:	f7ff fdd4 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000354 	.word	0x20000354
 8002318:	40014800 	.word	0x40014800

0800231c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d10e      	bne.n	800234c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_TIM_PWM_MspInit+0x64>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_TIM_PWM_MspInit+0x64>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_TIM_PWM_MspInit+0x64>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800234a:	e012      	b.n	8002372 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_TIM_PWM_MspInit+0x68>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10d      	bne.n	8002372 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_TIM_PWM_MspInit+0x64>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_TIM_PWM_MspInit+0x64>)
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_TIM_PWM_MspInit+0x64>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40000c00 	.word	0x40000c00

08002388 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_TIM_Base_MspInit+0x70>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d116      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_TIM_Base_MspInit+0x74>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_TIM_Base_MspInit+0x74>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_TIM_Base_MspInit+0x74>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2019      	movs	r0, #25
 80023bc:	f000 fa8d 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023c0:	2019      	movs	r0, #25
 80023c2:	f000 faa6 	bl	8002912 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80023c6:	e012      	b.n	80023ee <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_TIM_Base_MspInit+0x78>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10d      	bne.n	80023ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_TIM_Base_MspInit+0x74>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <HAL_TIM_Base_MspInit+0x74>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_TIM_Base_MspInit+0x74>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40023800 	.word	0x40023800
 8002400:	40014800 	.word	0x40014800

08002404 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d11f      	bne.n	8002466 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_TIM_MspPostInit+0xb0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_TIM_MspPostInit+0xb0>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_TIM_MspPostInit+0xb0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_11_Sx_Pin;
 8002442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_11_Sx_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	4816      	ldr	r0, [pc, #88]	; (80024b8 <HAL_TIM_MspPostInit+0xb4>)
 8002460:	f000 fa72 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002464:	e022      	b.n	80024ac <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_TIM_MspPostInit+0xb8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d11d      	bne.n	80024ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_TIM_MspPostInit+0xb0>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_TIM_MspPostInit+0xb0>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_TIM_MspPostInit+0xb0>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM2_A0_Pin;
 800248c:	2301      	movs	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800249c:	2302      	movs	r3, #2
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_A0_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	4804      	ldr	r0, [pc, #16]	; (80024b8 <HAL_TIM_MspPostInit+0xb4>)
 80024a8:	f000 fa4e 	bl	8002948 <HAL_GPIO_Init>
}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40000c00 	.word	0x40000c00

080024c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024c6:	4a11      	ldr	r2, [pc, #68]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024cc:	4a10      	ldr	r2, [pc, #64]	; (8002510 <MX_USART2_UART_Init+0x50>)
 80024ce:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024e4:	2208      	movs	r2, #8
 80024e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_USART2_UART_Init+0x48>)
 80024f6:	f002 ffe5 	bl	80054c4 <HAL_UART_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002500:	f7ff fcda 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200003e4 	.word	0x200003e4
 800250c:	40004400 	.word	0x40004400
 8002510:	001e8480 	.word	0x001e8480

08002514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_UART_MspInit+0x84>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d12b      	bne.n	800258e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_MspInit+0x88>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_UART_MspInit+0x88>)
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0x88>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_UART_MspInit+0x88>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_UART_MspInit+0x88>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_UART_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800256e:	230c      	movs	r3, #12
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800257e:	2307      	movs	r3, #7
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <HAL_UART_MspInit+0x8c>)
 800258a:	f000 f9dd 	bl	8002948 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40004400 	.word	0x40004400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025aa:	490e      	ldr	r1, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c0:	4c0b      	ldr	r4, [pc, #44]	; (80025f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025ce:	f7ff fd9b 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f003 fa6f 	bl	8005ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff fb1f 	bl	8001c18 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80025e8:	08009400 	.word	0x08009400
  ldr r2, =_sbss
 80025ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80025f0:	2000043c 	.word	0x2000043c

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 f94f 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	2000      	movs	r0, #0
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fc4a 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f967 	bl	800292e <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 f92f 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000010 	.word	0x20000010
 8002694:	20000018 	.word	0x20000018
 8002698:	20000014 	.word	0x20000014

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000018 	.word	0x20000018
 80026c0:	20000428 	.word	0x20000428

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000428 	.word	0x20000428

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000018 	.word	0x20000018

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff3e 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff31 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e165      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8154 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d005      	beq.n	800299a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	2b02      	cmp	r3, #2
 8002998:	d130      	bne.n	80029fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ae 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aea:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_GPIO_Init+0x308>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x21a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <HAL_GPIO_Init+0x30c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x216>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <HAL_GPIO_Init+0x310>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x212>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <HAL_GPIO_Init+0x314>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x20e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <HAL_GPIO_Init+0x318>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x20a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_GPIO_Init+0x31c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x202>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bac:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae96 	bls.w	8002964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e12b      	b.n	8002f42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe ff42 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d3c:	f001 f87e 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8002d40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a81      	ldr	r2, [pc, #516]	; (8002f4c <HAL_I2C_Init+0x274>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d807      	bhi.n	8002d5c <HAL_I2C_Init+0x84>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a80      	ldr	r2, [pc, #512]	; (8002f50 <HAL_I2C_Init+0x278>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e006      	b.n	8002d6a <HAL_I2C_Init+0x92>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a7d      	ldr	r2, [pc, #500]	; (8002f54 <HAL_I2C_Init+0x27c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	bf94      	ite	ls
 8002d64:	2301      	movls	r3, #1
 8002d66:	2300      	movhi	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0e7      	b.n	8002f42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a78      	ldr	r2, [pc, #480]	; (8002f58 <HAL_I2C_Init+0x280>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0c9b      	lsrs	r3, r3, #18
 8002d7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <HAL_I2C_Init+0x274>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d802      	bhi.n	8002dac <HAL_I2C_Init+0xd4>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	e009      	b.n	8002dc0 <HAL_I2C_Init+0xe8>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	4a69      	ldr	r2, [pc, #420]	; (8002f5c <HAL_I2C_Init+0x284>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	495c      	ldr	r1, [pc, #368]	; (8002f4c <HAL_I2C_Init+0x274>)
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	d819      	bhi.n	8002e14 <HAL_I2C_Init+0x13c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e59      	subs	r1, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df4:	400b      	ands	r3, r1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_I2C_Init+0x138>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1e59      	subs	r1, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0e:	e051      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e04f      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d111      	bne.n	8002e40 <HAL_I2C_Init+0x168>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e012      	b.n	8002e66 <HAL_I2C_Init+0x18e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	0099      	lsls	r1, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Init+0x196>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10e      	bne.n	8002e94 <HAL_I2C_Init+0x1bc>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e58      	subs	r0, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6809      	ldr	r1, [r1, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6911      	ldr	r1, [r2, #16]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	001e847f 	.word	0x001e847f
 8002f54:	003d08ff 	.word	0x003d08ff
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f7a:	f7ff fba3 	bl	80026c4 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	f040 80d9 	bne.w	8003140 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2319      	movs	r3, #25
 8002f94:	2201      	movs	r2, #1
 8002f96:	496d      	ldr	r1, [pc, #436]	; (800314c <HAL_I2C_Mem_Write+0x1ec>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fc7f 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0cc      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Mem_Write+0x56>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0c5      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2240      	movs	r2, #64	; 0x40
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a4d      	ldr	r2, [pc, #308]	; (8003150 <HAL_I2C_Mem_Write+0x1f0>)
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301e:	88f8      	ldrh	r0, [r7, #6]
 8003020:	893a      	ldrh	r2, [r7, #8]
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4603      	mov	r3, r0
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fab6 	bl	80035a0 <I2C_RequestMemoryWrite>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d052      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e081      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fd00 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b04      	cmp	r3, #4
 8003054:	d107      	bne.n	8003066 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06b      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d11b      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x180>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d017      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1aa      	bne.n	800303e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fcec 	bl	8003aca <I2C_WaitOnBTFFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d107      	bne.n	8003110 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e016      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	00100002 	.word	0x00100002
 8003150:	ffff0000 	.word	0xffff0000

08003154 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800316e:	f7ff faa9 	bl	80026c4 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	f040 8208 	bne.w	8003592 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2319      	movs	r3, #25
 8003188:	2201      	movs	r2, #1
 800318a:	497b      	ldr	r1, [pc, #492]	; (8003378 <HAL_I2C_Mem_Read+0x224>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fb85 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	e1fb      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Mem_Read+0x56>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e1f4      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d007      	beq.n	80031d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2222      	movs	r2, #34	; 0x22
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a5b      	ldr	r2, [pc, #364]	; (800337c <HAL_I2C_Mem_Read+0x228>)
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003212:	88f8      	ldrh	r0, [r7, #6]
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4603      	mov	r3, r0
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fa52 	bl	80036cc <I2C_RequestMemoryRead>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1b0      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	623b      	str	r3, [r7, #32]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e184      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11b      	bne.n	80032a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e164      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d11b      	bne.n	80032e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	e144      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032f8:	e138      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b03      	cmp	r3, #3
 8003300:	f200 80f1 	bhi.w	80034e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b01      	cmp	r3, #1
 800330a:	d123      	bne.n	8003354 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fc1b 	bl	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e139      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003352:	e10b      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	2b02      	cmp	r3, #2
 800335a:	d14e      	bne.n	80033fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	2200      	movs	r2, #0
 8003364:	4906      	ldr	r1, [pc, #24]	; (8003380 <HAL_I2C_Mem_Read+0x22c>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fa98 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e10e      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
 8003376:	bf00      	nop
 8003378:	00100002 	.word	0x00100002
 800337c:	ffff0000 	.word	0xffff0000
 8003380:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f8:	e0b8      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	2200      	movs	r2, #0
 8003402:	4966      	ldr	r1, [pc, #408]	; (800359c <HAL_I2C_Mem_Read+0x448>)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fa49 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0bf      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2200      	movs	r2, #0
 800345e:	494f      	ldr	r1, [pc, #316]	; (800359c <HAL_I2C_Mem_Read+0x448>)
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fa1b 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e091      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e4:	e042      	b.n	800356c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fb2e 	bl	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e04c      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d118      	bne.n	800356c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	f47f aec2 	bne.w	80032fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010004 	.word	0x00010004

080035a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	460b      	mov	r3, r1
 80035b4:	813b      	strh	r3, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f960 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	d103      	bne.n	80035fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e05f      	b.n	80036be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800360c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	492d      	ldr	r1, [pc, #180]	; (80036c8 <I2C_RequestMemoryWrite+0x128>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f998 	bl	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e04c      	b.n	80036be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fa02 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02b      	b.n	80036be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	e021      	b.n	80036bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	b29b      	uxth	r3, r3
 800367e:	b2da      	uxtb	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f9dc 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e005      	b.n	80036be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b2:	893b      	ldrh	r3, [r7, #8]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	00010002 	.word	0x00010002

080036cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	817b      	strh	r3, [r7, #10]
 80036de:	460b      	mov	r3, r1
 80036e0:	813b      	strh	r3, [r7, #8]
 80036e2:	4613      	mov	r3, r2
 80036e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	2200      	movs	r2, #0
 800370e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f8c2 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372c:	d103      	bne.n	8003736 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0aa      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003748:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	4952      	ldr	r1, [pc, #328]	; (8003898 <I2C_RequestMemoryRead+0x1cc>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8fa 	bl	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e097      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f964 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e076      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a8:	893b      	ldrh	r3, [r7, #8]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	e021      	b.n	80037f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037b4:	893b      	ldrh	r3, [r7, #8]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	6a39      	ldr	r1, [r7, #32]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f93e 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d107      	bne.n	80037ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e050      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ee:	893b      	ldrh	r3, [r7, #8]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	6a39      	ldr	r1, [r7, #32]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f923 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e035      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003832:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	2200      	movs	r2, #0
 800383c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f82b 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385a:	d103      	bne.n	8003864 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e013      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	4906      	ldr	r1, [pc, #24]	; (8003898 <I2C_RequestMemoryRead+0x1cc>)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f863 	bl	800394a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	00010002 	.word	0x00010002

0800389c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ac:	e025      	b.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d021      	beq.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b6:	f7fe ff05 	bl	80026c4 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d116      	bne.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e023      	b.n	8003942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10d      	bne.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	e00c      	b.n	800393a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d0b6      	beq.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003958:	e051      	b.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003968:	d123      	bne.n	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e046      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d021      	beq.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fe83 	bl	80026c4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e020      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10c      	bne.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e00b      	b.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d18d      	bne.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a54:	e02d      	b.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f8ce 	bl	8003bf8 <I2C_IsAcknowledgeFailed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e02d      	b.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d021      	beq.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fe29 	bl	80026c4 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d116      	bne.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e007      	b.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d1ca      	bne.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ad6:	e02d      	b.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f88d 	bl	8003bf8 <I2C_IsAcknowledgeFailed>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e02d      	b.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d021      	beq.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af0:	f7fe fde8 	bl	80026c4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d1ca      	bne.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b58:	e042      	b.n	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d119      	bne.n	8003b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0210 	mvn.w	r2, #16
 8003b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e029      	b.n	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fe fd92 	bl	80026c4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e007      	b.n	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d1b5      	bne.n	8003b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d11b      	bne.n	8003c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fe fcbc 	bl	80026c4 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fcb8 	bl	80026c4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f855 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fc1c 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	08008f84 	.word	0x08008f84
 8003e1c:	20000010 	.word	0x20000010
 8003e20:	20000014 	.word	0x20000014

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000010 	.word	0x20000010

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08008f94 	.word	0x08008f94

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffdc 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08008f94 	.word	0x08008f94

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea8:	4bce      	ldr	r3, [pc, #824]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	f200 818d 	bhi.w	80041d0 <HAL_RCC_GetSysClockFreq+0x344>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_RCC_GetSysClockFreq+0x30>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ef1 	.word	0x08003ef1
 8003ec0:	080041d1 	.word	0x080041d1
 8003ec4:	080041d1 	.word	0x080041d1
 8003ec8:	080041d1 	.word	0x080041d1
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	080041d1 	.word	0x080041d1
 8003ed4:	080041d1 	.word	0x080041d1
 8003ed8:	080041d1 	.word	0x080041d1
 8003edc:	08003efd 	.word	0x08003efd
 8003ee0:	080041d1 	.word	0x080041d1
 8003ee4:	080041d1 	.word	0x080041d1
 8003ee8:	080041d1 	.word	0x080041d1
 8003eec:	08004071 	.word	0x08004071
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4bbd      	ldr	r3, [pc, #756]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ef2:	61bb      	str	r3, [r7, #24]
       break;
 8003ef4:	e16f      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef6:	4bbd      	ldr	r3, [pc, #756]	; (80041ec <HAL_RCC_GetSysClockFreq+0x360>)
 8003ef8:	61bb      	str	r3, [r7, #24]
      break;
 8003efa:	e16c      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efc:	4bb9      	ldr	r3, [pc, #740]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f04:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f06:	4bb7      	ldr	r3, [pc, #732]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d053      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f12:	4bb4      	ldr	r3, [pc, #720]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	ea02 0400 	and.w	r4, r2, r0
 8003f2a:	603c      	str	r4, [r7, #0]
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	014b      	lsls	r3, r1, #5
 8003f42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f46:	0142      	lsls	r2, r0, #5
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	1ac0      	subs	r0, r0, r3
 8003f50:	462b      	mov	r3, r5
 8003f52:	eb61 0103 	sbc.w	r1, r1, r3
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f64:	0182      	lsls	r2, r0, #6
 8003f66:	1a12      	subs	r2, r2, r0
 8003f68:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6c:	f04f 0000 	mov.w	r0, #0
 8003f70:	f04f 0100 	mov.w	r1, #0
 8003f74:	00d9      	lsls	r1, r3, #3
 8003f76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f7a:	00d0      	lsls	r0, r2, #3
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4621      	mov	r1, r4
 8003f82:	1852      	adds	r2, r2, r1
 8003f84:	4629      	mov	r1, r5
 8003f86:	eb43 0101 	adc.w	r1, r3, r1
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	0259      	lsls	r1, r3, #9
 8003f96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f9a:	0250      	lsls	r0, r2, #9
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	f7fc fe8c 	bl	8000cc8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e04c      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fba:	4b8a      	ldr	r3, [pc, #552]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	ea02 0a00 	and.w	sl, r2, r0
 8003fd2:	ea03 0b01 	and.w	fp, r3, r1
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	4659      	mov	r1, fp
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	014b      	lsls	r3, r1, #5
 8003fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fe8:	0142      	lsls	r2, r0, #5
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	ebb0 000a 	subs.w	r0, r0, sl
 8003ff2:	eb61 010b 	sbc.w	r1, r1, fp
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	018b      	lsls	r3, r1, #6
 8004000:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004004:	0182      	lsls	r2, r0, #6
 8004006:	1a12      	subs	r2, r2, r0
 8004008:	eb63 0301 	sbc.w	r3, r3, r1
 800400c:	f04f 0000 	mov.w	r0, #0
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	00d9      	lsls	r1, r3, #3
 8004016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800401a:	00d0      	lsls	r0, r2, #3
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	eb12 020a 	adds.w	r2, r2, sl
 8004024:	eb43 030b 	adc.w	r3, r3, fp
 8004028:	f04f 0000 	mov.w	r0, #0
 800402c:	f04f 0100 	mov.w	r1, #0
 8004030:	0299      	lsls	r1, r3, #10
 8004032:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004036:	0290      	lsls	r0, r2, #10
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	461a      	mov	r2, r3
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	f7fc fe3e 	bl	8000cc8 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4613      	mov	r3, r2
 8004052:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	61bb      	str	r3, [r7, #24]
      break;
 800406e:	e0b2      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004078:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407a:	4b5a      	ldr	r3, [pc, #360]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d04d      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b57      	ldr	r3, [pc, #348]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	461a      	mov	r2, r3
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	ea02 0800 	and.w	r8, r2, r0
 800409e:	ea03 0901 	and.w	r9, r3, r1
 80040a2:	4640      	mov	r0, r8
 80040a4:	4649      	mov	r1, r9
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	014b      	lsls	r3, r1, #5
 80040b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040b4:	0142      	lsls	r2, r0, #5
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	ebb0 0008 	subs.w	r0, r0, r8
 80040be:	eb61 0109 	sbc.w	r1, r1, r9
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	018b      	lsls	r3, r1, #6
 80040cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040d0:	0182      	lsls	r2, r0, #6
 80040d2:	1a12      	subs	r2, r2, r0
 80040d4:	eb63 0301 	sbc.w	r3, r3, r1
 80040d8:	f04f 0000 	mov.w	r0, #0
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	00d9      	lsls	r1, r3, #3
 80040e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e6:	00d0      	lsls	r0, r2, #3
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	eb12 0208 	adds.w	r2, r2, r8
 80040f0:	eb43 0309 	adc.w	r3, r3, r9
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0259      	lsls	r1, r3, #9
 80040fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004102:	0250      	lsls	r0, r2, #9
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	461a      	mov	r2, r3
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f7fc fdd8 	bl	8000cc8 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e04a      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	461a      	mov	r2, r3
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	ea02 0400 	and.w	r4, r2, r0
 800413a:	ea03 0501 	and.w	r5, r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	014b      	lsls	r3, r1, #5
 800414c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004150:	0142      	lsls	r2, r0, #5
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	1b00      	subs	r0, r0, r4
 8004158:	eb61 0105 	sbc.w	r1, r1, r5
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	018b      	lsls	r3, r1, #6
 8004166:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800416a:	0182      	lsls	r2, r0, #6
 800416c:	1a12      	subs	r2, r2, r0
 800416e:	eb63 0301 	sbc.w	r3, r3, r1
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	00d9      	lsls	r1, r3, #3
 800417c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004180:	00d0      	lsls	r0, r2, #3
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	1912      	adds	r2, r2, r4
 8004188:	eb45 0303 	adc.w	r3, r5, r3
 800418c:	f04f 0000 	mov.w	r0, #0
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	0299      	lsls	r1, r3, #10
 8004196:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800419a:	0290      	lsls	r0, r2, #10
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f7fc fd8c 	bl	8000cc8 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4613      	mov	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0f1b      	lsrs	r3, r3, #28
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	61bb      	str	r3, [r7, #24]
      break;
 80041ce:	e002      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041d2:	61bb      	str	r3, [r7, #24]
      break;
 80041d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d6:	69bb      	ldr	r3, [r7, #24]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200

080041f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e28d      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8083 	beq.w	8004316 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004210:	4b94      	ldr	r3, [pc, #592]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b04      	cmp	r3, #4
 800421a:	d019      	beq.n	8004250 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800421c:	4b91      	ldr	r3, [pc, #580]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004224:	2b08      	cmp	r3, #8
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004228:	4b8e      	ldr	r3, [pc, #568]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d00c      	beq.n	8004250 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b8b      	ldr	r3, [pc, #556]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d112      	bne.n	8004268 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4b84      	ldr	r3, [pc, #528]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05b      	beq.n	8004314 <HAL_RCC_OscConfig+0x124>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d157      	bne.n	8004314 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e25a      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x90>
 8004272:	4b7c      	ldr	r3, [pc, #496]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7b      	ldr	r2, [pc, #492]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xcc>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0xb4>
 800428a:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a75      	ldr	r2, [pc, #468]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b73      	ldr	r3, [pc, #460]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a72      	ldr	r2, [pc, #456]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xcc>
 80042a4:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6e      	ldr	r2, [pc, #440]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b6c      	ldr	r3, [pc, #432]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6b      	ldr	r2, [pc, #428]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fe f9fe 	bl	80026c4 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fe f9fa 	bl	80026c4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e21f      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xdc>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fe f9ea 	bl	80026c4 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fe f9e6 	bl	80026c4 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e20b      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	4b57      	ldr	r3, [pc, #348]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x104>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d06f      	beq.n	8004402 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004322:	4b50      	ldr	r3, [pc, #320]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800432e:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004336:	2b08      	cmp	r3, #8
 8004338:	d105      	bne.n	8004346 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b47      	ldr	r3, [pc, #284]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d11c      	bne.n	800438c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b44      	ldr	r3, [pc, #272]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x186>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e1d3      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4937      	ldr	r1, [pc, #220]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	e03a      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCC_OscConfig+0x278>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fe f993 	bl	80026c4 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a2:	f7fe f98f 	bl	80026c4 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1b4      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4925      	ldr	r1, [pc, #148]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
 80043d4:	e015      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_RCC_OscConfig+0x278>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fe f972 	bl	80026c4 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e4:	f7fe f96e 	bl	80026c4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e193      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d036      	beq.n	800447c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <HAL_RCC_OscConfig+0x27c>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fe f952 	bl	80026c4 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004424:	f7fe f94e 	bl	80026c4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e173      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_OscConfig+0x274>)
 8004438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x234>
 8004442:	e01b      	b.n	800447c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_OscConfig+0x27c>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fe f93b 	bl	80026c4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	e00e      	b.n	8004470 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004452:	f7fe f937 	bl	80026c4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d907      	bls.n	8004470 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e15c      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
 8004464:	40023800 	.word	0x40023800
 8004468:	42470000 	.word	0x42470000
 800446c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b8a      	ldr	r3, [pc, #552]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ea      	bne.n	8004452 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8097 	beq.w	80045b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b83      	ldr	r3, [pc, #524]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b7f      	ldr	r3, [pc, #508]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a7e      	ldr	r2, [pc, #504]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b7c      	ldr	r3, [pc, #496]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b79      	ldr	r3, [pc, #484]	; (80046a0 <HAL_RCC_OscConfig+0x4b0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d118      	bne.n	80044f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <HAL_RCC_OscConfig+0x4b0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a75      	ldr	r2, [pc, #468]	; (80046a0 <HAL_RCC_OscConfig+0x4b0>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe f8f7 	bl	80026c4 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7fe f8f3 	bl	80026c4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e118      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	4b6c      	ldr	r3, [pc, #432]	; (80046a0 <HAL_RCC_OscConfig+0x4b0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x31e>
 8004500:	4b66      	ldr	r3, [pc, #408]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a65      	ldr	r2, [pc, #404]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	e01c      	b.n	8004548 <HAL_RCC_OscConfig+0x358>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b05      	cmp	r3, #5
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x340>
 8004516:	4b61      	ldr	r3, [pc, #388]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a60      	ldr	r2, [pc, #384]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	4b5e      	ldr	r3, [pc, #376]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a5d      	ldr	r2, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0x358>
 8004530:	4b5a      	ldr	r3, [pc, #360]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a59      	ldr	r2, [pc, #356]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
 800453c:	4b57      	ldr	r3, [pc, #348]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a56      	ldr	r2, [pc, #344]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004542:	f023 0304 	bic.w	r3, r3, #4
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe f8b8 	bl	80026c4 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	e00a      	b.n	800456e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fe f8b4 	bl	80026c4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0d7      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ee      	beq.n	8004558 <HAL_RCC_OscConfig+0x368>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fe f8a2 	bl	80026c4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fe f89e 	bl	80026c4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0c1      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459a:	4b40      	ldr	r3, [pc, #256]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ee      	bne.n	8004584 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	4a3a      	ldr	r2, [pc, #232]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80ad 	beq.w	800471c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d060      	beq.n	8004690 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d145      	bne.n	8004662 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_OscConfig+0x4b4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fe f872 	bl	80026c4 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fe f86e 	bl	80026c4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e093      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	019b      	lsls	r3, r3, #6
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	3b01      	subs	r3, #1
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	491b      	ldr	r1, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x4b4>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fe f843 	bl	80026c4 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004642:	f7fe f83f 	bl	80026c4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e064      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x452>
 8004660:	e05c      	b.n	800471c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_OscConfig+0x4b4>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fe f82c 	bl	80026c4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004670:	f7fe f828 	bl	80026c4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e04d      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_OscConfig+0x4ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x480>
 800468e:	e045      	b.n	800471c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e040      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
 800469c:	40023800 	.word	0x40023800
 80046a0:	40007000 	.word	0x40007000
 80046a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a8:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCC_OscConfig+0x538>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d030      	beq.n	8004718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d129      	bne.n	8004718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d122      	bne.n	8004718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d119      	bne.n	8004718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d10f      	bne.n	8004718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d107      	bne.n	8004718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fe18 	bl	8002388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 fba4 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04e      	b.n	8004882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <HAL_TIM_Base_Start_IT+0xc4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d022      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d01d      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_TIM_Base_Start_IT+0xc8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <HAL_TIM_Base_Start_IT+0xcc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	; (800489c <HAL_TIM_Base_Start_IT+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d010      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	e007      	b.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40001800 	.word	0x40001800

080048ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e041      	b.n	8004942 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd fd22 	bl	800231c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 fae4 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_TIM_PWM_Start+0x24>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e022      	b.n	80049b6 <HAL_TIM_PWM_Start+0x6a>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d109      	bne.n	800498a <HAL_TIM_PWM_Start+0x3e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e015      	b.n	80049b6 <HAL_TIM_PWM_Start+0x6a>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x58>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e008      	b.n	80049b6 <HAL_TIM_PWM_Start+0x6a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e07c      	b.n	8004ab8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_PWM_Start+0x82>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049cc:	e013      	b.n	80049f6 <HAL_TIM_PWM_Start+0xaa>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start+0x92>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	e00b      	b.n	80049f6 <HAL_TIM_PWM_Start+0xaa>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start+0xa2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ec:	e003      	b.n	80049f6 <HAL_TIM_PWM_Start+0xaa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fcaa 	bl	8005358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2d      	ldr	r2, [pc, #180]	; (8004ac0 <HAL_TIM_PWM_Start+0x174>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIM_PWM_Start+0xcc>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2c      	ldr	r2, [pc, #176]	; (8004ac4 <HAL_TIM_PWM_Start+0x178>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d101      	bne.n	8004a1c <HAL_TIM_PWM_Start+0xd0>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_TIM_PWM_Start+0xd2>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_TIM_PWM_Start+0x174>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d022      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d01d      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_TIM_PWM_Start+0x17c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d018      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_TIM_PWM_Start+0x180>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_TIM_PWM_Start+0x184>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <HAL_TIM_PWM_Start+0x178>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_TIM_PWM_Start+0x188>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x136>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <HAL_TIM_PWM_Start+0x18c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d111      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b06      	cmp	r3, #6
 8004a92:	d010      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	e007      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40001800 	.word	0x40001800

08004adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0202 	mvn.w	r2, #2
 8004b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9ac 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f99e 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f9af 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0204 	mvn.w	r2, #4
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f982 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f974 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f985 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f958 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f94a 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f95b 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0210 	mvn.w	r2, #16
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f92e 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f920 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f931 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d10e      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0201 	mvn.w	r2, #1
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd f8d2 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d10e      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d107      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fc12 	bl	80054b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8f6 	bl	8004ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0220 	mvn.w	r2, #32
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fbdc 	bl	800549c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0ac      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b0c      	cmp	r3, #12
 8004d12:	f200 809f 	bhi.w	8004e54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004e55 	.word	0x08004e55
 8004d24:	08004e55 	.word	0x08004e55
 8004d28:	08004e55 	.word	0x08004e55
 8004d2c:	08004d91 	.word	0x08004d91
 8004d30:	08004e55 	.word	0x08004e55
 8004d34:	08004e55 	.word	0x08004e55
 8004d38:	08004e55 	.word	0x08004e55
 8004d3c:	08004dd3 	.word	0x08004dd3
 8004d40:	08004e55 	.word	0x08004e55
 8004d44:	08004e55 	.word	0x08004e55
 8004d48:	08004e55 	.word	0x08004e55
 8004d4c:	08004e13 	.word	0x08004e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f94e 	bl	8004ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0208 	orr.w	r2, r2, #8
 8004d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0204 	bic.w	r2, r2, #4
 8004d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6999      	ldr	r1, [r3, #24]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	619a      	str	r2, [r3, #24]
      break;
 8004d8e:	e062      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f99e 	bl	80050d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]
      break;
 8004dd0:	e041      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f9f3 	bl	80051c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0208 	orr.w	r2, r2, #8
 8004dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0204 	bic.w	r2, r2, #4
 8004dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69d9      	ldr	r1, [r3, #28]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	61da      	str	r2, [r3, #28]
      break;
 8004e10:	e021      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fa47 	bl	80052ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	021a      	lsls	r2, r3, #8
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	61da      	str	r2, [r3, #28]
      break;
 8004e52:	e000      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a40      	ldr	r2, [pc, #256]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <TIM_Base_SetConfig+0x118>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3c      	ldr	r2, [pc, #240]	; (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3b      	ldr	r2, [pc, #236]	; (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3a      	ldr	r2, [pc, #232]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d027      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <TIM_Base_SetConfig+0x118>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d023      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01f      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a29      	ldr	r2, [pc, #164]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d017      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00f      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a25      	ldr	r2, [pc, #148]	; (8004fec <TIM_Base_SetConfig+0x134>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a24      	ldr	r2, [pc, #144]	; (8004ff0 <TIM_Base_SetConfig+0x138>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a23      	ldr	r2, [pc, #140]	; (8004ff4 <TIM_Base_SetConfig+0x13c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	615a      	str	r2, [r3, #20]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800
 8004fec:	40001800 	.word	0x40001800
 8004ff0:	40001c00 	.word	0x40001c00
 8004ff4:	40002000 	.word	0x40002000

08004ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 0302 	bic.w	r3, r3, #2
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <TIM_OC1_SetConfig+0xd8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC1_SetConfig+0x64>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <TIM_OC1_SetConfig+0xdc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10c      	bne.n	8005076 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0308 	bic.w	r3, r3, #8
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <TIM_OC1_SetConfig+0xd8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_OC1_SetConfig+0x8e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <TIM_OC1_SetConfig+0xdc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d111      	bne.n	80050aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40010400 	.word	0x40010400

080050d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 0210 	bic.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0320 	bic.w	r3, r3, #32
 8005122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a22      	ldr	r2, [pc, #136]	; (80051bc <TIM_OC2_SetConfig+0xe4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC2_SetConfig+0x68>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_OC2_SetConfig+0xe8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10d      	bne.n	800515c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a17      	ldr	r2, [pc, #92]	; (80051bc <TIM_OC2_SetConfig+0xe4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC2_SetConfig+0x94>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <TIM_OC2_SetConfig+0xe8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d113      	bne.n	8005194 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <TIM_OC3_SetConfig+0xe0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC3_SetConfig+0x66>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <TIM_OC3_SetConfig+0xe4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10d      	bne.n	8005246 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <TIM_OC3_SetConfig+0xe0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC3_SetConfig+0x92>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <TIM_OC3_SetConfig+0xe4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d113      	bne.n	800527e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010400 	.word	0x40010400

080052ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	031b      	lsls	r3, r3, #12
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a12      	ldr	r2, [pc, #72]	; (8005350 <TIM_OC4_SetConfig+0xa4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_OC4_SetConfig+0x68>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a11      	ldr	r2, [pc, #68]	; (8005354 <TIM_OC4_SetConfig+0xa8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d109      	bne.n	8005328 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40010400 	.word	0x40010400

08005358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2201      	movs	r2, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	43db      	mvns	r3, r3
 800537a:	401a      	ands	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e05a      	b.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a21      	ldr	r2, [pc, #132]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d01d      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a17      	ldr	r2, [pc, #92]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10c      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40010400 	.word	0x40010400
 8005494:	40014000 	.word	0x40014000
 8005498:	40001800 	.word	0x40001800

0800549c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03f      	b.n	8005556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd f812 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f905 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af02      	add	r7, sp, #8
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b20      	cmp	r3, #32
 800557c:	d17c      	bne.n	8005678 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_UART_Transmit+0x2c>
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e075      	b.n	800567a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_UART_Transmit+0x3e>
 8005598:	2302      	movs	r3, #2
 800559a:	e06e      	b.n	800567a <HAL_UART_Transmit+0x11c>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b2:	f7fd f887 	bl	80026c4 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	88fa      	ldrh	r2, [r7, #6]
 80055c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d108      	bne.n	80055e0 <HAL_UART_Transmit+0x82>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e003      	b.n	80055e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055f0:	e02a      	b.n	8005648 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2180      	movs	r1, #128	; 0x80
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f840 	bl	8005682 <UART_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e036      	b.n	800567a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	3302      	adds	r3, #2
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e007      	b.n	800563a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1cf      	bne.n	80055f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	2140      	movs	r1, #64	; 0x40
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f810 	bl	8005682 <UART_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	e02c      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d028      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80056a2:	f7fd f80f 	bl	80026c4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d21d      	bcs.n	80056ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e00f      	b.n	800570e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	bf0c      	ite	eq
 80056fe:	2301      	moveq	r3, #1
 8005700:	2300      	movne	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	429a      	cmp	r2, r3
 800570a:	d0c3      	beq.n	8005694 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	b09f      	sub	sp, #124	; 0x7c
 800571e:	af00      	add	r7, sp, #0
 8005720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	68d9      	ldr	r1, [r3, #12]
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	ea40 0301 	orr.w	r3, r0, r1
 8005738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	431a      	orrs	r2, r3
 800574a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4313      	orrs	r3, r2
 8005750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800575c:	f021 010c 	bic.w	r1, r1, #12
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005766:	430b      	orrs	r3, r1
 8005768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	6999      	ldr	r1, [r3, #24]
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	ea40 0301 	orr.w	r3, r0, r1
 8005780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4bc5      	ldr	r3, [pc, #788]	; (8005a9c <UART_SetConfig+0x384>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d004      	beq.n	8005796 <UART_SetConfig+0x7e>
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4bc3      	ldr	r3, [pc, #780]	; (8005aa0 <UART_SetConfig+0x388>)
 8005792:	429a      	cmp	r2, r3
 8005794:	d103      	bne.n	800579e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005796:	f7fe fb65 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 800579a:	6778      	str	r0, [r7, #116]	; 0x74
 800579c:	e002      	b.n	80057a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fe fb4d 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 80057a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ac:	f040 80b6 	bne.w	800591c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b2:	461c      	mov	r4, r3
 80057b4:	f04f 0500 	mov.w	r5, #0
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	6439      	str	r1, [r7, #64]	; 0x40
 80057c0:	415b      	adcs	r3, r3
 80057c2:	647b      	str	r3, [r7, #68]	; 0x44
 80057c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057c8:	1912      	adds	r2, r2, r4
 80057ca:	eb45 0303 	adc.w	r3, r5, r3
 80057ce:	f04f 0000 	mov.w	r0, #0
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	00d9      	lsls	r1, r3, #3
 80057d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057dc:	00d0      	lsls	r0, r2, #3
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	1911      	adds	r1, r2, r4
 80057e4:	6639      	str	r1, [r7, #96]	; 0x60
 80057e6:	416b      	adcs	r3, r5
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	1891      	adds	r1, r2, r2
 80057f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057f8:	415b      	adcs	r3, r3
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005804:	f7fb fa60 	bl	8000cc8 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4ba5      	ldr	r3, [pc, #660]	; (8005aa4 <UART_SetConfig+0x38c>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011e      	lsls	r6, r3, #4
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	461c      	mov	r4, r3
 800581a:	f04f 0500 	mov.w	r5, #0
 800581e:	4622      	mov	r2, r4
 8005820:	462b      	mov	r3, r5
 8005822:	1891      	adds	r1, r2, r2
 8005824:	6339      	str	r1, [r7, #48]	; 0x30
 8005826:	415b      	adcs	r3, r3
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800582e:	1912      	adds	r2, r2, r4
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	00d9      	lsls	r1, r3, #3
 800583e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005842:	00d0      	lsls	r0, r2, #3
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	1911      	adds	r1, r2, r4
 800584a:	65b9      	str	r1, [r7, #88]	; 0x58
 800584c:	416b      	adcs	r3, r5
 800584e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	461a      	mov	r2, r3
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	1891      	adds	r1, r2, r2
 800585c:	62b9      	str	r1, [r7, #40]	; 0x28
 800585e:	415b      	adcs	r3, r3
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800586a:	f7fb fa2d 	bl	8000cc8 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	2164      	movs	r1, #100	; 0x64
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	3332      	adds	r3, #50	; 0x32
 8005886:	4a87      	ldr	r2, [pc, #540]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005894:	441e      	add	r6, r3
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	4618      	mov	r0, r3
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	1894      	adds	r4, r2, r2
 80058a4:	623c      	str	r4, [r7, #32]
 80058a6:	415b      	adcs	r3, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ae:	1812      	adds	r2, r2, r0
 80058b0:	eb41 0303 	adc.w	r3, r1, r3
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	f04f 0500 	mov.w	r5, #0
 80058bc:	00dd      	lsls	r5, r3, #3
 80058be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c2:	00d4      	lsls	r4, r2, #3
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	1814      	adds	r4, r2, r0
 80058ca:	653c      	str	r4, [r7, #80]	; 0x50
 80058cc:	414b      	adcs	r3, r1
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	61b9      	str	r1, [r7, #24]
 80058de:	415b      	adcs	r3, r3
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ea:	f7fb f9ed 	bl	8000cc8 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <UART_SetConfig+0x38c>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a67      	ldr	r2, [pc, #412]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f003 0207 	and.w	r2, r3, #7
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4432      	add	r2, r6
 8005918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800591a:	e0b9      	b.n	8005a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800591c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591e:	461c      	mov	r4, r3
 8005920:	f04f 0500 	mov.w	r5, #0
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	1891      	adds	r1, r2, r2
 800592a:	6139      	str	r1, [r7, #16]
 800592c:	415b      	adcs	r3, r3
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005934:	1912      	adds	r2, r2, r4
 8005936:	eb45 0303 	adc.w	r3, r5, r3
 800593a:	f04f 0000 	mov.w	r0, #0
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	00d9      	lsls	r1, r3, #3
 8005944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005948:	00d0      	lsls	r0, r2, #3
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	eb12 0804 	adds.w	r8, r2, r4
 8005952:	eb43 0905 	adc.w	r9, r3, r5
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800596e:	0082      	lsls	r2, r0, #2
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fb f9a8 	bl	8000cc8 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <UART_SetConfig+0x38c>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	011e      	lsls	r6, r3, #4
 8005986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005988:	4618      	mov	r0, r3
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	1894      	adds	r4, r2, r2
 8005994:	60bc      	str	r4, [r7, #8]
 8005996:	415b      	adcs	r3, r3
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599e:	1812      	adds	r2, r2, r0
 80059a0:	eb41 0303 	adc.w	r3, r1, r3
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	f04f 0500 	mov.w	r5, #0
 80059ac:	00dd      	lsls	r5, r3, #3
 80059ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b2:	00d4      	lsls	r4, r2, #3
 80059b4:	4622      	mov	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	1814      	adds	r4, r2, r0
 80059ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80059bc:	414b      	adcs	r3, r1
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	008b      	lsls	r3, r1, #2
 80059d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059d8:	0082      	lsls	r2, r0, #2
 80059da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059de:	f7fb f973 	bl	8000cc8 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <UART_SetConfig+0x38c>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <UART_SetConfig+0x38c>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a06:	441e      	add	r6, r3
 8005a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	1894      	adds	r4, r2, r2
 8005a16:	603c      	str	r4, [r7, #0]
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a20:	1812      	adds	r2, r2, r0
 8005a22:	eb41 0303 	adc.w	r3, r1, r3
 8005a26:	f04f 0400 	mov.w	r4, #0
 8005a2a:	f04f 0500 	mov.w	r5, #0
 8005a2e:	00dd      	lsls	r5, r3, #3
 8005a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a34:	00d4      	lsls	r4, r2, #3
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8005a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a5a:	0082      	lsls	r2, r0, #2
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4659      	mov	r1, fp
 8005a60:	f7fb f932 	bl	8000cc8 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4432      	add	r2, r6
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	377c      	adds	r7, #124	; 0x7c
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <__errno>:
 8005aa8:	4b01      	ldr	r3, [pc, #4]	; (8005ab0 <__errno+0x8>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	2000001c 	.word	0x2000001c

08005ab4 <__libc_init_array>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	4d0d      	ldr	r5, [pc, #52]	; (8005aec <__libc_init_array+0x38>)
 8005ab8:	4c0d      	ldr	r4, [pc, #52]	; (8005af0 <__libc_init_array+0x3c>)
 8005aba:	1b64      	subs	r4, r4, r5
 8005abc:	10a4      	asrs	r4, r4, #2
 8005abe:	2600      	movs	r6, #0
 8005ac0:	42a6      	cmp	r6, r4
 8005ac2:	d109      	bne.n	8005ad8 <__libc_init_array+0x24>
 8005ac4:	4d0b      	ldr	r5, [pc, #44]	; (8005af4 <__libc_init_array+0x40>)
 8005ac6:	4c0c      	ldr	r4, [pc, #48]	; (8005af8 <__libc_init_array+0x44>)
 8005ac8:	f003 fa18 	bl	8008efc <_init>
 8005acc:	1b64      	subs	r4, r4, r5
 8005ace:	10a4      	asrs	r4, r4, #2
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	42a6      	cmp	r6, r4
 8005ad4:	d105      	bne.n	8005ae2 <__libc_init_array+0x2e>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005adc:	4798      	blx	r3
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__libc_init_array+0xc>
 8005ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae6:	4798      	blx	r3
 8005ae8:	3601      	adds	r6, #1
 8005aea:	e7f2      	b.n	8005ad2 <__libc_init_array+0x1e>
 8005aec:	080093f8 	.word	0x080093f8
 8005af0:	080093f8 	.word	0x080093f8
 8005af4:	080093f8 	.word	0x080093f8
 8005af8:	080093fc 	.word	0x080093fc

08005afc <memcpy>:
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	4770      	bx	lr
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d1f9      	bne.n	8005b0a <memcpy+0xe>
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <memset>:
 8005b18:	4402      	add	r2, r0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d100      	bne.n	8005b22 <memset+0xa>
 8005b20:	4770      	bx	lr
 8005b22:	f803 1b01 	strb.w	r1, [r3], #1
 8005b26:	e7f9      	b.n	8005b1c <memset+0x4>

08005b28 <__cvt>:
 8005b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	ec55 4b10 	vmov	r4, r5, d0
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	460e      	mov	r6, r1
 8005b34:	4619      	mov	r1, r3
 8005b36:	462b      	mov	r3, r5
 8005b38:	bfbb      	ittet	lt
 8005b3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b3e:	461d      	movlt	r5, r3
 8005b40:	2300      	movge	r3, #0
 8005b42:	232d      	movlt	r3, #45	; 0x2d
 8005b44:	700b      	strb	r3, [r1, #0]
 8005b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b4c:	4691      	mov	r9, r2
 8005b4e:	f023 0820 	bic.w	r8, r3, #32
 8005b52:	bfbc      	itt	lt
 8005b54:	4622      	movlt	r2, r4
 8005b56:	4614      	movlt	r4, r2
 8005b58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b5c:	d005      	beq.n	8005b6a <__cvt+0x42>
 8005b5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b62:	d100      	bne.n	8005b66 <__cvt+0x3e>
 8005b64:	3601      	adds	r6, #1
 8005b66:	2102      	movs	r1, #2
 8005b68:	e000      	b.n	8005b6c <__cvt+0x44>
 8005b6a:	2103      	movs	r1, #3
 8005b6c:	ab03      	add	r3, sp, #12
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	ab02      	add	r3, sp, #8
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	ec45 4b10 	vmov	d0, r4, r5
 8005b78:	4653      	mov	r3, sl
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	f000 fcec 	bl	8006558 <_dtoa_r>
 8005b80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b84:	4607      	mov	r7, r0
 8005b86:	d102      	bne.n	8005b8e <__cvt+0x66>
 8005b88:	f019 0f01 	tst.w	r9, #1
 8005b8c:	d022      	beq.n	8005bd4 <__cvt+0xac>
 8005b8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b92:	eb07 0906 	add.w	r9, r7, r6
 8005b96:	d110      	bne.n	8005bba <__cvt+0x92>
 8005b98:	783b      	ldrb	r3, [r7, #0]
 8005b9a:	2b30      	cmp	r3, #48	; 0x30
 8005b9c:	d10a      	bne.n	8005bb4 <__cvt+0x8c>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7fa ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 8005baa:	b918      	cbnz	r0, 8005bb4 <__cvt+0x8c>
 8005bac:	f1c6 0601 	rsb	r6, r6, #1
 8005bb0:	f8ca 6000 	str.w	r6, [sl]
 8005bb4:	f8da 3000 	ldr.w	r3, [sl]
 8005bb8:	4499      	add	r9, r3
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8005bc6:	b108      	cbz	r0, 8005bcc <__cvt+0xa4>
 8005bc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bcc:	2230      	movs	r2, #48	; 0x30
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	454b      	cmp	r3, r9
 8005bd2:	d307      	bcc.n	8005be4 <__cvt+0xbc>
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bd8:	1bdb      	subs	r3, r3, r7
 8005bda:	4638      	mov	r0, r7
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	b004      	add	sp, #16
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	9103      	str	r1, [sp, #12]
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e7f0      	b.n	8005bce <__cvt+0xa6>

08005bec <__exponent>:
 8005bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	bfb8      	it	lt
 8005bf4:	4249      	neglt	r1, r1
 8005bf6:	f803 2b02 	strb.w	r2, [r3], #2
 8005bfa:	bfb4      	ite	lt
 8005bfc:	222d      	movlt	r2, #45	; 0x2d
 8005bfe:	222b      	movge	r2, #43	; 0x2b
 8005c00:	2909      	cmp	r1, #9
 8005c02:	7042      	strb	r2, [r0, #1]
 8005c04:	dd2a      	ble.n	8005c5c <__exponent+0x70>
 8005c06:	f10d 0407 	add.w	r4, sp, #7
 8005c0a:	46a4      	mov	ip, r4
 8005c0c:	270a      	movs	r7, #10
 8005c0e:	46a6      	mov	lr, r4
 8005c10:	460a      	mov	r2, r1
 8005c12:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c16:	fb07 1516 	mls	r5, r7, r6, r1
 8005c1a:	3530      	adds	r5, #48	; 0x30
 8005c1c:	2a63      	cmp	r2, #99	; 0x63
 8005c1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c26:	4631      	mov	r1, r6
 8005c28:	dcf1      	bgt.n	8005c0e <__exponent+0x22>
 8005c2a:	3130      	adds	r1, #48	; 0x30
 8005c2c:	f1ae 0502 	sub.w	r5, lr, #2
 8005c30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c34:	1c44      	adds	r4, r0, #1
 8005c36:	4629      	mov	r1, r5
 8005c38:	4561      	cmp	r1, ip
 8005c3a:	d30a      	bcc.n	8005c52 <__exponent+0x66>
 8005c3c:	f10d 0209 	add.w	r2, sp, #9
 8005c40:	eba2 020e 	sub.w	r2, r2, lr
 8005c44:	4565      	cmp	r5, ip
 8005c46:	bf88      	it	hi
 8005c48:	2200      	movhi	r2, #0
 8005c4a:	4413      	add	r3, r2
 8005c4c:	1a18      	subs	r0, r3, r0
 8005c4e:	b003      	add	sp, #12
 8005c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c5a:	e7ed      	b.n	8005c38 <__exponent+0x4c>
 8005c5c:	2330      	movs	r3, #48	; 0x30
 8005c5e:	3130      	adds	r1, #48	; 0x30
 8005c60:	7083      	strb	r3, [r0, #2]
 8005c62:	70c1      	strb	r1, [r0, #3]
 8005c64:	1d03      	adds	r3, r0, #4
 8005c66:	e7f1      	b.n	8005c4c <__exponent+0x60>

08005c68 <_printf_float>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	ed2d 8b02 	vpush	{d8}
 8005c70:	b08d      	sub	sp, #52	; 0x34
 8005c72:	460c      	mov	r4, r1
 8005c74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c78:	4616      	mov	r6, r2
 8005c7a:	461f      	mov	r7, r3
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	f001 fa57 	bl	8007130 <_localeconv_r>
 8005c82:	f8d0 a000 	ldr.w	sl, [r0]
 8005c86:	4650      	mov	r0, sl
 8005c88:	f7fa fac2 	bl	8000210 <strlen>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	f8d8 3000 	ldr.w	r3, [r8]
 8005c98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c9c:	3307      	adds	r3, #7
 8005c9e:	f023 0307 	bic.w	r3, r3, #7
 8005ca2:	f103 0208 	add.w	r2, r3, #8
 8005ca6:	f8c8 2000 	str.w	r2, [r8]
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cba:	9307      	str	r3, [sp, #28]
 8005cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cc0:	ee08 0a10 	vmov	s16, r0
 8005cc4:	4b9f      	ldr	r3, [pc, #636]	; (8005f44 <_printf_float+0x2dc>)
 8005cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	f7fa ff4d 	bl	8000b6c <__aeabi_dcmpun>
 8005cd2:	bb88      	cbnz	r0, 8005d38 <_printf_float+0xd0>
 8005cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd8:	4b9a      	ldr	r3, [pc, #616]	; (8005f44 <_printf_float+0x2dc>)
 8005cda:	f04f 32ff 	mov.w	r2, #4294967295
 8005cde:	f7fa ff27 	bl	8000b30 <__aeabi_dcmple>
 8005ce2:	bb48      	cbnz	r0, 8005d38 <_printf_float+0xd0>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4640      	mov	r0, r8
 8005cea:	4649      	mov	r1, r9
 8005cec:	f7fa ff16 	bl	8000b1c <__aeabi_dcmplt>
 8005cf0:	b110      	cbz	r0, 8005cf8 <_printf_float+0x90>
 8005cf2:	232d      	movs	r3, #45	; 0x2d
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	4b93      	ldr	r3, [pc, #588]	; (8005f48 <_printf_float+0x2e0>)
 8005cfa:	4894      	ldr	r0, [pc, #592]	; (8005f4c <_printf_float+0x2e4>)
 8005cfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d00:	bf94      	ite	ls
 8005d02:	4698      	movls	r8, r3
 8005d04:	4680      	movhi	r8, r0
 8005d06:	2303      	movs	r3, #3
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	9b05      	ldr	r3, [sp, #20]
 8005d0c:	f023 0204 	bic.w	r2, r3, #4
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	9700      	str	r7, [sp, #0]
 8005d18:	4633      	mov	r3, r6
 8005d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f9d8 	bl	80060d4 <_printf_common>
 8005d24:	3001      	adds	r0, #1
 8005d26:	f040 8090 	bne.w	8005e4a <_printf_float+0x1e2>
 8005d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2e:	b00d      	add	sp, #52	; 0x34
 8005d30:	ecbd 8b02 	vpop	{d8}
 8005d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	f7fa ff14 	bl	8000b6c <__aeabi_dcmpun>
 8005d44:	b140      	cbz	r0, 8005d58 <_printf_float+0xf0>
 8005d46:	464b      	mov	r3, r9
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfbc      	itt	lt
 8005d4c:	232d      	movlt	r3, #45	; 0x2d
 8005d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d52:	487f      	ldr	r0, [pc, #508]	; (8005f50 <_printf_float+0x2e8>)
 8005d54:	4b7f      	ldr	r3, [pc, #508]	; (8005f54 <_printf_float+0x2ec>)
 8005d56:	e7d1      	b.n	8005cfc <_printf_float+0x94>
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d5e:	9206      	str	r2, [sp, #24]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	d13f      	bne.n	8005de4 <_printf_float+0x17c>
 8005d64:	2306      	movs	r3, #6
 8005d66:	6063      	str	r3, [r4, #4]
 8005d68:	9b05      	ldr	r3, [sp, #20]
 8005d6a:	6861      	ldr	r1, [r4, #4]
 8005d6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d70:	2300      	movs	r3, #0
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	ab0a      	add	r3, sp, #40	; 0x28
 8005d76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d7a:	ab09      	add	r3, sp, #36	; 0x24
 8005d7c:	ec49 8b10 	vmov	d0, r8, r9
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	6022      	str	r2, [r4, #0]
 8005d84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7ff fecd 	bl	8005b28 <__cvt>
 8005d8e:	9b06      	ldr	r3, [sp, #24]
 8005d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d92:	2b47      	cmp	r3, #71	; 0x47
 8005d94:	4680      	mov	r8, r0
 8005d96:	d108      	bne.n	8005daa <_printf_float+0x142>
 8005d98:	1cc8      	adds	r0, r1, #3
 8005d9a:	db02      	blt.n	8005da2 <_printf_float+0x13a>
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	dd41      	ble.n	8005e26 <_printf_float+0x1be>
 8005da2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005da6:	fa5f fb8b 	uxtb.w	fp, fp
 8005daa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dae:	d820      	bhi.n	8005df2 <_printf_float+0x18a>
 8005db0:	3901      	subs	r1, #1
 8005db2:	465a      	mov	r2, fp
 8005db4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005db8:	9109      	str	r1, [sp, #36]	; 0x24
 8005dba:	f7ff ff17 	bl	8005bec <__exponent>
 8005dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dc0:	1813      	adds	r3, r2, r0
 8005dc2:	2a01      	cmp	r2, #1
 8005dc4:	4681      	mov	r9, r0
 8005dc6:	6123      	str	r3, [r4, #16]
 8005dc8:	dc02      	bgt.n	8005dd0 <_printf_float+0x168>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	07d2      	lsls	r2, r2, #31
 8005dce:	d501      	bpl.n	8005dd4 <_printf_float+0x16c>
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d09c      	beq.n	8005d16 <_printf_float+0xae>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de2:	e798      	b.n	8005d16 <_printf_float+0xae>
 8005de4:	9a06      	ldr	r2, [sp, #24]
 8005de6:	2a47      	cmp	r2, #71	; 0x47
 8005de8:	d1be      	bne.n	8005d68 <_printf_float+0x100>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1bc      	bne.n	8005d68 <_printf_float+0x100>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e7b9      	b.n	8005d66 <_printf_float+0xfe>
 8005df2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005df6:	d118      	bne.n	8005e2a <_printf_float+0x1c2>
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	dd0b      	ble.n	8005e16 <_printf_float+0x1ae>
 8005dfe:	6121      	str	r1, [r4, #16]
 8005e00:	b913      	cbnz	r3, 8005e08 <_printf_float+0x1a0>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	07d0      	lsls	r0, r2, #31
 8005e06:	d502      	bpl.n	8005e0e <_printf_float+0x1a6>
 8005e08:	3301      	adds	r3, #1
 8005e0a:	440b      	add	r3, r1
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e10:	f04f 0900 	mov.w	r9, #0
 8005e14:	e7de      	b.n	8005dd4 <_printf_float+0x16c>
 8005e16:	b913      	cbnz	r3, 8005e1e <_printf_float+0x1b6>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	07d2      	lsls	r2, r2, #31
 8005e1c:	d501      	bpl.n	8005e22 <_printf_float+0x1ba>
 8005e1e:	3302      	adds	r3, #2
 8005e20:	e7f4      	b.n	8005e0c <_printf_float+0x1a4>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e7f2      	b.n	8005e0c <_printf_float+0x1a4>
 8005e26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	db05      	blt.n	8005e3c <_printf_float+0x1d4>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	6121      	str	r1, [r4, #16]
 8005e34:	07d8      	lsls	r0, r3, #31
 8005e36:	d5ea      	bpl.n	8005e0e <_printf_float+0x1a6>
 8005e38:	1c4b      	adds	r3, r1, #1
 8005e3a:	e7e7      	b.n	8005e0c <_printf_float+0x1a4>
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	bfd4      	ite	le
 8005e40:	f1c1 0202 	rsble	r2, r1, #2
 8005e44:	2201      	movgt	r2, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	e7e0      	b.n	8005e0c <_printf_float+0x1a4>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	055a      	lsls	r2, r3, #21
 8005e4e:	d407      	bmi.n	8005e60 <_printf_float+0x1f8>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	4642      	mov	r2, r8
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d12c      	bne.n	8005eb8 <_printf_float+0x250>
 8005e5e:	e764      	b.n	8005d2a <_printf_float+0xc2>
 8005e60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e64:	f240 80e0 	bls.w	8006028 <_printf_float+0x3c0>
 8005e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f7fa fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d034      	beq.n	8005ee2 <_printf_float+0x27a>
 8005e78:	4a37      	ldr	r2, [pc, #220]	; (8005f58 <_printf_float+0x2f0>)
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f af51 	beq.w	8005d2a <_printf_float+0xc2>
 8005e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	db02      	blt.n	8005e96 <_printf_float+0x22e>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	07d8      	lsls	r0, r3, #31
 8005e94:	d510      	bpl.n	8005eb8 <_printf_float+0x250>
 8005e96:	ee18 3a10 	vmov	r3, s16
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af41 	beq.w	8005d2a <_printf_float+0xc2>
 8005ea8:	f04f 0800 	mov.w	r8, #0
 8005eac:	f104 091a 	add.w	r9, r4, #26
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	4543      	cmp	r3, r8
 8005eb6:	dc09      	bgt.n	8005ecc <_printf_float+0x264>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	f100 8105 	bmi.w	80060ca <_printf_float+0x462>
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	bfb8      	it	lt
 8005ec8:	4618      	movlt	r0, r3
 8005eca:	e730      	b.n	8005d2e <_printf_float+0xc6>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	464a      	mov	r2, r9
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af27 	beq.w	8005d2a <_printf_float+0xc2>
 8005edc:	f108 0801 	add.w	r8, r8, #1
 8005ee0:	e7e6      	b.n	8005eb0 <_printf_float+0x248>
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc39      	bgt.n	8005f5c <_printf_float+0x2f4>
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <_printf_float+0x2f0>)
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af19 	beq.w	8005d2a <_printf_float+0xc2>
 8005ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d102      	bne.n	8005f06 <_printf_float+0x29e>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07d9      	lsls	r1, r3, #31
 8005f04:	d5d8      	bpl.n	8005eb8 <_printf_float+0x250>
 8005f06:	ee18 3a10 	vmov	r3, s16
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af09 	beq.w	8005d2a <_printf_float+0xc2>
 8005f18:	f04f 0900 	mov.w	r9, #0
 8005f1c:	f104 0a1a 	add.w	sl, r4, #26
 8005f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f22:	425b      	negs	r3, r3
 8005f24:	454b      	cmp	r3, r9
 8005f26:	dc01      	bgt.n	8005f2c <_printf_float+0x2c4>
 8005f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2a:	e792      	b.n	8005e52 <_printf_float+0x1ea>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4652      	mov	r2, sl
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f aef7 	beq.w	8005d2a <_printf_float+0xc2>
 8005f3c:	f109 0901 	add.w	r9, r9, #1
 8005f40:	e7ee      	b.n	8005f20 <_printf_float+0x2b8>
 8005f42:	bf00      	nop
 8005f44:	7fefffff 	.word	0x7fefffff
 8005f48:	08008fa0 	.word	0x08008fa0
 8005f4c:	08008fa4 	.word	0x08008fa4
 8005f50:	08008fac 	.word	0x08008fac
 8005f54:	08008fa8 	.word	0x08008fa8
 8005f58:	08008fb0 	.word	0x08008fb0
 8005f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f60:	429a      	cmp	r2, r3
 8005f62:	bfa8      	it	ge
 8005f64:	461a      	movge	r2, r3
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	4691      	mov	r9, r2
 8005f6a:	dc37      	bgt.n	8005fdc <_printf_float+0x374>
 8005f6c:	f04f 0b00 	mov.w	fp, #0
 8005f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f74:	f104 021a 	add.w	r2, r4, #26
 8005f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	eba3 0309 	sub.w	r3, r3, r9
 8005f80:	455b      	cmp	r3, fp
 8005f82:	dc33      	bgt.n	8005fec <_printf_float+0x384>
 8005f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	db3b      	blt.n	8006004 <_printf_float+0x39c>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	07da      	lsls	r2, r3, #31
 8005f90:	d438      	bmi.n	8006004 <_printf_float+0x39c>
 8005f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f94:	9b05      	ldr	r3, [sp, #20]
 8005f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	eba2 0901 	sub.w	r9, r2, r1
 8005f9e:	4599      	cmp	r9, r3
 8005fa0:	bfa8      	it	ge
 8005fa2:	4699      	movge	r9, r3
 8005fa4:	f1b9 0f00 	cmp.w	r9, #0
 8005fa8:	dc35      	bgt.n	8006016 <_printf_float+0x3ae>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb2:	f104 0a1a 	add.w	sl, r4, #26
 8005fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	eba3 0309 	sub.w	r3, r3, r9
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	f77f af79 	ble.w	8005eb8 <_printf_float+0x250>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f aeaa 	beq.w	8005d2a <_printf_float+0xc2>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e7ec      	b.n	8005fb6 <_printf_float+0x34e>
 8005fdc:	4613      	mov	r3, r2
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d1c0      	bne.n	8005f6c <_printf_float+0x304>
 8005fea:	e69e      	b.n	8005d2a <_printf_float+0xc2>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	9205      	str	r2, [sp, #20]
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f ae97 	beq.w	8005d2a <_printf_float+0xc2>
 8005ffc:	9a05      	ldr	r2, [sp, #20]
 8005ffe:	f10b 0b01 	add.w	fp, fp, #1
 8006002:	e7b9      	b.n	8005f78 <_printf_float+0x310>
 8006004:	ee18 3a10 	vmov	r3, s16
 8006008:	4652      	mov	r2, sl
 800600a:	4631      	mov	r1, r6
 800600c:	4628      	mov	r0, r5
 800600e:	47b8      	blx	r7
 8006010:	3001      	adds	r0, #1
 8006012:	d1be      	bne.n	8005f92 <_printf_float+0x32a>
 8006014:	e689      	b.n	8005d2a <_printf_float+0xc2>
 8006016:	9a05      	ldr	r2, [sp, #20]
 8006018:	464b      	mov	r3, r9
 800601a:	4442      	add	r2, r8
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	d1c1      	bne.n	8005faa <_printf_float+0x342>
 8006026:	e680      	b.n	8005d2a <_printf_float+0xc2>
 8006028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800602a:	2a01      	cmp	r2, #1
 800602c:	dc01      	bgt.n	8006032 <_printf_float+0x3ca>
 800602e:	07db      	lsls	r3, r3, #31
 8006030:	d538      	bpl.n	80060a4 <_printf_float+0x43c>
 8006032:	2301      	movs	r3, #1
 8006034:	4642      	mov	r2, r8
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f ae74 	beq.w	8005d2a <_printf_float+0xc2>
 8006042:	ee18 3a10 	vmov	r3, s16
 8006046:	4652      	mov	r2, sl
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	f43f ae6b 	beq.w	8005d2a <_printf_float+0xc2>
 8006054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006058:	2200      	movs	r2, #0
 800605a:	2300      	movs	r3, #0
 800605c:	f7fa fd54 	bl	8000b08 <__aeabi_dcmpeq>
 8006060:	b9d8      	cbnz	r0, 800609a <_printf_float+0x432>
 8006062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006064:	f108 0201 	add.w	r2, r8, #1
 8006068:	3b01      	subs	r3, #1
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	d10e      	bne.n	8006092 <_printf_float+0x42a>
 8006074:	e659      	b.n	8005d2a <_printf_float+0xc2>
 8006076:	2301      	movs	r3, #1
 8006078:	4652      	mov	r2, sl
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f ae52 	beq.w	8005d2a <_printf_float+0xc2>
 8006086:	f108 0801 	add.w	r8, r8, #1
 800608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608c:	3b01      	subs	r3, #1
 800608e:	4543      	cmp	r3, r8
 8006090:	dcf1      	bgt.n	8006076 <_printf_float+0x40e>
 8006092:	464b      	mov	r3, r9
 8006094:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006098:	e6dc      	b.n	8005e54 <_printf_float+0x1ec>
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	f104 0a1a 	add.w	sl, r4, #26
 80060a2:	e7f2      	b.n	800608a <_printf_float+0x422>
 80060a4:	2301      	movs	r3, #1
 80060a6:	4642      	mov	r2, r8
 80060a8:	e7df      	b.n	800606a <_printf_float+0x402>
 80060aa:	2301      	movs	r3, #1
 80060ac:	464a      	mov	r2, r9
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	f43f ae38 	beq.w	8005d2a <_printf_float+0xc2>
 80060ba:	f108 0801 	add.w	r8, r8, #1
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060c2:	1a5b      	subs	r3, r3, r1
 80060c4:	4543      	cmp	r3, r8
 80060c6:	dcf0      	bgt.n	80060aa <_printf_float+0x442>
 80060c8:	e6fa      	b.n	8005ec0 <_printf_float+0x258>
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	f104 0919 	add.w	r9, r4, #25
 80060d2:	e7f4      	b.n	80060be <_printf_float+0x456>

080060d4 <_printf_common>:
 80060d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	4616      	mov	r6, r2
 80060da:	4699      	mov	r9, r3
 80060dc:	688a      	ldr	r2, [r1, #8]
 80060de:	690b      	ldr	r3, [r1, #16]
 80060e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	bfb8      	it	lt
 80060e8:	4613      	movlt	r3, r2
 80060ea:	6033      	str	r3, [r6, #0]
 80060ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f0:	4607      	mov	r7, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	b10a      	cbz	r2, 80060fa <_printf_common+0x26>
 80060f6:	3301      	adds	r3, #1
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	0699      	lsls	r1, r3, #26
 80060fe:	bf42      	ittt	mi
 8006100:	6833      	ldrmi	r3, [r6, #0]
 8006102:	3302      	addmi	r3, #2
 8006104:	6033      	strmi	r3, [r6, #0]
 8006106:	6825      	ldr	r5, [r4, #0]
 8006108:	f015 0506 	ands.w	r5, r5, #6
 800610c:	d106      	bne.n	800611c <_printf_common+0x48>
 800610e:	f104 0a19 	add.w	sl, r4, #25
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	6832      	ldr	r2, [r6, #0]
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	42ab      	cmp	r3, r5
 800611a:	dc26      	bgt.n	800616a <_printf_common+0x96>
 800611c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006120:	1e13      	subs	r3, r2, #0
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	bf18      	it	ne
 8006126:	2301      	movne	r3, #1
 8006128:	0692      	lsls	r2, r2, #26
 800612a:	d42b      	bmi.n	8006184 <_printf_common+0xb0>
 800612c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006130:	4649      	mov	r1, r9
 8006132:	4638      	mov	r0, r7
 8006134:	47c0      	blx	r8
 8006136:	3001      	adds	r0, #1
 8006138:	d01e      	beq.n	8006178 <_printf_common+0xa4>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	68e5      	ldr	r5, [r4, #12]
 800613e:	6832      	ldr	r2, [r6, #0]
 8006140:	f003 0306 	and.w	r3, r3, #6
 8006144:	2b04      	cmp	r3, #4
 8006146:	bf08      	it	eq
 8006148:	1aad      	subeq	r5, r5, r2
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	6922      	ldr	r2, [r4, #16]
 800614e:	bf0c      	ite	eq
 8006150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006154:	2500      	movne	r5, #0
 8006156:	4293      	cmp	r3, r2
 8006158:	bfc4      	itt	gt
 800615a:	1a9b      	subgt	r3, r3, r2
 800615c:	18ed      	addgt	r5, r5, r3
 800615e:	2600      	movs	r6, #0
 8006160:	341a      	adds	r4, #26
 8006162:	42b5      	cmp	r5, r6
 8006164:	d11a      	bne.n	800619c <_printf_common+0xc8>
 8006166:	2000      	movs	r0, #0
 8006168:	e008      	b.n	800617c <_printf_common+0xa8>
 800616a:	2301      	movs	r3, #1
 800616c:	4652      	mov	r2, sl
 800616e:	4649      	mov	r1, r9
 8006170:	4638      	mov	r0, r7
 8006172:	47c0      	blx	r8
 8006174:	3001      	adds	r0, #1
 8006176:	d103      	bne.n	8006180 <_printf_common+0xac>
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006180:	3501      	adds	r5, #1
 8006182:	e7c6      	b.n	8006112 <_printf_common+0x3e>
 8006184:	18e1      	adds	r1, r4, r3
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	2030      	movs	r0, #48	; 0x30
 800618a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800618e:	4422      	add	r2, r4
 8006190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006198:	3302      	adds	r3, #2
 800619a:	e7c7      	b.n	800612c <_printf_common+0x58>
 800619c:	2301      	movs	r3, #1
 800619e:	4622      	mov	r2, r4
 80061a0:	4649      	mov	r1, r9
 80061a2:	4638      	mov	r0, r7
 80061a4:	47c0      	blx	r8
 80061a6:	3001      	adds	r0, #1
 80061a8:	d0e6      	beq.n	8006178 <_printf_common+0xa4>
 80061aa:	3601      	adds	r6, #1
 80061ac:	e7d9      	b.n	8006162 <_printf_common+0x8e>
	...

080061b0 <_printf_i>:
 80061b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	460c      	mov	r4, r1
 80061b6:	4691      	mov	r9, r2
 80061b8:	7e27      	ldrb	r7, [r4, #24]
 80061ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061bc:	2f78      	cmp	r7, #120	; 0x78
 80061be:	4680      	mov	r8, r0
 80061c0:	469a      	mov	sl, r3
 80061c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c6:	d807      	bhi.n	80061d8 <_printf_i+0x28>
 80061c8:	2f62      	cmp	r7, #98	; 0x62
 80061ca:	d80a      	bhi.n	80061e2 <_printf_i+0x32>
 80061cc:	2f00      	cmp	r7, #0
 80061ce:	f000 80d8 	beq.w	8006382 <_printf_i+0x1d2>
 80061d2:	2f58      	cmp	r7, #88	; 0x58
 80061d4:	f000 80a3 	beq.w	800631e <_printf_i+0x16e>
 80061d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061e0:	e03a      	b.n	8006258 <_printf_i+0xa8>
 80061e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061e6:	2b15      	cmp	r3, #21
 80061e8:	d8f6      	bhi.n	80061d8 <_printf_i+0x28>
 80061ea:	a001      	add	r0, pc, #4	; (adr r0, 80061f0 <_printf_i+0x40>)
 80061ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061f0:	08006249 	.word	0x08006249
 80061f4:	0800625d 	.word	0x0800625d
 80061f8:	080061d9 	.word	0x080061d9
 80061fc:	080061d9 	.word	0x080061d9
 8006200:	080061d9 	.word	0x080061d9
 8006204:	080061d9 	.word	0x080061d9
 8006208:	0800625d 	.word	0x0800625d
 800620c:	080061d9 	.word	0x080061d9
 8006210:	080061d9 	.word	0x080061d9
 8006214:	080061d9 	.word	0x080061d9
 8006218:	080061d9 	.word	0x080061d9
 800621c:	08006369 	.word	0x08006369
 8006220:	0800628d 	.word	0x0800628d
 8006224:	0800634b 	.word	0x0800634b
 8006228:	080061d9 	.word	0x080061d9
 800622c:	080061d9 	.word	0x080061d9
 8006230:	0800638b 	.word	0x0800638b
 8006234:	080061d9 	.word	0x080061d9
 8006238:	0800628d 	.word	0x0800628d
 800623c:	080061d9 	.word	0x080061d9
 8006240:	080061d9 	.word	0x080061d9
 8006244:	08006353 	.word	0x08006353
 8006248:	680b      	ldr	r3, [r1, #0]
 800624a:	1d1a      	adds	r2, r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	600a      	str	r2, [r1, #0]
 8006250:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006258:	2301      	movs	r3, #1
 800625a:	e0a3      	b.n	80063a4 <_printf_i+0x1f4>
 800625c:	6825      	ldr	r5, [r4, #0]
 800625e:	6808      	ldr	r0, [r1, #0]
 8006260:	062e      	lsls	r6, r5, #24
 8006262:	f100 0304 	add.w	r3, r0, #4
 8006266:	d50a      	bpl.n	800627e <_printf_i+0xce>
 8006268:	6805      	ldr	r5, [r0, #0]
 800626a:	600b      	str	r3, [r1, #0]
 800626c:	2d00      	cmp	r5, #0
 800626e:	da03      	bge.n	8006278 <_printf_i+0xc8>
 8006270:	232d      	movs	r3, #45	; 0x2d
 8006272:	426d      	negs	r5, r5
 8006274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006278:	485e      	ldr	r0, [pc, #376]	; (80063f4 <_printf_i+0x244>)
 800627a:	230a      	movs	r3, #10
 800627c:	e019      	b.n	80062b2 <_printf_i+0x102>
 800627e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006282:	6805      	ldr	r5, [r0, #0]
 8006284:	600b      	str	r3, [r1, #0]
 8006286:	bf18      	it	ne
 8006288:	b22d      	sxthne	r5, r5
 800628a:	e7ef      	b.n	800626c <_printf_i+0xbc>
 800628c:	680b      	ldr	r3, [r1, #0]
 800628e:	6825      	ldr	r5, [r4, #0]
 8006290:	1d18      	adds	r0, r3, #4
 8006292:	6008      	str	r0, [r1, #0]
 8006294:	0628      	lsls	r0, r5, #24
 8006296:	d501      	bpl.n	800629c <_printf_i+0xec>
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	e002      	b.n	80062a2 <_printf_i+0xf2>
 800629c:	0669      	lsls	r1, r5, #25
 800629e:	d5fb      	bpl.n	8006298 <_printf_i+0xe8>
 80062a0:	881d      	ldrh	r5, [r3, #0]
 80062a2:	4854      	ldr	r0, [pc, #336]	; (80063f4 <_printf_i+0x244>)
 80062a4:	2f6f      	cmp	r7, #111	; 0x6f
 80062a6:	bf0c      	ite	eq
 80062a8:	2308      	moveq	r3, #8
 80062aa:	230a      	movne	r3, #10
 80062ac:	2100      	movs	r1, #0
 80062ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062b2:	6866      	ldr	r6, [r4, #4]
 80062b4:	60a6      	str	r6, [r4, #8]
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	bfa2      	ittt	ge
 80062ba:	6821      	ldrge	r1, [r4, #0]
 80062bc:	f021 0104 	bicge.w	r1, r1, #4
 80062c0:	6021      	strge	r1, [r4, #0]
 80062c2:	b90d      	cbnz	r5, 80062c8 <_printf_i+0x118>
 80062c4:	2e00      	cmp	r6, #0
 80062c6:	d04d      	beq.n	8006364 <_printf_i+0x1b4>
 80062c8:	4616      	mov	r6, r2
 80062ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ce:	fb03 5711 	mls	r7, r3, r1, r5
 80062d2:	5dc7      	ldrb	r7, [r0, r7]
 80062d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062d8:	462f      	mov	r7, r5
 80062da:	42bb      	cmp	r3, r7
 80062dc:	460d      	mov	r5, r1
 80062de:	d9f4      	bls.n	80062ca <_printf_i+0x11a>
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d10b      	bne.n	80062fc <_printf_i+0x14c>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	07df      	lsls	r7, r3, #31
 80062e8:	d508      	bpl.n	80062fc <_printf_i+0x14c>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6861      	ldr	r1, [r4, #4]
 80062ee:	4299      	cmp	r1, r3
 80062f0:	bfde      	ittt	le
 80062f2:	2330      	movle	r3, #48	; 0x30
 80062f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062fc:	1b92      	subs	r2, r2, r6
 80062fe:	6122      	str	r2, [r4, #16]
 8006300:	f8cd a000 	str.w	sl, [sp]
 8006304:	464b      	mov	r3, r9
 8006306:	aa03      	add	r2, sp, #12
 8006308:	4621      	mov	r1, r4
 800630a:	4640      	mov	r0, r8
 800630c:	f7ff fee2 	bl	80060d4 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	d14c      	bne.n	80063ae <_printf_i+0x1fe>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b004      	add	sp, #16
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	4835      	ldr	r0, [pc, #212]	; (80063f4 <_printf_i+0x244>)
 8006320:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	680e      	ldr	r6, [r1, #0]
 8006328:	061f      	lsls	r7, r3, #24
 800632a:	f856 5b04 	ldr.w	r5, [r6], #4
 800632e:	600e      	str	r6, [r1, #0]
 8006330:	d514      	bpl.n	800635c <_printf_i+0x1ac>
 8006332:	07d9      	lsls	r1, r3, #31
 8006334:	bf44      	itt	mi
 8006336:	f043 0320 	orrmi.w	r3, r3, #32
 800633a:	6023      	strmi	r3, [r4, #0]
 800633c:	b91d      	cbnz	r5, 8006346 <_printf_i+0x196>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f023 0320 	bic.w	r3, r3, #32
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	2310      	movs	r3, #16
 8006348:	e7b0      	b.n	80062ac <_printf_i+0xfc>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f043 0320 	orr.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	2378      	movs	r3, #120	; 0x78
 8006354:	4828      	ldr	r0, [pc, #160]	; (80063f8 <_printf_i+0x248>)
 8006356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800635a:	e7e3      	b.n	8006324 <_printf_i+0x174>
 800635c:	065e      	lsls	r6, r3, #25
 800635e:	bf48      	it	mi
 8006360:	b2ad      	uxthmi	r5, r5
 8006362:	e7e6      	b.n	8006332 <_printf_i+0x182>
 8006364:	4616      	mov	r6, r2
 8006366:	e7bb      	b.n	80062e0 <_printf_i+0x130>
 8006368:	680b      	ldr	r3, [r1, #0]
 800636a:	6826      	ldr	r6, [r4, #0]
 800636c:	6960      	ldr	r0, [r4, #20]
 800636e:	1d1d      	adds	r5, r3, #4
 8006370:	600d      	str	r5, [r1, #0]
 8006372:	0635      	lsls	r5, r6, #24
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	d501      	bpl.n	800637c <_printf_i+0x1cc>
 8006378:	6018      	str	r0, [r3, #0]
 800637a:	e002      	b.n	8006382 <_printf_i+0x1d2>
 800637c:	0671      	lsls	r1, r6, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0x1c8>
 8006380:	8018      	strh	r0, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	4616      	mov	r6, r2
 8006388:	e7ba      	b.n	8006300 <_printf_i+0x150>
 800638a:	680b      	ldr	r3, [r1, #0]
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	600a      	str	r2, [r1, #0]
 8006390:	681e      	ldr	r6, [r3, #0]
 8006392:	6862      	ldr	r2, [r4, #4]
 8006394:	2100      	movs	r1, #0
 8006396:	4630      	mov	r0, r6
 8006398:	f7f9 ff42 	bl	8000220 <memchr>
 800639c:	b108      	cbz	r0, 80063a2 <_printf_i+0x1f2>
 800639e:	1b80      	subs	r0, r0, r6
 80063a0:	6060      	str	r0, [r4, #4]
 80063a2:	6863      	ldr	r3, [r4, #4]
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	2300      	movs	r3, #0
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ac:	e7a8      	b.n	8006300 <_printf_i+0x150>
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	4632      	mov	r2, r6
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	47d0      	blx	sl
 80063b8:	3001      	adds	r0, #1
 80063ba:	d0ab      	beq.n	8006314 <_printf_i+0x164>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	079b      	lsls	r3, r3, #30
 80063c0:	d413      	bmi.n	80063ea <_printf_i+0x23a>
 80063c2:	68e0      	ldr	r0, [r4, #12]
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	4298      	cmp	r0, r3
 80063c8:	bfb8      	it	lt
 80063ca:	4618      	movlt	r0, r3
 80063cc:	e7a4      	b.n	8006318 <_printf_i+0x168>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d09b      	beq.n	8006314 <_printf_i+0x164>
 80063dc:	3501      	adds	r5, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	9903      	ldr	r1, [sp, #12]
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dcf2      	bgt.n	80063ce <_printf_i+0x21e>
 80063e8:	e7eb      	b.n	80063c2 <_printf_i+0x212>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f104 0619 	add.w	r6, r4, #25
 80063f0:	e7f5      	b.n	80063de <_printf_i+0x22e>
 80063f2:	bf00      	nop
 80063f4:	08008fb2 	.word	0x08008fb2
 80063f8:	08008fc3 	.word	0x08008fc3

080063fc <siprintf>:
 80063fc:	b40e      	push	{r1, r2, r3}
 80063fe:	b500      	push	{lr}
 8006400:	b09c      	sub	sp, #112	; 0x70
 8006402:	ab1d      	add	r3, sp, #116	; 0x74
 8006404:	9002      	str	r0, [sp, #8]
 8006406:	9006      	str	r0, [sp, #24]
 8006408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800640c:	4809      	ldr	r0, [pc, #36]	; (8006434 <siprintf+0x38>)
 800640e:	9107      	str	r1, [sp, #28]
 8006410:	9104      	str	r1, [sp, #16]
 8006412:	4909      	ldr	r1, [pc, #36]	; (8006438 <siprintf+0x3c>)
 8006414:	f853 2b04 	ldr.w	r2, [r3], #4
 8006418:	9105      	str	r1, [sp, #20]
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	a902      	add	r1, sp, #8
 8006420:	f001 fb26 	bl	8007a70 <_svfiprintf_r>
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	b01c      	add	sp, #112	; 0x70
 800642c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006430:	b003      	add	sp, #12
 8006432:	4770      	bx	lr
 8006434:	2000001c 	.word	0x2000001c
 8006438:	ffff0208 	.word	0xffff0208

0800643c <quorem>:
 800643c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	6903      	ldr	r3, [r0, #16]
 8006442:	690c      	ldr	r4, [r1, #16]
 8006444:	42a3      	cmp	r3, r4
 8006446:	4607      	mov	r7, r0
 8006448:	f2c0 8081 	blt.w	800654e <quorem+0x112>
 800644c:	3c01      	subs	r4, #1
 800644e:	f101 0814 	add.w	r8, r1, #20
 8006452:	f100 0514 	add.w	r5, r0, #20
 8006456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006464:	3301      	adds	r3, #1
 8006466:	429a      	cmp	r2, r3
 8006468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800646c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006470:	fbb2 f6f3 	udiv	r6, r2, r3
 8006474:	d331      	bcc.n	80064da <quorem+0x9e>
 8006476:	f04f 0e00 	mov.w	lr, #0
 800647a:	4640      	mov	r0, r8
 800647c:	46ac      	mov	ip, r5
 800647e:	46f2      	mov	sl, lr
 8006480:	f850 2b04 	ldr.w	r2, [r0], #4
 8006484:	b293      	uxth	r3, r2
 8006486:	fb06 e303 	mla	r3, r6, r3, lr
 800648a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800648e:	b29b      	uxth	r3, r3
 8006490:	ebaa 0303 	sub.w	r3, sl, r3
 8006494:	0c12      	lsrs	r2, r2, #16
 8006496:	f8dc a000 	ldr.w	sl, [ip]
 800649a:	fb06 e202 	mla	r2, r6, r2, lr
 800649e:	fa13 f38a 	uxtah	r3, r3, sl
 80064a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064a6:	fa1f fa82 	uxth.w	sl, r2
 80064aa:	f8dc 2000 	ldr.w	r2, [ip]
 80064ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80064b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064bc:	4581      	cmp	r9, r0
 80064be:	f84c 3b04 	str.w	r3, [ip], #4
 80064c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064c6:	d2db      	bcs.n	8006480 <quorem+0x44>
 80064c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80064cc:	b92b      	cbnz	r3, 80064da <quorem+0x9e>
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	3b04      	subs	r3, #4
 80064d2:	429d      	cmp	r5, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	d32e      	bcc.n	8006536 <quorem+0xfa>
 80064d8:	613c      	str	r4, [r7, #16]
 80064da:	4638      	mov	r0, r7
 80064dc:	f001 f8b2 	bl	8007644 <__mcmp>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	db24      	blt.n	800652e <quorem+0xf2>
 80064e4:	3601      	adds	r6, #1
 80064e6:	4628      	mov	r0, r5
 80064e8:	f04f 0c00 	mov.w	ip, #0
 80064ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80064f0:	f8d0 e000 	ldr.w	lr, [r0]
 80064f4:	b293      	uxth	r3, r2
 80064f6:	ebac 0303 	sub.w	r3, ip, r3
 80064fa:	0c12      	lsrs	r2, r2, #16
 80064fc:	fa13 f38e 	uxtah	r3, r3, lr
 8006500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006508:	b29b      	uxth	r3, r3
 800650a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800650e:	45c1      	cmp	r9, r8
 8006510:	f840 3b04 	str.w	r3, [r0], #4
 8006514:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006518:	d2e8      	bcs.n	80064ec <quorem+0xb0>
 800651a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800651e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006522:	b922      	cbnz	r2, 800652e <quorem+0xf2>
 8006524:	3b04      	subs	r3, #4
 8006526:	429d      	cmp	r5, r3
 8006528:	461a      	mov	r2, r3
 800652a:	d30a      	bcc.n	8006542 <quorem+0x106>
 800652c:	613c      	str	r4, [r7, #16]
 800652e:	4630      	mov	r0, r6
 8006530:	b003      	add	sp, #12
 8006532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	3b04      	subs	r3, #4
 800653a:	2a00      	cmp	r2, #0
 800653c:	d1cc      	bne.n	80064d8 <quorem+0x9c>
 800653e:	3c01      	subs	r4, #1
 8006540:	e7c7      	b.n	80064d2 <quorem+0x96>
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	3b04      	subs	r3, #4
 8006546:	2a00      	cmp	r2, #0
 8006548:	d1f0      	bne.n	800652c <quorem+0xf0>
 800654a:	3c01      	subs	r4, #1
 800654c:	e7eb      	b.n	8006526 <quorem+0xea>
 800654e:	2000      	movs	r0, #0
 8006550:	e7ee      	b.n	8006530 <quorem+0xf4>
 8006552:	0000      	movs	r0, r0
 8006554:	0000      	movs	r0, r0
	...

08006558 <_dtoa_r>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	ed2d 8b02 	vpush	{d8}
 8006560:	ec57 6b10 	vmov	r6, r7, d0
 8006564:	b095      	sub	sp, #84	; 0x54
 8006566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800656c:	9105      	str	r1, [sp, #20]
 800656e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006572:	4604      	mov	r4, r0
 8006574:	9209      	str	r2, [sp, #36]	; 0x24
 8006576:	930f      	str	r3, [sp, #60]	; 0x3c
 8006578:	b975      	cbnz	r5, 8006598 <_dtoa_r+0x40>
 800657a:	2010      	movs	r0, #16
 800657c:	f000 fddc 	bl	8007138 <malloc>
 8006580:	4602      	mov	r2, r0
 8006582:	6260      	str	r0, [r4, #36]	; 0x24
 8006584:	b920      	cbnz	r0, 8006590 <_dtoa_r+0x38>
 8006586:	4bb2      	ldr	r3, [pc, #712]	; (8006850 <_dtoa_r+0x2f8>)
 8006588:	21ea      	movs	r1, #234	; 0xea
 800658a:	48b2      	ldr	r0, [pc, #712]	; (8006854 <_dtoa_r+0x2fc>)
 800658c:	f001 fb80 	bl	8007c90 <__assert_func>
 8006590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006594:	6005      	str	r5, [r0, #0]
 8006596:	60c5      	str	r5, [r0, #12]
 8006598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800659a:	6819      	ldr	r1, [r3, #0]
 800659c:	b151      	cbz	r1, 80065b4 <_dtoa_r+0x5c>
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	604a      	str	r2, [r1, #4]
 80065a2:	2301      	movs	r3, #1
 80065a4:	4093      	lsls	r3, r2
 80065a6:	608b      	str	r3, [r1, #8]
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fe0d 	bl	80071c8 <_Bfree>
 80065ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	1e3b      	subs	r3, r7, #0
 80065b6:	bfb9      	ittee	lt
 80065b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	9303      	strlt	r3, [sp, #12]
 80065be:	2300      	movge	r3, #0
 80065c0:	f8c8 3000 	strge.w	r3, [r8]
 80065c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80065c8:	4ba3      	ldr	r3, [pc, #652]	; (8006858 <_dtoa_r+0x300>)
 80065ca:	bfbc      	itt	lt
 80065cc:	2201      	movlt	r2, #1
 80065ce:	f8c8 2000 	strlt.w	r2, [r8]
 80065d2:	ea33 0309 	bics.w	r3, r3, r9
 80065d6:	d11b      	bne.n	8006610 <_dtoa_r+0xb8>
 80065d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065da:	f242 730f 	movw	r3, #9999	; 0x270f
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065e4:	4333      	orrs	r3, r6
 80065e6:	f000 857a 	beq.w	80070de <_dtoa_r+0xb86>
 80065ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ec:	b963      	cbnz	r3, 8006608 <_dtoa_r+0xb0>
 80065ee:	4b9b      	ldr	r3, [pc, #620]	; (800685c <_dtoa_r+0x304>)
 80065f0:	e024      	b.n	800663c <_dtoa_r+0xe4>
 80065f2:	4b9b      	ldr	r3, [pc, #620]	; (8006860 <_dtoa_r+0x308>)
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	9800      	ldr	r0, [sp, #0]
 80065fe:	b015      	add	sp, #84	; 0x54
 8006600:	ecbd 8b02 	vpop	{d8}
 8006604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006608:	4b94      	ldr	r3, [pc, #592]	; (800685c <_dtoa_r+0x304>)
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	3303      	adds	r3, #3
 800660e:	e7f3      	b.n	80065f8 <_dtoa_r+0xa0>
 8006610:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006614:	2200      	movs	r2, #0
 8006616:	ec51 0b17 	vmov	r0, r1, d7
 800661a:	2300      	movs	r3, #0
 800661c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006620:	f7fa fa72 	bl	8000b08 <__aeabi_dcmpeq>
 8006624:	4680      	mov	r8, r0
 8006626:	b158      	cbz	r0, 8006640 <_dtoa_r+0xe8>
 8006628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800662a:	2301      	movs	r3, #1
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8551 	beq.w	80070d8 <_dtoa_r+0xb80>
 8006636:	488b      	ldr	r0, [pc, #556]	; (8006864 <_dtoa_r+0x30c>)
 8006638:	6018      	str	r0, [r3, #0]
 800663a:	1e43      	subs	r3, r0, #1
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	e7dd      	b.n	80065fc <_dtoa_r+0xa4>
 8006640:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006644:	aa12      	add	r2, sp, #72	; 0x48
 8006646:	a913      	add	r1, sp, #76	; 0x4c
 8006648:	4620      	mov	r0, r4
 800664a:	f001 f89f 	bl	800778c <__d2b>
 800664e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006652:	4683      	mov	fp, r0
 8006654:	2d00      	cmp	r5, #0
 8006656:	d07c      	beq.n	8006752 <_dtoa_r+0x1fa>
 8006658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800665e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006662:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006666:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800666a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800666e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006672:	4b7d      	ldr	r3, [pc, #500]	; (8006868 <_dtoa_r+0x310>)
 8006674:	2200      	movs	r2, #0
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	f7f9 fe25 	bl	80002c8 <__aeabi_dsub>
 800667e:	a36e      	add	r3, pc, #440	; (adr r3, 8006838 <_dtoa_r+0x2e0>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7f9 ffd8 	bl	8000638 <__aeabi_dmul>
 8006688:	a36d      	add	r3, pc, #436	; (adr r3, 8006840 <_dtoa_r+0x2e8>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 fe1d 	bl	80002cc <__adddf3>
 8006692:	4606      	mov	r6, r0
 8006694:	4628      	mov	r0, r5
 8006696:	460f      	mov	r7, r1
 8006698:	f7f9 ff64 	bl	8000564 <__aeabi_i2d>
 800669c:	a36a      	add	r3, pc, #424	; (adr r3, 8006848 <_dtoa_r+0x2f0>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f7f9 ffc9 	bl	8000638 <__aeabi_dmul>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4630      	mov	r0, r6
 80066ac:	4639      	mov	r1, r7
 80066ae:	f7f9 fe0d 	bl	80002cc <__adddf3>
 80066b2:	4606      	mov	r6, r0
 80066b4:	460f      	mov	r7, r1
 80066b6:	f7fa fa6f 	bl	8000b98 <__aeabi_d2iz>
 80066ba:	2200      	movs	r2, #0
 80066bc:	4682      	mov	sl, r0
 80066be:	2300      	movs	r3, #0
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7fa fa2a 	bl	8000b1c <__aeabi_dcmplt>
 80066c8:	b148      	cbz	r0, 80066de <_dtoa_r+0x186>
 80066ca:	4650      	mov	r0, sl
 80066cc:	f7f9 ff4a 	bl	8000564 <__aeabi_i2d>
 80066d0:	4632      	mov	r2, r6
 80066d2:	463b      	mov	r3, r7
 80066d4:	f7fa fa18 	bl	8000b08 <__aeabi_dcmpeq>
 80066d8:	b908      	cbnz	r0, 80066de <_dtoa_r+0x186>
 80066da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066de:	f1ba 0f16 	cmp.w	sl, #22
 80066e2:	d854      	bhi.n	800678e <_dtoa_r+0x236>
 80066e4:	4b61      	ldr	r3, [pc, #388]	; (800686c <_dtoa_r+0x314>)
 80066e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066f2:	f7fa fa13 	bl	8000b1c <__aeabi_dcmplt>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d04b      	beq.n	8006792 <_dtoa_r+0x23a>
 80066fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066fe:	2300      	movs	r3, #0
 8006700:	930e      	str	r3, [sp, #56]	; 0x38
 8006702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006704:	1b5d      	subs	r5, r3, r5
 8006706:	1e6b      	subs	r3, r5, #1
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	bf43      	ittte	mi
 800670c:	2300      	movmi	r3, #0
 800670e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006712:	9304      	strmi	r3, [sp, #16]
 8006714:	f04f 0800 	movpl.w	r8, #0
 8006718:	f1ba 0f00 	cmp.w	sl, #0
 800671c:	db3b      	blt.n	8006796 <_dtoa_r+0x23e>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006724:	4453      	add	r3, sl
 8006726:	9304      	str	r3, [sp, #16]
 8006728:	2300      	movs	r3, #0
 800672a:	9306      	str	r3, [sp, #24]
 800672c:	9b05      	ldr	r3, [sp, #20]
 800672e:	2b09      	cmp	r3, #9
 8006730:	d869      	bhi.n	8006806 <_dtoa_r+0x2ae>
 8006732:	2b05      	cmp	r3, #5
 8006734:	bfc4      	itt	gt
 8006736:	3b04      	subgt	r3, #4
 8006738:	9305      	strgt	r3, [sp, #20]
 800673a:	9b05      	ldr	r3, [sp, #20]
 800673c:	f1a3 0302 	sub.w	r3, r3, #2
 8006740:	bfcc      	ite	gt
 8006742:	2500      	movgt	r5, #0
 8006744:	2501      	movle	r5, #1
 8006746:	2b03      	cmp	r3, #3
 8006748:	d869      	bhi.n	800681e <_dtoa_r+0x2c6>
 800674a:	e8df f003 	tbb	[pc, r3]
 800674e:	4e2c      	.short	0x4e2c
 8006750:	5a4c      	.short	0x5a4c
 8006752:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006756:	441d      	add	r5, r3
 8006758:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800675c:	2b20      	cmp	r3, #32
 800675e:	bfc1      	itttt	gt
 8006760:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006764:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006768:	fa09 f303 	lslgt.w	r3, r9, r3
 800676c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006770:	bfda      	itte	le
 8006772:	f1c3 0320 	rsble	r3, r3, #32
 8006776:	fa06 f003 	lslle.w	r0, r6, r3
 800677a:	4318      	orrgt	r0, r3
 800677c:	f7f9 fee2 	bl	8000544 <__aeabi_ui2d>
 8006780:	2301      	movs	r3, #1
 8006782:	4606      	mov	r6, r0
 8006784:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006788:	3d01      	subs	r5, #1
 800678a:	9310      	str	r3, [sp, #64]	; 0x40
 800678c:	e771      	b.n	8006672 <_dtoa_r+0x11a>
 800678e:	2301      	movs	r3, #1
 8006790:	e7b6      	b.n	8006700 <_dtoa_r+0x1a8>
 8006792:	900e      	str	r0, [sp, #56]	; 0x38
 8006794:	e7b5      	b.n	8006702 <_dtoa_r+0x1aa>
 8006796:	f1ca 0300 	rsb	r3, sl, #0
 800679a:	9306      	str	r3, [sp, #24]
 800679c:	2300      	movs	r3, #0
 800679e:	eba8 080a 	sub.w	r8, r8, sl
 80067a2:	930d      	str	r3, [sp, #52]	; 0x34
 80067a4:	e7c2      	b.n	800672c <_dtoa_r+0x1d4>
 80067a6:	2300      	movs	r3, #0
 80067a8:	9308      	str	r3, [sp, #32]
 80067aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	dc39      	bgt.n	8006824 <_dtoa_r+0x2cc>
 80067b0:	f04f 0901 	mov.w	r9, #1
 80067b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80067b8:	464b      	mov	r3, r9
 80067ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067c0:	2200      	movs	r2, #0
 80067c2:	6042      	str	r2, [r0, #4]
 80067c4:	2204      	movs	r2, #4
 80067c6:	f102 0614 	add.w	r6, r2, #20
 80067ca:	429e      	cmp	r6, r3
 80067cc:	6841      	ldr	r1, [r0, #4]
 80067ce:	d92f      	bls.n	8006830 <_dtoa_r+0x2d8>
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fcb9 	bl	8007148 <_Balloc>
 80067d6:	9000      	str	r0, [sp, #0]
 80067d8:	2800      	cmp	r0, #0
 80067da:	d14b      	bne.n	8006874 <_dtoa_r+0x31c>
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <_dtoa_r+0x318>)
 80067de:	4602      	mov	r2, r0
 80067e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067e4:	e6d1      	b.n	800658a <_dtoa_r+0x32>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7de      	b.n	80067a8 <_dtoa_r+0x250>
 80067ea:	2300      	movs	r3, #0
 80067ec:	9308      	str	r3, [sp, #32]
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	eb0a 0903 	add.w	r9, sl, r3
 80067f4:	f109 0301 	add.w	r3, r9, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	bfb8      	it	lt
 80067fe:	2301      	movlt	r3, #1
 8006800:	e7dd      	b.n	80067be <_dtoa_r+0x266>
 8006802:	2301      	movs	r3, #1
 8006804:	e7f2      	b.n	80067ec <_dtoa_r+0x294>
 8006806:	2501      	movs	r5, #1
 8006808:	2300      	movs	r3, #0
 800680a:	9305      	str	r3, [sp, #20]
 800680c:	9508      	str	r5, [sp, #32]
 800680e:	f04f 39ff 	mov.w	r9, #4294967295
 8006812:	2200      	movs	r2, #0
 8006814:	f8cd 9004 	str.w	r9, [sp, #4]
 8006818:	2312      	movs	r3, #18
 800681a:	9209      	str	r2, [sp, #36]	; 0x24
 800681c:	e7cf      	b.n	80067be <_dtoa_r+0x266>
 800681e:	2301      	movs	r3, #1
 8006820:	9308      	str	r3, [sp, #32]
 8006822:	e7f4      	b.n	800680e <_dtoa_r+0x2b6>
 8006824:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006828:	f8cd 9004 	str.w	r9, [sp, #4]
 800682c:	464b      	mov	r3, r9
 800682e:	e7c6      	b.n	80067be <_dtoa_r+0x266>
 8006830:	3101      	adds	r1, #1
 8006832:	6041      	str	r1, [r0, #4]
 8006834:	0052      	lsls	r2, r2, #1
 8006836:	e7c6      	b.n	80067c6 <_dtoa_r+0x26e>
 8006838:	636f4361 	.word	0x636f4361
 800683c:	3fd287a7 	.word	0x3fd287a7
 8006840:	8b60c8b3 	.word	0x8b60c8b3
 8006844:	3fc68a28 	.word	0x3fc68a28
 8006848:	509f79fb 	.word	0x509f79fb
 800684c:	3fd34413 	.word	0x3fd34413
 8006850:	08008fe1 	.word	0x08008fe1
 8006854:	08008ff8 	.word	0x08008ff8
 8006858:	7ff00000 	.word	0x7ff00000
 800685c:	08008fdd 	.word	0x08008fdd
 8006860:	08008fd4 	.word	0x08008fd4
 8006864:	08008fb1 	.word	0x08008fb1
 8006868:	3ff80000 	.word	0x3ff80000
 800686c:	080090f0 	.word	0x080090f0
 8006870:	08009057 	.word	0x08009057
 8006874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006876:	9a00      	ldr	r2, [sp, #0]
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	2b0e      	cmp	r3, #14
 800687e:	f200 80ad 	bhi.w	80069dc <_dtoa_r+0x484>
 8006882:	2d00      	cmp	r5, #0
 8006884:	f000 80aa 	beq.w	80069dc <_dtoa_r+0x484>
 8006888:	f1ba 0f00 	cmp.w	sl, #0
 800688c:	dd36      	ble.n	80068fc <_dtoa_r+0x3a4>
 800688e:	4ac3      	ldr	r2, [pc, #780]	; (8006b9c <_dtoa_r+0x644>)
 8006890:	f00a 030f 	and.w	r3, sl, #15
 8006894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006898:	ed93 7b00 	vldr	d7, [r3]
 800689c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80068a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80068a4:	eeb0 8a47 	vmov.f32	s16, s14
 80068a8:	eef0 8a67 	vmov.f32	s17, s15
 80068ac:	d016      	beq.n	80068dc <_dtoa_r+0x384>
 80068ae:	4bbc      	ldr	r3, [pc, #752]	; (8006ba0 <_dtoa_r+0x648>)
 80068b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068b8:	f7f9 ffe8 	bl	800088c <__aeabi_ddiv>
 80068bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c0:	f007 070f 	and.w	r7, r7, #15
 80068c4:	2503      	movs	r5, #3
 80068c6:	4eb6      	ldr	r6, [pc, #728]	; (8006ba0 <_dtoa_r+0x648>)
 80068c8:	b957      	cbnz	r7, 80068e0 <_dtoa_r+0x388>
 80068ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ce:	ec53 2b18 	vmov	r2, r3, d8
 80068d2:	f7f9 ffdb 	bl	800088c <__aeabi_ddiv>
 80068d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068da:	e029      	b.n	8006930 <_dtoa_r+0x3d8>
 80068dc:	2502      	movs	r5, #2
 80068de:	e7f2      	b.n	80068c6 <_dtoa_r+0x36e>
 80068e0:	07f9      	lsls	r1, r7, #31
 80068e2:	d508      	bpl.n	80068f6 <_dtoa_r+0x39e>
 80068e4:	ec51 0b18 	vmov	r0, r1, d8
 80068e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068ec:	f7f9 fea4 	bl	8000638 <__aeabi_dmul>
 80068f0:	ec41 0b18 	vmov	d8, r0, r1
 80068f4:	3501      	adds	r5, #1
 80068f6:	107f      	asrs	r7, r7, #1
 80068f8:	3608      	adds	r6, #8
 80068fa:	e7e5      	b.n	80068c8 <_dtoa_r+0x370>
 80068fc:	f000 80a6 	beq.w	8006a4c <_dtoa_r+0x4f4>
 8006900:	f1ca 0600 	rsb	r6, sl, #0
 8006904:	4ba5      	ldr	r3, [pc, #660]	; (8006b9c <_dtoa_r+0x644>)
 8006906:	4fa6      	ldr	r7, [pc, #664]	; (8006ba0 <_dtoa_r+0x648>)
 8006908:	f006 020f 	and.w	r2, r6, #15
 800690c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006918:	f7f9 fe8e 	bl	8000638 <__aeabi_dmul>
 800691c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006920:	1136      	asrs	r6, r6, #4
 8006922:	2300      	movs	r3, #0
 8006924:	2502      	movs	r5, #2
 8006926:	2e00      	cmp	r6, #0
 8006928:	f040 8085 	bne.w	8006a36 <_dtoa_r+0x4de>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1d2      	bne.n	80068d6 <_dtoa_r+0x37e>
 8006930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 808c 	beq.w	8006a50 <_dtoa_r+0x4f8>
 8006938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800693c:	4b99      	ldr	r3, [pc, #612]	; (8006ba4 <_dtoa_r+0x64c>)
 800693e:	2200      	movs	r2, #0
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	f7fa f8ea 	bl	8000b1c <__aeabi_dcmplt>
 8006948:	2800      	cmp	r0, #0
 800694a:	f000 8081 	beq.w	8006a50 <_dtoa_r+0x4f8>
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d07d      	beq.n	8006a50 <_dtoa_r+0x4f8>
 8006954:	f1b9 0f00 	cmp.w	r9, #0
 8006958:	dd3c      	ble.n	80069d4 <_dtoa_r+0x47c>
 800695a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800695e:	9307      	str	r3, [sp, #28]
 8006960:	2200      	movs	r2, #0
 8006962:	4b91      	ldr	r3, [pc, #580]	; (8006ba8 <_dtoa_r+0x650>)
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7f9 fe66 	bl	8000638 <__aeabi_dmul>
 800696c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006970:	3501      	adds	r5, #1
 8006972:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800697a:	4628      	mov	r0, r5
 800697c:	f7f9 fdf2 	bl	8000564 <__aeabi_i2d>
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	f7f9 fe58 	bl	8000638 <__aeabi_dmul>
 8006988:	4b88      	ldr	r3, [pc, #544]	; (8006bac <_dtoa_r+0x654>)
 800698a:	2200      	movs	r2, #0
 800698c:	f7f9 fc9e 	bl	80002cc <__adddf3>
 8006990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006998:	9303      	str	r3, [sp, #12]
 800699a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	d15c      	bne.n	8006a5a <_dtoa_r+0x502>
 80069a0:	4b83      	ldr	r3, [pc, #524]	; (8006bb0 <_dtoa_r+0x658>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fc8e 	bl	80002c8 <__aeabi_dsub>
 80069ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b0:	4606      	mov	r6, r0
 80069b2:	460f      	mov	r7, r1
 80069b4:	f7fa f8d0 	bl	8000b58 <__aeabi_dcmpgt>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f040 8296 	bne.w	8006eea <_dtoa_r+0x992>
 80069be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069c2:	4630      	mov	r0, r6
 80069c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7fa f8a7 	bl	8000b1c <__aeabi_dcmplt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8288 	bne.w	8006ee4 <_dtoa_r+0x98c>
 80069d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f2c0 8158 	blt.w	8006c94 <_dtoa_r+0x73c>
 80069e4:	f1ba 0f0e 	cmp.w	sl, #14
 80069e8:	f300 8154 	bgt.w	8006c94 <_dtoa_r+0x73c>
 80069ec:	4b6b      	ldr	r3, [pc, #428]	; (8006b9c <_dtoa_r+0x644>)
 80069ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f280 80e3 	bge.w	8006bc4 <_dtoa_r+0x66c>
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f300 80df 	bgt.w	8006bc4 <_dtoa_r+0x66c>
 8006a06:	f040 826d 	bne.w	8006ee4 <_dtoa_r+0x98c>
 8006a0a:	4b69      	ldr	r3, [pc, #420]	; (8006bb0 <_dtoa_r+0x658>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7f9 fe11 	bl	8000638 <__aeabi_dmul>
 8006a16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a1a:	f7fa f893 	bl	8000b44 <__aeabi_dcmpge>
 8006a1e:	9e01      	ldr	r6, [sp, #4]
 8006a20:	4637      	mov	r7, r6
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f040 8243 	bne.w	8006eae <_dtoa_r+0x956>
 8006a28:	9d00      	ldr	r5, [sp, #0]
 8006a2a:	2331      	movs	r3, #49	; 0x31
 8006a2c:	f805 3b01 	strb.w	r3, [r5], #1
 8006a30:	f10a 0a01 	add.w	sl, sl, #1
 8006a34:	e23f      	b.n	8006eb6 <_dtoa_r+0x95e>
 8006a36:	07f2      	lsls	r2, r6, #31
 8006a38:	d505      	bpl.n	8006a46 <_dtoa_r+0x4ee>
 8006a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3e:	f7f9 fdfb 	bl	8000638 <__aeabi_dmul>
 8006a42:	3501      	adds	r5, #1
 8006a44:	2301      	movs	r3, #1
 8006a46:	1076      	asrs	r6, r6, #1
 8006a48:	3708      	adds	r7, #8
 8006a4a:	e76c      	b.n	8006926 <_dtoa_r+0x3ce>
 8006a4c:	2502      	movs	r5, #2
 8006a4e:	e76f      	b.n	8006930 <_dtoa_r+0x3d8>
 8006a50:	9b01      	ldr	r3, [sp, #4]
 8006a52:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a56:	930c      	str	r3, [sp, #48]	; 0x30
 8006a58:	e78d      	b.n	8006976 <_dtoa_r+0x41e>
 8006a5a:	9900      	ldr	r1, [sp, #0]
 8006a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a60:	4b4e      	ldr	r3, [pc, #312]	; (8006b9c <_dtoa_r+0x644>)
 8006a62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a66:	4401      	add	r1, r0
 8006a68:	9102      	str	r1, [sp, #8]
 8006a6a:	9908      	ldr	r1, [sp, #32]
 8006a6c:	eeb0 8a47 	vmov.f32	s16, s14
 8006a70:	eef0 8a67 	vmov.f32	s17, s15
 8006a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	d045      	beq.n	8006b0c <_dtoa_r+0x5b4>
 8006a80:	494c      	ldr	r1, [pc, #304]	; (8006bb4 <_dtoa_r+0x65c>)
 8006a82:	2000      	movs	r0, #0
 8006a84:	f7f9 ff02 	bl	800088c <__aeabi_ddiv>
 8006a88:	ec53 2b18 	vmov	r2, r3, d8
 8006a8c:	f7f9 fc1c 	bl	80002c8 <__aeabi_dsub>
 8006a90:	9d00      	ldr	r5, [sp, #0]
 8006a92:	ec41 0b18 	vmov	d8, r0, r1
 8006a96:	4639      	mov	r1, r7
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7fa f87d 	bl	8000b98 <__aeabi_d2iz>
 8006a9e:	900c      	str	r0, [sp, #48]	; 0x30
 8006aa0:	f7f9 fd60 	bl	8000564 <__aeabi_i2d>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	4639      	mov	r1, r7
 8006aac:	f7f9 fc0c 	bl	80002c8 <__aeabi_dsub>
 8006ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ab2:	3330      	adds	r3, #48	; 0x30
 8006ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ab8:	ec53 2b18 	vmov	r2, r3, d8
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	f7fa f82c 	bl	8000b1c <__aeabi_dcmplt>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d165      	bne.n	8006b94 <_dtoa_r+0x63c>
 8006ac8:	4632      	mov	r2, r6
 8006aca:	463b      	mov	r3, r7
 8006acc:	4935      	ldr	r1, [pc, #212]	; (8006ba4 <_dtoa_r+0x64c>)
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f7f9 fbfa 	bl	80002c8 <__aeabi_dsub>
 8006ad4:	ec53 2b18 	vmov	r2, r3, d8
 8006ad8:	f7fa f820 	bl	8000b1c <__aeabi_dcmplt>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f040 80b9 	bne.w	8006c54 <_dtoa_r+0x6fc>
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	429d      	cmp	r5, r3
 8006ae6:	f43f af75 	beq.w	80069d4 <_dtoa_r+0x47c>
 8006aea:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <_dtoa_r+0x650>)
 8006aec:	ec51 0b18 	vmov	r0, r1, d8
 8006af0:	2200      	movs	r2, #0
 8006af2:	f7f9 fda1 	bl	8000638 <__aeabi_dmul>
 8006af6:	4b2c      	ldr	r3, [pc, #176]	; (8006ba8 <_dtoa_r+0x650>)
 8006af8:	ec41 0b18 	vmov	d8, r0, r1
 8006afc:	2200      	movs	r2, #0
 8006afe:	4630      	mov	r0, r6
 8006b00:	4639      	mov	r1, r7
 8006b02:	f7f9 fd99 	bl	8000638 <__aeabi_dmul>
 8006b06:	4606      	mov	r6, r0
 8006b08:	460f      	mov	r7, r1
 8006b0a:	e7c4      	b.n	8006a96 <_dtoa_r+0x53e>
 8006b0c:	ec51 0b17 	vmov	r0, r1, d7
 8006b10:	f7f9 fd92 	bl	8000638 <__aeabi_dmul>
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	9d00      	ldr	r5, [sp, #0]
 8006b18:	930c      	str	r3, [sp, #48]	; 0x30
 8006b1a:	ec41 0b18 	vmov	d8, r0, r1
 8006b1e:	4639      	mov	r1, r7
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7fa f839 	bl	8000b98 <__aeabi_d2iz>
 8006b26:	9011      	str	r0, [sp, #68]	; 0x44
 8006b28:	f7f9 fd1c 	bl	8000564 <__aeabi_i2d>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fbc8 	bl	80002c8 <__aeabi_dsub>
 8006b38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b3a:	3330      	adds	r3, #48	; 0x30
 8006b3c:	f805 3b01 	strb.w	r3, [r5], #1
 8006b40:	9b02      	ldr	r3, [sp, #8]
 8006b42:	429d      	cmp	r5, r3
 8006b44:	4606      	mov	r6, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	d134      	bne.n	8006bb8 <_dtoa_r+0x660>
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <_dtoa_r+0x65c>)
 8006b50:	ec51 0b18 	vmov	r0, r1, d8
 8006b54:	f7f9 fbba 	bl	80002cc <__adddf3>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 fffa 	bl	8000b58 <__aeabi_dcmpgt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d175      	bne.n	8006c54 <_dtoa_r+0x6fc>
 8006b68:	ec53 2b18 	vmov	r2, r3, d8
 8006b6c:	4911      	ldr	r1, [pc, #68]	; (8006bb4 <_dtoa_r+0x65c>)
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f7f9 fbaa 	bl	80002c8 <__aeabi_dsub>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7f9 ffce 	bl	8000b1c <__aeabi_dcmplt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f43f af27 	beq.w	80069d4 <_dtoa_r+0x47c>
 8006b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b88:	1e6b      	subs	r3, r5, #1
 8006b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b90:	2b30      	cmp	r3, #48	; 0x30
 8006b92:	d0f8      	beq.n	8006b86 <_dtoa_r+0x62e>
 8006b94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b98:	e04a      	b.n	8006c30 <_dtoa_r+0x6d8>
 8006b9a:	bf00      	nop
 8006b9c:	080090f0 	.word	0x080090f0
 8006ba0:	080090c8 	.word	0x080090c8
 8006ba4:	3ff00000 	.word	0x3ff00000
 8006ba8:	40240000 	.word	0x40240000
 8006bac:	401c0000 	.word	0x401c0000
 8006bb0:	40140000 	.word	0x40140000
 8006bb4:	3fe00000 	.word	0x3fe00000
 8006bb8:	4baf      	ldr	r3, [pc, #700]	; (8006e78 <_dtoa_r+0x920>)
 8006bba:	f7f9 fd3d 	bl	8000638 <__aeabi_dmul>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	e7ac      	b.n	8006b1e <_dtoa_r+0x5c6>
 8006bc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bc8:	9d00      	ldr	r5, [sp, #0]
 8006bca:	4642      	mov	r2, r8
 8006bcc:	464b      	mov	r3, r9
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fe5b 	bl	800088c <__aeabi_ddiv>
 8006bd6:	f7f9 ffdf 	bl	8000b98 <__aeabi_d2iz>
 8006bda:	9002      	str	r0, [sp, #8]
 8006bdc:	f7f9 fcc2 	bl	8000564 <__aeabi_i2d>
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	f7f9 fd28 	bl	8000638 <__aeabi_dmul>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4630      	mov	r0, r6
 8006bee:	4639      	mov	r1, r7
 8006bf0:	f7f9 fb6a 	bl	80002c8 <__aeabi_dsub>
 8006bf4:	9e02      	ldr	r6, [sp, #8]
 8006bf6:	9f01      	ldr	r7, [sp, #4]
 8006bf8:	3630      	adds	r6, #48	; 0x30
 8006bfa:	f805 6b01 	strb.w	r6, [r5], #1
 8006bfe:	9e00      	ldr	r6, [sp, #0]
 8006c00:	1bae      	subs	r6, r5, r6
 8006c02:	42b7      	cmp	r7, r6
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	d137      	bne.n	8006c7a <_dtoa_r+0x722>
 8006c0a:	f7f9 fb5f 	bl	80002cc <__adddf3>
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	4606      	mov	r6, r0
 8006c14:	460f      	mov	r7, r1
 8006c16:	f7f9 ff9f 	bl	8000b58 <__aeabi_dcmpgt>
 8006c1a:	b9c8      	cbnz	r0, 8006c50 <_dtoa_r+0x6f8>
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f7f9 ff70 	bl	8000b08 <__aeabi_dcmpeq>
 8006c28:	b110      	cbz	r0, 8006c30 <_dtoa_r+0x6d8>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	d40f      	bmi.n	8006c50 <_dtoa_r+0x6f8>
 8006c30:	4620      	mov	r0, r4
 8006c32:	4659      	mov	r1, fp
 8006c34:	f000 fac8 	bl	80071c8 <_Bfree>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	702b      	strb	r3, [r5, #0]
 8006c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c3e:	f10a 0001 	add.w	r0, sl, #1
 8006c42:	6018      	str	r0, [r3, #0]
 8006c44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f43f acd8 	beq.w	80065fc <_dtoa_r+0xa4>
 8006c4c:	601d      	str	r5, [r3, #0]
 8006c4e:	e4d5      	b.n	80065fc <_dtoa_r+0xa4>
 8006c50:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c54:	462b      	mov	r3, r5
 8006c56:	461d      	mov	r5, r3
 8006c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5c:	2a39      	cmp	r2, #57	; 0x39
 8006c5e:	d108      	bne.n	8006c72 <_dtoa_r+0x71a>
 8006c60:	9a00      	ldr	r2, [sp, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d1f7      	bne.n	8006c56 <_dtoa_r+0x6fe>
 8006c66:	9a07      	ldr	r2, [sp, #28]
 8006c68:	9900      	ldr	r1, [sp, #0]
 8006c6a:	3201      	adds	r2, #1
 8006c6c:	9207      	str	r2, [sp, #28]
 8006c6e:	2230      	movs	r2, #48	; 0x30
 8006c70:	700a      	strb	r2, [r1, #0]
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	3201      	adds	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	e78c      	b.n	8006b94 <_dtoa_r+0x63c>
 8006c7a:	4b7f      	ldr	r3, [pc, #508]	; (8006e78 <_dtoa_r+0x920>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f7f9 fcdb 	bl	8000638 <__aeabi_dmul>
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	4606      	mov	r6, r0
 8006c88:	460f      	mov	r7, r1
 8006c8a:	f7f9 ff3d 	bl	8000b08 <__aeabi_dcmpeq>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d09b      	beq.n	8006bca <_dtoa_r+0x672>
 8006c92:	e7cd      	b.n	8006c30 <_dtoa_r+0x6d8>
 8006c94:	9a08      	ldr	r2, [sp, #32]
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	f000 80c4 	beq.w	8006e24 <_dtoa_r+0x8cc>
 8006c9c:	9a05      	ldr	r2, [sp, #20]
 8006c9e:	2a01      	cmp	r2, #1
 8006ca0:	f300 80a8 	bgt.w	8006df4 <_dtoa_r+0x89c>
 8006ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	f000 80a0 	beq.w	8006dec <_dtoa_r+0x894>
 8006cac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cb0:	9e06      	ldr	r6, [sp, #24]
 8006cb2:	4645      	mov	r5, r8
 8006cb4:	9a04      	ldr	r2, [sp, #16]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	441a      	add	r2, r3
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4498      	add	r8, r3
 8006cbe:	9204      	str	r2, [sp, #16]
 8006cc0:	f000 fb3e 	bl	8007340 <__i2b>
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	dd0b      	ble.n	8006ce2 <_dtoa_r+0x78a>
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd08      	ble.n	8006ce2 <_dtoa_r+0x78a>
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	9a04      	ldr	r2, [sp, #16]
 8006cd4:	bfa8      	it	ge
 8006cd6:	462b      	movge	r3, r5
 8006cd8:	eba8 0803 	sub.w	r8, r8, r3
 8006cdc:	1aed      	subs	r5, r5, r3
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	9b06      	ldr	r3, [sp, #24]
 8006ce4:	b1fb      	cbz	r3, 8006d26 <_dtoa_r+0x7ce>
 8006ce6:	9b08      	ldr	r3, [sp, #32]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 809f 	beq.w	8006e2c <_dtoa_r+0x8d4>
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	dd11      	ble.n	8006d16 <_dtoa_r+0x7be>
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 fbde 	bl	80074b8 <__pow5mult>
 8006cfc:	465a      	mov	r2, fp
 8006cfe:	4601      	mov	r1, r0
 8006d00:	4607      	mov	r7, r0
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fb32 	bl	800736c <__multiply>
 8006d08:	4659      	mov	r1, fp
 8006d0a:	9007      	str	r0, [sp, #28]
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fa5b 	bl	80071c8 <_Bfree>
 8006d12:	9b07      	ldr	r3, [sp, #28]
 8006d14:	469b      	mov	fp, r3
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	1b9a      	subs	r2, r3, r6
 8006d1a:	d004      	beq.n	8006d26 <_dtoa_r+0x7ce>
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fbca 	bl	80074b8 <__pow5mult>
 8006d24:	4683      	mov	fp, r0
 8006d26:	2101      	movs	r1, #1
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fb09 	bl	8007340 <__i2b>
 8006d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	dd7c      	ble.n	8006e30 <_dtoa_r+0x8d8>
 8006d36:	461a      	mov	r2, r3
 8006d38:	4601      	mov	r1, r0
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fbbc 	bl	80074b8 <__pow5mult>
 8006d40:	9b05      	ldr	r3, [sp, #20]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	4606      	mov	r6, r0
 8006d46:	dd76      	ble.n	8006e36 <_dtoa_r+0x8de>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9306      	str	r3, [sp, #24]
 8006d4c:	6933      	ldr	r3, [r6, #16]
 8006d4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d52:	6918      	ldr	r0, [r3, #16]
 8006d54:	f000 faa4 	bl	80072a0 <__hi0bits>
 8006d58:	f1c0 0020 	rsb	r0, r0, #32
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	4418      	add	r0, r3
 8006d60:	f010 001f 	ands.w	r0, r0, #31
 8006d64:	f000 8086 	beq.w	8006e74 <_dtoa_r+0x91c>
 8006d68:	f1c0 0320 	rsb	r3, r0, #32
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	dd7f      	ble.n	8006e70 <_dtoa_r+0x918>
 8006d70:	f1c0 001c 	rsb	r0, r0, #28
 8006d74:	9b04      	ldr	r3, [sp, #16]
 8006d76:	4403      	add	r3, r0
 8006d78:	4480      	add	r8, r0
 8006d7a:	4405      	add	r5, r0
 8006d7c:	9304      	str	r3, [sp, #16]
 8006d7e:	f1b8 0f00 	cmp.w	r8, #0
 8006d82:	dd05      	ble.n	8006d90 <_dtoa_r+0x838>
 8006d84:	4659      	mov	r1, fp
 8006d86:	4642      	mov	r2, r8
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fbef 	bl	800756c <__lshift>
 8006d8e:	4683      	mov	fp, r0
 8006d90:	9b04      	ldr	r3, [sp, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd05      	ble.n	8006da2 <_dtoa_r+0x84a>
 8006d96:	4631      	mov	r1, r6
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fbe6 	bl	800756c <__lshift>
 8006da0:	4606      	mov	r6, r0
 8006da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d069      	beq.n	8006e7c <_dtoa_r+0x924>
 8006da8:	4631      	mov	r1, r6
 8006daa:	4658      	mov	r0, fp
 8006dac:	f000 fc4a 	bl	8007644 <__mcmp>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	da63      	bge.n	8006e7c <_dtoa_r+0x924>
 8006db4:	2300      	movs	r3, #0
 8006db6:	4659      	mov	r1, fp
 8006db8:	220a      	movs	r2, #10
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fa26 	bl	800720c <__multadd>
 8006dc0:	9b08      	ldr	r3, [sp, #32]
 8006dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dc6:	4683      	mov	fp, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 818f 	beq.w	80070ec <_dtoa_r+0xb94>
 8006dce:	4639      	mov	r1, r7
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fa19 	bl	800720c <__multadd>
 8006dda:	f1b9 0f00 	cmp.w	r9, #0
 8006dde:	4607      	mov	r7, r0
 8006de0:	f300 808e 	bgt.w	8006f00 <_dtoa_r+0x9a8>
 8006de4:	9b05      	ldr	r3, [sp, #20]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	dc50      	bgt.n	8006e8c <_dtoa_r+0x934>
 8006dea:	e089      	b.n	8006f00 <_dtoa_r+0x9a8>
 8006dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006df2:	e75d      	b.n	8006cb0 <_dtoa_r+0x758>
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	1e5e      	subs	r6, r3, #1
 8006df8:	9b06      	ldr	r3, [sp, #24]
 8006dfa:	42b3      	cmp	r3, r6
 8006dfc:	bfbf      	itttt	lt
 8006dfe:	9b06      	ldrlt	r3, [sp, #24]
 8006e00:	9606      	strlt	r6, [sp, #24]
 8006e02:	1af2      	sublt	r2, r6, r3
 8006e04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006e06:	bfb6      	itet	lt
 8006e08:	189b      	addlt	r3, r3, r2
 8006e0a:	1b9e      	subge	r6, r3, r6
 8006e0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e0e:	9b01      	ldr	r3, [sp, #4]
 8006e10:	bfb8      	it	lt
 8006e12:	2600      	movlt	r6, #0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfb5      	itete	lt
 8006e18:	eba8 0503 	sublt.w	r5, r8, r3
 8006e1c:	9b01      	ldrge	r3, [sp, #4]
 8006e1e:	2300      	movlt	r3, #0
 8006e20:	4645      	movge	r5, r8
 8006e22:	e747      	b.n	8006cb4 <_dtoa_r+0x75c>
 8006e24:	9e06      	ldr	r6, [sp, #24]
 8006e26:	9f08      	ldr	r7, [sp, #32]
 8006e28:	4645      	mov	r5, r8
 8006e2a:	e74c      	b.n	8006cc6 <_dtoa_r+0x76e>
 8006e2c:	9a06      	ldr	r2, [sp, #24]
 8006e2e:	e775      	b.n	8006d1c <_dtoa_r+0x7c4>
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	dc18      	bgt.n	8006e68 <_dtoa_r+0x910>
 8006e36:	9b02      	ldr	r3, [sp, #8]
 8006e38:	b9b3      	cbnz	r3, 8006e68 <_dtoa_r+0x910>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e40:	b9a3      	cbnz	r3, 8006e6c <_dtoa_r+0x914>
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	0d1b      	lsrs	r3, r3, #20
 8006e4a:	051b      	lsls	r3, r3, #20
 8006e4c:	b12b      	cbz	r3, 8006e5a <_dtoa_r+0x902>
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	3301      	adds	r3, #1
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	f108 0801 	add.w	r8, r8, #1
 8006e58:	2301      	movs	r3, #1
 8006e5a:	9306      	str	r3, [sp, #24]
 8006e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f47f af74 	bne.w	8006d4c <_dtoa_r+0x7f4>
 8006e64:	2001      	movs	r0, #1
 8006e66:	e779      	b.n	8006d5c <_dtoa_r+0x804>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e7f6      	b.n	8006e5a <_dtoa_r+0x902>
 8006e6c:	9b02      	ldr	r3, [sp, #8]
 8006e6e:	e7f4      	b.n	8006e5a <_dtoa_r+0x902>
 8006e70:	d085      	beq.n	8006d7e <_dtoa_r+0x826>
 8006e72:	4618      	mov	r0, r3
 8006e74:	301c      	adds	r0, #28
 8006e76:	e77d      	b.n	8006d74 <_dtoa_r+0x81c>
 8006e78:	40240000 	.word	0x40240000
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc38      	bgt.n	8006ef4 <_dtoa_r+0x99c>
 8006e82:	9b05      	ldr	r3, [sp, #20]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	dd35      	ble.n	8006ef4 <_dtoa_r+0x99c>
 8006e88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e8c:	f1b9 0f00 	cmp.w	r9, #0
 8006e90:	d10d      	bne.n	8006eae <_dtoa_r+0x956>
 8006e92:	4631      	mov	r1, r6
 8006e94:	464b      	mov	r3, r9
 8006e96:	2205      	movs	r2, #5
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 f9b7 	bl	800720c <__multadd>
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	f000 fbce 	bl	8007644 <__mcmp>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f73f adbd 	bgt.w	8006a28 <_dtoa_r+0x4d0>
 8006eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb0:	9d00      	ldr	r5, [sp, #0]
 8006eb2:	ea6f 0a03 	mvn.w	sl, r3
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 f983 	bl	80071c8 <_Bfree>
 8006ec2:	2f00      	cmp	r7, #0
 8006ec4:	f43f aeb4 	beq.w	8006c30 <_dtoa_r+0x6d8>
 8006ec8:	f1b8 0f00 	cmp.w	r8, #0
 8006ecc:	d005      	beq.n	8006eda <_dtoa_r+0x982>
 8006ece:	45b8      	cmp	r8, r7
 8006ed0:	d003      	beq.n	8006eda <_dtoa_r+0x982>
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 f977 	bl	80071c8 <_Bfree>
 8006eda:	4639      	mov	r1, r7
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 f973 	bl	80071c8 <_Bfree>
 8006ee2:	e6a5      	b.n	8006c30 <_dtoa_r+0x6d8>
 8006ee4:	2600      	movs	r6, #0
 8006ee6:	4637      	mov	r7, r6
 8006ee8:	e7e1      	b.n	8006eae <_dtoa_r+0x956>
 8006eea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006eec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ef0:	4637      	mov	r7, r6
 8006ef2:	e599      	b.n	8006a28 <_dtoa_r+0x4d0>
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80fd 	beq.w	80070fa <_dtoa_r+0xba2>
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	dd05      	ble.n	8006f10 <_dtoa_r+0x9b8>
 8006f04:	4639      	mov	r1, r7
 8006f06:	462a      	mov	r2, r5
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fb2f 	bl	800756c <__lshift>
 8006f0e:	4607      	mov	r7, r0
 8006f10:	9b06      	ldr	r3, [sp, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d05c      	beq.n	8006fd0 <_dtoa_r+0xa78>
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 f915 	bl	8007148 <_Balloc>
 8006f1e:	4605      	mov	r5, r0
 8006f20:	b928      	cbnz	r0, 8006f2e <_dtoa_r+0x9d6>
 8006f22:	4b80      	ldr	r3, [pc, #512]	; (8007124 <_dtoa_r+0xbcc>)
 8006f24:	4602      	mov	r2, r0
 8006f26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f2a:	f7ff bb2e 	b.w	800658a <_dtoa_r+0x32>
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	3202      	adds	r2, #2
 8006f32:	0092      	lsls	r2, r2, #2
 8006f34:	f107 010c 	add.w	r1, r7, #12
 8006f38:	300c      	adds	r0, #12
 8006f3a:	f7fe fddf 	bl	8005afc <memcpy>
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4629      	mov	r1, r5
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fb12 	bl	800756c <__lshift>
 8006f48:	9b00      	ldr	r3, [sp, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	9b00      	ldr	r3, [sp, #0]
 8006f50:	444b      	add	r3, r9
 8006f52:	9307      	str	r3, [sp, #28]
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	46b8      	mov	r8, r7
 8006f5c:	9306      	str	r3, [sp, #24]
 8006f5e:	4607      	mov	r7, r0
 8006f60:	9b01      	ldr	r3, [sp, #4]
 8006f62:	4631      	mov	r1, r6
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4658      	mov	r0, fp
 8006f68:	9302      	str	r3, [sp, #8]
 8006f6a:	f7ff fa67 	bl	800643c <quorem>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	3330      	adds	r3, #48	; 0x30
 8006f72:	9004      	str	r0, [sp, #16]
 8006f74:	4641      	mov	r1, r8
 8006f76:	4658      	mov	r0, fp
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	f000 fb63 	bl	8007644 <__mcmp>
 8006f7e:	463a      	mov	r2, r7
 8006f80:	4681      	mov	r9, r0
 8006f82:	4631      	mov	r1, r6
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fb79 	bl	800767c <__mdiff>
 8006f8a:	68c2      	ldr	r2, [r0, #12]
 8006f8c:	9b08      	ldr	r3, [sp, #32]
 8006f8e:	4605      	mov	r5, r0
 8006f90:	bb02      	cbnz	r2, 8006fd4 <_dtoa_r+0xa7c>
 8006f92:	4601      	mov	r1, r0
 8006f94:	4658      	mov	r0, fp
 8006f96:	f000 fb55 	bl	8007644 <__mcmp>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006fa6:	f000 f90f 	bl	80071c8 <_Bfree>
 8006faa:	9b05      	ldr	r3, [sp, #20]
 8006fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fae:	9d01      	ldr	r5, [sp, #4]
 8006fb0:	ea43 0102 	orr.w	r1, r3, r2
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	9b08      	ldr	r3, [sp, #32]
 8006fba:	d10d      	bne.n	8006fd8 <_dtoa_r+0xa80>
 8006fbc:	2b39      	cmp	r3, #57	; 0x39
 8006fbe:	d029      	beq.n	8007014 <_dtoa_r+0xabc>
 8006fc0:	f1b9 0f00 	cmp.w	r9, #0
 8006fc4:	dd01      	ble.n	8006fca <_dtoa_r+0xa72>
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	3331      	adds	r3, #49	; 0x31
 8006fca:	9a02      	ldr	r2, [sp, #8]
 8006fcc:	7013      	strb	r3, [r2, #0]
 8006fce:	e774      	b.n	8006eba <_dtoa_r+0x962>
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	e7b9      	b.n	8006f48 <_dtoa_r+0x9f0>
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	e7e2      	b.n	8006f9e <_dtoa_r+0xa46>
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	db06      	blt.n	8006fec <_dtoa_r+0xa94>
 8006fde:	9905      	ldr	r1, [sp, #20]
 8006fe0:	ea41 0909 	orr.w	r9, r1, r9
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	ea59 0101 	orrs.w	r1, r9, r1
 8006fea:	d120      	bne.n	800702e <_dtoa_r+0xad6>
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	ddec      	ble.n	8006fca <_dtoa_r+0xa72>
 8006ff0:	4659      	mov	r1, fp
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	f000 fab8 	bl	800756c <__lshift>
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4683      	mov	fp, r0
 8007000:	f000 fb20 	bl	8007644 <__mcmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	dc02      	bgt.n	8007010 <_dtoa_r+0xab8>
 800700a:	d1de      	bne.n	8006fca <_dtoa_r+0xa72>
 800700c:	07da      	lsls	r2, r3, #31
 800700e:	d5dc      	bpl.n	8006fca <_dtoa_r+0xa72>
 8007010:	2b39      	cmp	r3, #57	; 0x39
 8007012:	d1d8      	bne.n	8006fc6 <_dtoa_r+0xa6e>
 8007014:	9a02      	ldr	r2, [sp, #8]
 8007016:	2339      	movs	r3, #57	; 0x39
 8007018:	7013      	strb	r3, [r2, #0]
 800701a:	462b      	mov	r3, r5
 800701c:	461d      	mov	r5, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007024:	2a39      	cmp	r2, #57	; 0x39
 8007026:	d050      	beq.n	80070ca <_dtoa_r+0xb72>
 8007028:	3201      	adds	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e745      	b.n	8006eba <_dtoa_r+0x962>
 800702e:	2a00      	cmp	r2, #0
 8007030:	dd03      	ble.n	800703a <_dtoa_r+0xae2>
 8007032:	2b39      	cmp	r3, #57	; 0x39
 8007034:	d0ee      	beq.n	8007014 <_dtoa_r+0xabc>
 8007036:	3301      	adds	r3, #1
 8007038:	e7c7      	b.n	8006fca <_dtoa_r+0xa72>
 800703a:	9a01      	ldr	r2, [sp, #4]
 800703c:	9907      	ldr	r1, [sp, #28]
 800703e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007042:	428a      	cmp	r2, r1
 8007044:	d02a      	beq.n	800709c <_dtoa_r+0xb44>
 8007046:	4659      	mov	r1, fp
 8007048:	2300      	movs	r3, #0
 800704a:	220a      	movs	r2, #10
 800704c:	4620      	mov	r0, r4
 800704e:	f000 f8dd 	bl	800720c <__multadd>
 8007052:	45b8      	cmp	r8, r7
 8007054:	4683      	mov	fp, r0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	f04f 020a 	mov.w	r2, #10
 800705e:	4641      	mov	r1, r8
 8007060:	4620      	mov	r0, r4
 8007062:	d107      	bne.n	8007074 <_dtoa_r+0xb1c>
 8007064:	f000 f8d2 	bl	800720c <__multadd>
 8007068:	4680      	mov	r8, r0
 800706a:	4607      	mov	r7, r0
 800706c:	9b01      	ldr	r3, [sp, #4]
 800706e:	3301      	adds	r3, #1
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	e775      	b.n	8006f60 <_dtoa_r+0xa08>
 8007074:	f000 f8ca 	bl	800720c <__multadd>
 8007078:	4639      	mov	r1, r7
 800707a:	4680      	mov	r8, r0
 800707c:	2300      	movs	r3, #0
 800707e:	220a      	movs	r2, #10
 8007080:	4620      	mov	r0, r4
 8007082:	f000 f8c3 	bl	800720c <__multadd>
 8007086:	4607      	mov	r7, r0
 8007088:	e7f0      	b.n	800706c <_dtoa_r+0xb14>
 800708a:	f1b9 0f00 	cmp.w	r9, #0
 800708e:	9a00      	ldr	r2, [sp, #0]
 8007090:	bfcc      	ite	gt
 8007092:	464d      	movgt	r5, r9
 8007094:	2501      	movle	r5, #1
 8007096:	4415      	add	r5, r2
 8007098:	f04f 0800 	mov.w	r8, #0
 800709c:	4659      	mov	r1, fp
 800709e:	2201      	movs	r2, #1
 80070a0:	4620      	mov	r0, r4
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	f000 fa62 	bl	800756c <__lshift>
 80070a8:	4631      	mov	r1, r6
 80070aa:	4683      	mov	fp, r0
 80070ac:	f000 faca 	bl	8007644 <__mcmp>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	dcb2      	bgt.n	800701a <_dtoa_r+0xac2>
 80070b4:	d102      	bne.n	80070bc <_dtoa_r+0xb64>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	07db      	lsls	r3, r3, #31
 80070ba:	d4ae      	bmi.n	800701a <_dtoa_r+0xac2>
 80070bc:	462b      	mov	r3, r5
 80070be:	461d      	mov	r5, r3
 80070c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070c4:	2a30      	cmp	r2, #48	; 0x30
 80070c6:	d0fa      	beq.n	80070be <_dtoa_r+0xb66>
 80070c8:	e6f7      	b.n	8006eba <_dtoa_r+0x962>
 80070ca:	9a00      	ldr	r2, [sp, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d1a5      	bne.n	800701c <_dtoa_r+0xac4>
 80070d0:	f10a 0a01 	add.w	sl, sl, #1
 80070d4:	2331      	movs	r3, #49	; 0x31
 80070d6:	e779      	b.n	8006fcc <_dtoa_r+0xa74>
 80070d8:	4b13      	ldr	r3, [pc, #76]	; (8007128 <_dtoa_r+0xbd0>)
 80070da:	f7ff baaf 	b.w	800663c <_dtoa_r+0xe4>
 80070de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f aa86 	bne.w	80065f2 <_dtoa_r+0x9a>
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <_dtoa_r+0xbd4>)
 80070e8:	f7ff baa8 	b.w	800663c <_dtoa_r+0xe4>
 80070ec:	f1b9 0f00 	cmp.w	r9, #0
 80070f0:	dc03      	bgt.n	80070fa <_dtoa_r+0xba2>
 80070f2:	9b05      	ldr	r3, [sp, #20]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f73f aec9 	bgt.w	8006e8c <_dtoa_r+0x934>
 80070fa:	9d00      	ldr	r5, [sp, #0]
 80070fc:	4631      	mov	r1, r6
 80070fe:	4658      	mov	r0, fp
 8007100:	f7ff f99c 	bl	800643c <quorem>
 8007104:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007108:	f805 3b01 	strb.w	r3, [r5], #1
 800710c:	9a00      	ldr	r2, [sp, #0]
 800710e:	1aaa      	subs	r2, r5, r2
 8007110:	4591      	cmp	r9, r2
 8007112:	ddba      	ble.n	800708a <_dtoa_r+0xb32>
 8007114:	4659      	mov	r1, fp
 8007116:	2300      	movs	r3, #0
 8007118:	220a      	movs	r2, #10
 800711a:	4620      	mov	r0, r4
 800711c:	f000 f876 	bl	800720c <__multadd>
 8007120:	4683      	mov	fp, r0
 8007122:	e7eb      	b.n	80070fc <_dtoa_r+0xba4>
 8007124:	08009057 	.word	0x08009057
 8007128:	08008fb0 	.word	0x08008fb0
 800712c:	08008fd4 	.word	0x08008fd4

08007130 <_localeconv_r>:
 8007130:	4800      	ldr	r0, [pc, #0]	; (8007134 <_localeconv_r+0x4>)
 8007132:	4770      	bx	lr
 8007134:	20000170 	.word	0x20000170

08007138 <malloc>:
 8007138:	4b02      	ldr	r3, [pc, #8]	; (8007144 <malloc+0xc>)
 800713a:	4601      	mov	r1, r0
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	f000 bbe1 	b.w	8007904 <_malloc_r>
 8007142:	bf00      	nop
 8007144:	2000001c 	.word	0x2000001c

08007148 <_Balloc>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	b976      	cbnz	r6, 8007170 <_Balloc+0x28>
 8007152:	2010      	movs	r0, #16
 8007154:	f7ff fff0 	bl	8007138 <malloc>
 8007158:	4602      	mov	r2, r0
 800715a:	6260      	str	r0, [r4, #36]	; 0x24
 800715c:	b920      	cbnz	r0, 8007168 <_Balloc+0x20>
 800715e:	4b18      	ldr	r3, [pc, #96]	; (80071c0 <_Balloc+0x78>)
 8007160:	4818      	ldr	r0, [pc, #96]	; (80071c4 <_Balloc+0x7c>)
 8007162:	2166      	movs	r1, #102	; 0x66
 8007164:	f000 fd94 	bl	8007c90 <__assert_func>
 8007168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800716c:	6006      	str	r6, [r0, #0]
 800716e:	60c6      	str	r6, [r0, #12]
 8007170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007172:	68f3      	ldr	r3, [r6, #12]
 8007174:	b183      	cbz	r3, 8007198 <_Balloc+0x50>
 8007176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800717e:	b9b8      	cbnz	r0, 80071b0 <_Balloc+0x68>
 8007180:	2101      	movs	r1, #1
 8007182:	fa01 f605 	lsl.w	r6, r1, r5
 8007186:	1d72      	adds	r2, r6, #5
 8007188:	0092      	lsls	r2, r2, #2
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fb5a 	bl	8007844 <_calloc_r>
 8007190:	b160      	cbz	r0, 80071ac <_Balloc+0x64>
 8007192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007196:	e00e      	b.n	80071b6 <_Balloc+0x6e>
 8007198:	2221      	movs	r2, #33	; 0x21
 800719a:	2104      	movs	r1, #4
 800719c:	4620      	mov	r0, r4
 800719e:	f000 fb51 	bl	8007844 <_calloc_r>
 80071a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a4:	60f0      	str	r0, [r6, #12]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e4      	bne.n	8007176 <_Balloc+0x2e>
 80071ac:	2000      	movs	r0, #0
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	6802      	ldr	r2, [r0, #0]
 80071b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071b6:	2300      	movs	r3, #0
 80071b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071bc:	e7f7      	b.n	80071ae <_Balloc+0x66>
 80071be:	bf00      	nop
 80071c0:	08008fe1 	.word	0x08008fe1
 80071c4:	08009068 	.word	0x08009068

080071c8 <_Bfree>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071cc:	4605      	mov	r5, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	b976      	cbnz	r6, 80071f0 <_Bfree+0x28>
 80071d2:	2010      	movs	r0, #16
 80071d4:	f7ff ffb0 	bl	8007138 <malloc>
 80071d8:	4602      	mov	r2, r0
 80071da:	6268      	str	r0, [r5, #36]	; 0x24
 80071dc:	b920      	cbnz	r0, 80071e8 <_Bfree+0x20>
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <_Bfree+0x3c>)
 80071e0:	4809      	ldr	r0, [pc, #36]	; (8007208 <_Bfree+0x40>)
 80071e2:	218a      	movs	r1, #138	; 0x8a
 80071e4:	f000 fd54 	bl	8007c90 <__assert_func>
 80071e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071ec:	6006      	str	r6, [r0, #0]
 80071ee:	60c6      	str	r6, [r0, #12]
 80071f0:	b13c      	cbz	r4, 8007202 <_Bfree+0x3a>
 80071f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071f4:	6862      	ldr	r2, [r4, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071fc:	6021      	str	r1, [r4, #0]
 80071fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	08008fe1 	.word	0x08008fe1
 8007208:	08009068 	.word	0x08009068

0800720c <__multadd>:
 800720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007210:	690e      	ldr	r6, [r1, #16]
 8007212:	4607      	mov	r7, r0
 8007214:	4698      	mov	r8, r3
 8007216:	460c      	mov	r4, r1
 8007218:	f101 0014 	add.w	r0, r1, #20
 800721c:	2300      	movs	r3, #0
 800721e:	6805      	ldr	r5, [r0, #0]
 8007220:	b2a9      	uxth	r1, r5
 8007222:	fb02 8101 	mla	r1, r2, r1, r8
 8007226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800722a:	0c2d      	lsrs	r5, r5, #16
 800722c:	fb02 c505 	mla	r5, r2, r5, ip
 8007230:	b289      	uxth	r1, r1
 8007232:	3301      	adds	r3, #1
 8007234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007238:	429e      	cmp	r6, r3
 800723a:	f840 1b04 	str.w	r1, [r0], #4
 800723e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007242:	dcec      	bgt.n	800721e <__multadd+0x12>
 8007244:	f1b8 0f00 	cmp.w	r8, #0
 8007248:	d022      	beq.n	8007290 <__multadd+0x84>
 800724a:	68a3      	ldr	r3, [r4, #8]
 800724c:	42b3      	cmp	r3, r6
 800724e:	dc19      	bgt.n	8007284 <__multadd+0x78>
 8007250:	6861      	ldr	r1, [r4, #4]
 8007252:	4638      	mov	r0, r7
 8007254:	3101      	adds	r1, #1
 8007256:	f7ff ff77 	bl	8007148 <_Balloc>
 800725a:	4605      	mov	r5, r0
 800725c:	b928      	cbnz	r0, 800726a <__multadd+0x5e>
 800725e:	4602      	mov	r2, r0
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <__multadd+0x8c>)
 8007262:	480e      	ldr	r0, [pc, #56]	; (800729c <__multadd+0x90>)
 8007264:	21b5      	movs	r1, #181	; 0xb5
 8007266:	f000 fd13 	bl	8007c90 <__assert_func>
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	3202      	adds	r2, #2
 800726e:	f104 010c 	add.w	r1, r4, #12
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	300c      	adds	r0, #12
 8007276:	f7fe fc41 	bl	8005afc <memcpy>
 800727a:	4621      	mov	r1, r4
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ffa3 	bl	80071c8 <_Bfree>
 8007282:	462c      	mov	r4, r5
 8007284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007288:	3601      	adds	r6, #1
 800728a:	f8c3 8014 	str.w	r8, [r3, #20]
 800728e:	6126      	str	r6, [r4, #16]
 8007290:	4620      	mov	r0, r4
 8007292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007296:	bf00      	nop
 8007298:	08009057 	.word	0x08009057
 800729c:	08009068 	.word	0x08009068

080072a0 <__hi0bits>:
 80072a0:	0c03      	lsrs	r3, r0, #16
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	b9d3      	cbnz	r3, 80072dc <__hi0bits+0x3c>
 80072a6:	0400      	lsls	r0, r0, #16
 80072a8:	2310      	movs	r3, #16
 80072aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ae:	bf04      	itt	eq
 80072b0:	0200      	lsleq	r0, r0, #8
 80072b2:	3308      	addeq	r3, #8
 80072b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072b8:	bf04      	itt	eq
 80072ba:	0100      	lsleq	r0, r0, #4
 80072bc:	3304      	addeq	r3, #4
 80072be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80072c2:	bf04      	itt	eq
 80072c4:	0080      	lsleq	r0, r0, #2
 80072c6:	3302      	addeq	r3, #2
 80072c8:	2800      	cmp	r0, #0
 80072ca:	db05      	blt.n	80072d8 <__hi0bits+0x38>
 80072cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80072d0:	f103 0301 	add.w	r3, r3, #1
 80072d4:	bf08      	it	eq
 80072d6:	2320      	moveq	r3, #32
 80072d8:	4618      	mov	r0, r3
 80072da:	4770      	bx	lr
 80072dc:	2300      	movs	r3, #0
 80072de:	e7e4      	b.n	80072aa <__hi0bits+0xa>

080072e0 <__lo0bits>:
 80072e0:	6803      	ldr	r3, [r0, #0]
 80072e2:	f013 0207 	ands.w	r2, r3, #7
 80072e6:	4601      	mov	r1, r0
 80072e8:	d00b      	beq.n	8007302 <__lo0bits+0x22>
 80072ea:	07da      	lsls	r2, r3, #31
 80072ec:	d424      	bmi.n	8007338 <__lo0bits+0x58>
 80072ee:	0798      	lsls	r0, r3, #30
 80072f0:	bf49      	itett	mi
 80072f2:	085b      	lsrmi	r3, r3, #1
 80072f4:	089b      	lsrpl	r3, r3, #2
 80072f6:	2001      	movmi	r0, #1
 80072f8:	600b      	strmi	r3, [r1, #0]
 80072fa:	bf5c      	itt	pl
 80072fc:	600b      	strpl	r3, [r1, #0]
 80072fe:	2002      	movpl	r0, #2
 8007300:	4770      	bx	lr
 8007302:	b298      	uxth	r0, r3
 8007304:	b9b0      	cbnz	r0, 8007334 <__lo0bits+0x54>
 8007306:	0c1b      	lsrs	r3, r3, #16
 8007308:	2010      	movs	r0, #16
 800730a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800730e:	bf04      	itt	eq
 8007310:	0a1b      	lsreq	r3, r3, #8
 8007312:	3008      	addeq	r0, #8
 8007314:	071a      	lsls	r2, r3, #28
 8007316:	bf04      	itt	eq
 8007318:	091b      	lsreq	r3, r3, #4
 800731a:	3004      	addeq	r0, #4
 800731c:	079a      	lsls	r2, r3, #30
 800731e:	bf04      	itt	eq
 8007320:	089b      	lsreq	r3, r3, #2
 8007322:	3002      	addeq	r0, #2
 8007324:	07da      	lsls	r2, r3, #31
 8007326:	d403      	bmi.n	8007330 <__lo0bits+0x50>
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	f100 0001 	add.w	r0, r0, #1
 800732e:	d005      	beq.n	800733c <__lo0bits+0x5c>
 8007330:	600b      	str	r3, [r1, #0]
 8007332:	4770      	bx	lr
 8007334:	4610      	mov	r0, r2
 8007336:	e7e8      	b.n	800730a <__lo0bits+0x2a>
 8007338:	2000      	movs	r0, #0
 800733a:	4770      	bx	lr
 800733c:	2020      	movs	r0, #32
 800733e:	4770      	bx	lr

08007340 <__i2b>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	2101      	movs	r1, #1
 8007346:	f7ff feff 	bl	8007148 <_Balloc>
 800734a:	4602      	mov	r2, r0
 800734c:	b928      	cbnz	r0, 800735a <__i2b+0x1a>
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <__i2b+0x24>)
 8007350:	4805      	ldr	r0, [pc, #20]	; (8007368 <__i2b+0x28>)
 8007352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007356:	f000 fc9b 	bl	8007c90 <__assert_func>
 800735a:	2301      	movs	r3, #1
 800735c:	6144      	str	r4, [r0, #20]
 800735e:	6103      	str	r3, [r0, #16]
 8007360:	bd10      	pop	{r4, pc}
 8007362:	bf00      	nop
 8007364:	08009057 	.word	0x08009057
 8007368:	08009068 	.word	0x08009068

0800736c <__multiply>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	4614      	mov	r4, r2
 8007372:	690a      	ldr	r2, [r1, #16]
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	429a      	cmp	r2, r3
 8007378:	bfb8      	it	lt
 800737a:	460b      	movlt	r3, r1
 800737c:	460d      	mov	r5, r1
 800737e:	bfbc      	itt	lt
 8007380:	4625      	movlt	r5, r4
 8007382:	461c      	movlt	r4, r3
 8007384:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007388:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800738c:	68ab      	ldr	r3, [r5, #8]
 800738e:	6869      	ldr	r1, [r5, #4]
 8007390:	eb0a 0709 	add.w	r7, sl, r9
 8007394:	42bb      	cmp	r3, r7
 8007396:	b085      	sub	sp, #20
 8007398:	bfb8      	it	lt
 800739a:	3101      	addlt	r1, #1
 800739c:	f7ff fed4 	bl	8007148 <_Balloc>
 80073a0:	b930      	cbnz	r0, 80073b0 <__multiply+0x44>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4b42      	ldr	r3, [pc, #264]	; (80074b0 <__multiply+0x144>)
 80073a6:	4843      	ldr	r0, [pc, #268]	; (80074b4 <__multiply+0x148>)
 80073a8:	f240 115d 	movw	r1, #349	; 0x15d
 80073ac:	f000 fc70 	bl	8007c90 <__assert_func>
 80073b0:	f100 0614 	add.w	r6, r0, #20
 80073b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073b8:	4633      	mov	r3, r6
 80073ba:	2200      	movs	r2, #0
 80073bc:	4543      	cmp	r3, r8
 80073be:	d31e      	bcc.n	80073fe <__multiply+0x92>
 80073c0:	f105 0c14 	add.w	ip, r5, #20
 80073c4:	f104 0314 	add.w	r3, r4, #20
 80073c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80073cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80073d0:	9202      	str	r2, [sp, #8]
 80073d2:	ebac 0205 	sub.w	r2, ip, r5
 80073d6:	3a15      	subs	r2, #21
 80073d8:	f022 0203 	bic.w	r2, r2, #3
 80073dc:	3204      	adds	r2, #4
 80073de:	f105 0115 	add.w	r1, r5, #21
 80073e2:	458c      	cmp	ip, r1
 80073e4:	bf38      	it	cc
 80073e6:	2204      	movcc	r2, #4
 80073e8:	9201      	str	r2, [sp, #4]
 80073ea:	9a02      	ldr	r2, [sp, #8]
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d808      	bhi.n	8007404 <__multiply+0x98>
 80073f2:	2f00      	cmp	r7, #0
 80073f4:	dc55      	bgt.n	80074a2 <__multiply+0x136>
 80073f6:	6107      	str	r7, [r0, #16]
 80073f8:	b005      	add	sp, #20
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	f843 2b04 	str.w	r2, [r3], #4
 8007402:	e7db      	b.n	80073bc <__multiply+0x50>
 8007404:	f8b3 a000 	ldrh.w	sl, [r3]
 8007408:	f1ba 0f00 	cmp.w	sl, #0
 800740c:	d020      	beq.n	8007450 <__multiply+0xe4>
 800740e:	f105 0e14 	add.w	lr, r5, #20
 8007412:	46b1      	mov	r9, r6
 8007414:	2200      	movs	r2, #0
 8007416:	f85e 4b04 	ldr.w	r4, [lr], #4
 800741a:	f8d9 b000 	ldr.w	fp, [r9]
 800741e:	b2a1      	uxth	r1, r4
 8007420:	fa1f fb8b 	uxth.w	fp, fp
 8007424:	fb0a b101 	mla	r1, sl, r1, fp
 8007428:	4411      	add	r1, r2
 800742a:	f8d9 2000 	ldr.w	r2, [r9]
 800742e:	0c24      	lsrs	r4, r4, #16
 8007430:	0c12      	lsrs	r2, r2, #16
 8007432:	fb0a 2404 	mla	r4, sl, r4, r2
 8007436:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800743a:	b289      	uxth	r1, r1
 800743c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007440:	45f4      	cmp	ip, lr
 8007442:	f849 1b04 	str.w	r1, [r9], #4
 8007446:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800744a:	d8e4      	bhi.n	8007416 <__multiply+0xaa>
 800744c:	9901      	ldr	r1, [sp, #4]
 800744e:	5072      	str	r2, [r6, r1]
 8007450:	9a03      	ldr	r2, [sp, #12]
 8007452:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007456:	3304      	adds	r3, #4
 8007458:	f1b9 0f00 	cmp.w	r9, #0
 800745c:	d01f      	beq.n	800749e <__multiply+0x132>
 800745e:	6834      	ldr	r4, [r6, #0]
 8007460:	f105 0114 	add.w	r1, r5, #20
 8007464:	46b6      	mov	lr, r6
 8007466:	f04f 0a00 	mov.w	sl, #0
 800746a:	880a      	ldrh	r2, [r1, #0]
 800746c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007470:	fb09 b202 	mla	r2, r9, r2, fp
 8007474:	4492      	add	sl, r2
 8007476:	b2a4      	uxth	r4, r4
 8007478:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800747c:	f84e 4b04 	str.w	r4, [lr], #4
 8007480:	f851 4b04 	ldr.w	r4, [r1], #4
 8007484:	f8be 2000 	ldrh.w	r2, [lr]
 8007488:	0c24      	lsrs	r4, r4, #16
 800748a:	fb09 2404 	mla	r4, r9, r4, r2
 800748e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007492:	458c      	cmp	ip, r1
 8007494:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007498:	d8e7      	bhi.n	800746a <__multiply+0xfe>
 800749a:	9a01      	ldr	r2, [sp, #4]
 800749c:	50b4      	str	r4, [r6, r2]
 800749e:	3604      	adds	r6, #4
 80074a0:	e7a3      	b.n	80073ea <__multiply+0x7e>
 80074a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1a5      	bne.n	80073f6 <__multiply+0x8a>
 80074aa:	3f01      	subs	r7, #1
 80074ac:	e7a1      	b.n	80073f2 <__multiply+0x86>
 80074ae:	bf00      	nop
 80074b0:	08009057 	.word	0x08009057
 80074b4:	08009068 	.word	0x08009068

080074b8 <__pow5mult>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4615      	mov	r5, r2
 80074be:	f012 0203 	ands.w	r2, r2, #3
 80074c2:	4606      	mov	r6, r0
 80074c4:	460f      	mov	r7, r1
 80074c6:	d007      	beq.n	80074d8 <__pow5mult+0x20>
 80074c8:	4c25      	ldr	r4, [pc, #148]	; (8007560 <__pow5mult+0xa8>)
 80074ca:	3a01      	subs	r2, #1
 80074cc:	2300      	movs	r3, #0
 80074ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074d2:	f7ff fe9b 	bl	800720c <__multadd>
 80074d6:	4607      	mov	r7, r0
 80074d8:	10ad      	asrs	r5, r5, #2
 80074da:	d03d      	beq.n	8007558 <__pow5mult+0xa0>
 80074dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074de:	b97c      	cbnz	r4, 8007500 <__pow5mult+0x48>
 80074e0:	2010      	movs	r0, #16
 80074e2:	f7ff fe29 	bl	8007138 <malloc>
 80074e6:	4602      	mov	r2, r0
 80074e8:	6270      	str	r0, [r6, #36]	; 0x24
 80074ea:	b928      	cbnz	r0, 80074f8 <__pow5mult+0x40>
 80074ec:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <__pow5mult+0xac>)
 80074ee:	481e      	ldr	r0, [pc, #120]	; (8007568 <__pow5mult+0xb0>)
 80074f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074f4:	f000 fbcc 	bl	8007c90 <__assert_func>
 80074f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074fc:	6004      	str	r4, [r0, #0]
 80074fe:	60c4      	str	r4, [r0, #12]
 8007500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007508:	b94c      	cbnz	r4, 800751e <__pow5mult+0x66>
 800750a:	f240 2171 	movw	r1, #625	; 0x271
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ff16 	bl	8007340 <__i2b>
 8007514:	2300      	movs	r3, #0
 8007516:	f8c8 0008 	str.w	r0, [r8, #8]
 800751a:	4604      	mov	r4, r0
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	f04f 0900 	mov.w	r9, #0
 8007522:	07eb      	lsls	r3, r5, #31
 8007524:	d50a      	bpl.n	800753c <__pow5mult+0x84>
 8007526:	4639      	mov	r1, r7
 8007528:	4622      	mov	r2, r4
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff ff1e 	bl	800736c <__multiply>
 8007530:	4639      	mov	r1, r7
 8007532:	4680      	mov	r8, r0
 8007534:	4630      	mov	r0, r6
 8007536:	f7ff fe47 	bl	80071c8 <_Bfree>
 800753a:	4647      	mov	r7, r8
 800753c:	106d      	asrs	r5, r5, #1
 800753e:	d00b      	beq.n	8007558 <__pow5mult+0xa0>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	b938      	cbnz	r0, 8007554 <__pow5mult+0x9c>
 8007544:	4622      	mov	r2, r4
 8007546:	4621      	mov	r1, r4
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff ff0f 	bl	800736c <__multiply>
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	f8c0 9000 	str.w	r9, [r0]
 8007554:	4604      	mov	r4, r0
 8007556:	e7e4      	b.n	8007522 <__pow5mult+0x6a>
 8007558:	4638      	mov	r0, r7
 800755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755e:	bf00      	nop
 8007560:	080091b8 	.word	0x080091b8
 8007564:	08008fe1 	.word	0x08008fe1
 8007568:	08009068 	.word	0x08009068

0800756c <__lshift>:
 800756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	6849      	ldr	r1, [r1, #4]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	4607      	mov	r7, r0
 800757e:	4691      	mov	r9, r2
 8007580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007584:	f108 0601 	add.w	r6, r8, #1
 8007588:	42b3      	cmp	r3, r6
 800758a:	db0b      	blt.n	80075a4 <__lshift+0x38>
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff fddb 	bl	8007148 <_Balloc>
 8007592:	4605      	mov	r5, r0
 8007594:	b948      	cbnz	r0, 80075aa <__lshift+0x3e>
 8007596:	4602      	mov	r2, r0
 8007598:	4b28      	ldr	r3, [pc, #160]	; (800763c <__lshift+0xd0>)
 800759a:	4829      	ldr	r0, [pc, #164]	; (8007640 <__lshift+0xd4>)
 800759c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075a0:	f000 fb76 	bl	8007c90 <__assert_func>
 80075a4:	3101      	adds	r1, #1
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	e7ee      	b.n	8007588 <__lshift+0x1c>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f100 0114 	add.w	r1, r0, #20
 80075b0:	f100 0210 	add.w	r2, r0, #16
 80075b4:	4618      	mov	r0, r3
 80075b6:	4553      	cmp	r3, sl
 80075b8:	db33      	blt.n	8007622 <__lshift+0xb6>
 80075ba:	6920      	ldr	r0, [r4, #16]
 80075bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c0:	f104 0314 	add.w	r3, r4, #20
 80075c4:	f019 091f 	ands.w	r9, r9, #31
 80075c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d0:	d02b      	beq.n	800762a <__lshift+0xbe>
 80075d2:	f1c9 0e20 	rsb	lr, r9, #32
 80075d6:	468a      	mov	sl, r1
 80075d8:	2200      	movs	r2, #0
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	fa00 f009 	lsl.w	r0, r0, r9
 80075e0:	4302      	orrs	r2, r0
 80075e2:	f84a 2b04 	str.w	r2, [sl], #4
 80075e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ea:	459c      	cmp	ip, r3
 80075ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80075f0:	d8f3      	bhi.n	80075da <__lshift+0x6e>
 80075f2:	ebac 0304 	sub.w	r3, ip, r4
 80075f6:	3b15      	subs	r3, #21
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	3304      	adds	r3, #4
 80075fe:	f104 0015 	add.w	r0, r4, #21
 8007602:	4584      	cmp	ip, r0
 8007604:	bf38      	it	cc
 8007606:	2304      	movcc	r3, #4
 8007608:	50ca      	str	r2, [r1, r3]
 800760a:	b10a      	cbz	r2, 8007610 <__lshift+0xa4>
 800760c:	f108 0602 	add.w	r6, r8, #2
 8007610:	3e01      	subs	r6, #1
 8007612:	4638      	mov	r0, r7
 8007614:	612e      	str	r6, [r5, #16]
 8007616:	4621      	mov	r1, r4
 8007618:	f7ff fdd6 	bl	80071c8 <_Bfree>
 800761c:	4628      	mov	r0, r5
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	f842 0f04 	str.w	r0, [r2, #4]!
 8007626:	3301      	adds	r3, #1
 8007628:	e7c5      	b.n	80075b6 <__lshift+0x4a>
 800762a:	3904      	subs	r1, #4
 800762c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007630:	f841 2f04 	str.w	r2, [r1, #4]!
 8007634:	459c      	cmp	ip, r3
 8007636:	d8f9      	bhi.n	800762c <__lshift+0xc0>
 8007638:	e7ea      	b.n	8007610 <__lshift+0xa4>
 800763a:	bf00      	nop
 800763c:	08009057 	.word	0x08009057
 8007640:	08009068 	.word	0x08009068

08007644 <__mcmp>:
 8007644:	b530      	push	{r4, r5, lr}
 8007646:	6902      	ldr	r2, [r0, #16]
 8007648:	690c      	ldr	r4, [r1, #16]
 800764a:	1b12      	subs	r2, r2, r4
 800764c:	d10e      	bne.n	800766c <__mcmp+0x28>
 800764e:	f100 0314 	add.w	r3, r0, #20
 8007652:	3114      	adds	r1, #20
 8007654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800765c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007664:	42a5      	cmp	r5, r4
 8007666:	d003      	beq.n	8007670 <__mcmp+0x2c>
 8007668:	d305      	bcc.n	8007676 <__mcmp+0x32>
 800766a:	2201      	movs	r2, #1
 800766c:	4610      	mov	r0, r2
 800766e:	bd30      	pop	{r4, r5, pc}
 8007670:	4283      	cmp	r3, r0
 8007672:	d3f3      	bcc.n	800765c <__mcmp+0x18>
 8007674:	e7fa      	b.n	800766c <__mcmp+0x28>
 8007676:	f04f 32ff 	mov.w	r2, #4294967295
 800767a:	e7f7      	b.n	800766c <__mcmp+0x28>

0800767c <__mdiff>:
 800767c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	460c      	mov	r4, r1
 8007682:	4606      	mov	r6, r0
 8007684:	4611      	mov	r1, r2
 8007686:	4620      	mov	r0, r4
 8007688:	4617      	mov	r7, r2
 800768a:	f7ff ffdb 	bl	8007644 <__mcmp>
 800768e:	1e05      	subs	r5, r0, #0
 8007690:	d110      	bne.n	80076b4 <__mdiff+0x38>
 8007692:	4629      	mov	r1, r5
 8007694:	4630      	mov	r0, r6
 8007696:	f7ff fd57 	bl	8007148 <_Balloc>
 800769a:	b930      	cbnz	r0, 80076aa <__mdiff+0x2e>
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <__mdiff+0x108>)
 800769e:	4602      	mov	r2, r0
 80076a0:	f240 2132 	movw	r1, #562	; 0x232
 80076a4:	4838      	ldr	r0, [pc, #224]	; (8007788 <__mdiff+0x10c>)
 80076a6:	f000 faf3 	bl	8007c90 <__assert_func>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	bfa4      	itt	ge
 80076b6:	463b      	movge	r3, r7
 80076b8:	4627      	movge	r7, r4
 80076ba:	4630      	mov	r0, r6
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	bfa6      	itte	ge
 80076c0:	461c      	movge	r4, r3
 80076c2:	2500      	movge	r5, #0
 80076c4:	2501      	movlt	r5, #1
 80076c6:	f7ff fd3f 	bl	8007148 <_Balloc>
 80076ca:	b920      	cbnz	r0, 80076d6 <__mdiff+0x5a>
 80076cc:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <__mdiff+0x108>)
 80076ce:	4602      	mov	r2, r0
 80076d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076d4:	e7e6      	b.n	80076a4 <__mdiff+0x28>
 80076d6:	693e      	ldr	r6, [r7, #16]
 80076d8:	60c5      	str	r5, [r0, #12]
 80076da:	6925      	ldr	r5, [r4, #16]
 80076dc:	f107 0114 	add.w	r1, r7, #20
 80076e0:	f104 0914 	add.w	r9, r4, #20
 80076e4:	f100 0e14 	add.w	lr, r0, #20
 80076e8:	f107 0210 	add.w	r2, r7, #16
 80076ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80076f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80076f4:	46f2      	mov	sl, lr
 80076f6:	2700      	movs	r7, #0
 80076f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007700:	fa1f f883 	uxth.w	r8, r3
 8007704:	fa17 f78b 	uxtah	r7, r7, fp
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	eba7 0808 	sub.w	r8, r7, r8
 800770e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007712:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007716:	fa1f f888 	uxth.w	r8, r8
 800771a:	141f      	asrs	r7, r3, #16
 800771c:	454d      	cmp	r5, r9
 800771e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007722:	f84a 3b04 	str.w	r3, [sl], #4
 8007726:	d8e7      	bhi.n	80076f8 <__mdiff+0x7c>
 8007728:	1b2b      	subs	r3, r5, r4
 800772a:	3b15      	subs	r3, #21
 800772c:	f023 0303 	bic.w	r3, r3, #3
 8007730:	3304      	adds	r3, #4
 8007732:	3415      	adds	r4, #21
 8007734:	42a5      	cmp	r5, r4
 8007736:	bf38      	it	cc
 8007738:	2304      	movcc	r3, #4
 800773a:	4419      	add	r1, r3
 800773c:	4473      	add	r3, lr
 800773e:	469e      	mov	lr, r3
 8007740:	460d      	mov	r5, r1
 8007742:	4565      	cmp	r5, ip
 8007744:	d30e      	bcc.n	8007764 <__mdiff+0xe8>
 8007746:	f10c 0203 	add.w	r2, ip, #3
 800774a:	1a52      	subs	r2, r2, r1
 800774c:	f022 0203 	bic.w	r2, r2, #3
 8007750:	3903      	subs	r1, #3
 8007752:	458c      	cmp	ip, r1
 8007754:	bf38      	it	cc
 8007756:	2200      	movcc	r2, #0
 8007758:	441a      	add	r2, r3
 800775a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800775e:	b17b      	cbz	r3, 8007780 <__mdiff+0x104>
 8007760:	6106      	str	r6, [r0, #16]
 8007762:	e7a5      	b.n	80076b0 <__mdiff+0x34>
 8007764:	f855 8b04 	ldr.w	r8, [r5], #4
 8007768:	fa17 f488 	uxtah	r4, r7, r8
 800776c:	1422      	asrs	r2, r4, #16
 800776e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007772:	b2a4      	uxth	r4, r4
 8007774:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007778:	f84e 4b04 	str.w	r4, [lr], #4
 800777c:	1417      	asrs	r7, r2, #16
 800777e:	e7e0      	b.n	8007742 <__mdiff+0xc6>
 8007780:	3e01      	subs	r6, #1
 8007782:	e7ea      	b.n	800775a <__mdiff+0xde>
 8007784:	08009057 	.word	0x08009057
 8007788:	08009068 	.word	0x08009068

0800778c <__d2b>:
 800778c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007790:	4689      	mov	r9, r1
 8007792:	2101      	movs	r1, #1
 8007794:	ec57 6b10 	vmov	r6, r7, d0
 8007798:	4690      	mov	r8, r2
 800779a:	f7ff fcd5 	bl	8007148 <_Balloc>
 800779e:	4604      	mov	r4, r0
 80077a0:	b930      	cbnz	r0, 80077b0 <__d2b+0x24>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b25      	ldr	r3, [pc, #148]	; (800783c <__d2b+0xb0>)
 80077a6:	4826      	ldr	r0, [pc, #152]	; (8007840 <__d2b+0xb4>)
 80077a8:	f240 310a 	movw	r1, #778	; 0x30a
 80077ac:	f000 fa70 	bl	8007c90 <__assert_func>
 80077b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077b8:	bb35      	cbnz	r5, 8007808 <__d2b+0x7c>
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	d028      	beq.n	8007812 <__d2b+0x86>
 80077c0:	4668      	mov	r0, sp
 80077c2:	9600      	str	r6, [sp, #0]
 80077c4:	f7ff fd8c 	bl	80072e0 <__lo0bits>
 80077c8:	9900      	ldr	r1, [sp, #0]
 80077ca:	b300      	cbz	r0, 800780e <__d2b+0x82>
 80077cc:	9a01      	ldr	r2, [sp, #4]
 80077ce:	f1c0 0320 	rsb	r3, r0, #32
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	430b      	orrs	r3, r1
 80077d8:	40c2      	lsrs	r2, r0
 80077da:	6163      	str	r3, [r4, #20]
 80077dc:	9201      	str	r2, [sp, #4]
 80077de:	9b01      	ldr	r3, [sp, #4]
 80077e0:	61a3      	str	r3, [r4, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bf14      	ite	ne
 80077e6:	2202      	movne	r2, #2
 80077e8:	2201      	moveq	r2, #1
 80077ea:	6122      	str	r2, [r4, #16]
 80077ec:	b1d5      	cbz	r5, 8007824 <__d2b+0x98>
 80077ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077f2:	4405      	add	r5, r0
 80077f4:	f8c9 5000 	str.w	r5, [r9]
 80077f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077fc:	f8c8 0000 	str.w	r0, [r8]
 8007800:	4620      	mov	r0, r4
 8007802:	b003      	add	sp, #12
 8007804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800780c:	e7d5      	b.n	80077ba <__d2b+0x2e>
 800780e:	6161      	str	r1, [r4, #20]
 8007810:	e7e5      	b.n	80077de <__d2b+0x52>
 8007812:	a801      	add	r0, sp, #4
 8007814:	f7ff fd64 	bl	80072e0 <__lo0bits>
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	6163      	str	r3, [r4, #20]
 800781c:	2201      	movs	r2, #1
 800781e:	6122      	str	r2, [r4, #16]
 8007820:	3020      	adds	r0, #32
 8007822:	e7e3      	b.n	80077ec <__d2b+0x60>
 8007824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800782c:	f8c9 0000 	str.w	r0, [r9]
 8007830:	6918      	ldr	r0, [r3, #16]
 8007832:	f7ff fd35 	bl	80072a0 <__hi0bits>
 8007836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800783a:	e7df      	b.n	80077fc <__d2b+0x70>
 800783c:	08009057 	.word	0x08009057
 8007840:	08009068 	.word	0x08009068

08007844 <_calloc_r>:
 8007844:	b513      	push	{r0, r1, r4, lr}
 8007846:	434a      	muls	r2, r1
 8007848:	4611      	mov	r1, r2
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	f000 f85a 	bl	8007904 <_malloc_r>
 8007850:	4604      	mov	r4, r0
 8007852:	b118      	cbz	r0, 800785c <_calloc_r+0x18>
 8007854:	9a01      	ldr	r2, [sp, #4]
 8007856:	2100      	movs	r1, #0
 8007858:	f7fe f95e 	bl	8005b18 <memset>
 800785c:	4620      	mov	r0, r4
 800785e:	b002      	add	sp, #8
 8007860:	bd10      	pop	{r4, pc}
	...

08007864 <_free_r>:
 8007864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007866:	2900      	cmp	r1, #0
 8007868:	d048      	beq.n	80078fc <_free_r+0x98>
 800786a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786e:	9001      	str	r0, [sp, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f1a1 0404 	sub.w	r4, r1, #4
 8007876:	bfb8      	it	lt
 8007878:	18e4      	addlt	r4, r4, r3
 800787a:	f000 fa65 	bl	8007d48 <__malloc_lock>
 800787e:	4a20      	ldr	r2, [pc, #128]	; (8007900 <_free_r+0x9c>)
 8007880:	9801      	ldr	r0, [sp, #4]
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	4615      	mov	r5, r2
 8007886:	b933      	cbnz	r3, 8007896 <_free_r+0x32>
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6014      	str	r4, [r2, #0]
 800788c:	b003      	add	sp, #12
 800788e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007892:	f000 ba5f 	b.w	8007d54 <__malloc_unlock>
 8007896:	42a3      	cmp	r3, r4
 8007898:	d90b      	bls.n	80078b2 <_free_r+0x4e>
 800789a:	6821      	ldr	r1, [r4, #0]
 800789c:	1862      	adds	r2, r4, r1
 800789e:	4293      	cmp	r3, r2
 80078a0:	bf04      	itt	eq
 80078a2:	681a      	ldreq	r2, [r3, #0]
 80078a4:	685b      	ldreq	r3, [r3, #4]
 80078a6:	6063      	str	r3, [r4, #4]
 80078a8:	bf04      	itt	eq
 80078aa:	1852      	addeq	r2, r2, r1
 80078ac:	6022      	streq	r2, [r4, #0]
 80078ae:	602c      	str	r4, [r5, #0]
 80078b0:	e7ec      	b.n	800788c <_free_r+0x28>
 80078b2:	461a      	mov	r2, r3
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	b10b      	cbz	r3, 80078bc <_free_r+0x58>
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d9fa      	bls.n	80078b2 <_free_r+0x4e>
 80078bc:	6811      	ldr	r1, [r2, #0]
 80078be:	1855      	adds	r5, r2, r1
 80078c0:	42a5      	cmp	r5, r4
 80078c2:	d10b      	bne.n	80078dc <_free_r+0x78>
 80078c4:	6824      	ldr	r4, [r4, #0]
 80078c6:	4421      	add	r1, r4
 80078c8:	1854      	adds	r4, r2, r1
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	d1dd      	bne.n	800788c <_free_r+0x28>
 80078d0:	681c      	ldr	r4, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	6053      	str	r3, [r2, #4]
 80078d6:	4421      	add	r1, r4
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	e7d7      	b.n	800788c <_free_r+0x28>
 80078dc:	d902      	bls.n	80078e4 <_free_r+0x80>
 80078de:	230c      	movs	r3, #12
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	e7d3      	b.n	800788c <_free_r+0x28>
 80078e4:	6825      	ldr	r5, [r4, #0]
 80078e6:	1961      	adds	r1, r4, r5
 80078e8:	428b      	cmp	r3, r1
 80078ea:	bf04      	itt	eq
 80078ec:	6819      	ldreq	r1, [r3, #0]
 80078ee:	685b      	ldreq	r3, [r3, #4]
 80078f0:	6063      	str	r3, [r4, #4]
 80078f2:	bf04      	itt	eq
 80078f4:	1949      	addeq	r1, r1, r5
 80078f6:	6021      	streq	r1, [r4, #0]
 80078f8:	6054      	str	r4, [r2, #4]
 80078fa:	e7c7      	b.n	800788c <_free_r+0x28>
 80078fc:	b003      	add	sp, #12
 80078fe:	bd30      	pop	{r4, r5, pc}
 8007900:	20000224 	.word	0x20000224

08007904 <_malloc_r>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	1ccd      	adds	r5, r1, #3
 8007908:	f025 0503 	bic.w	r5, r5, #3
 800790c:	3508      	adds	r5, #8
 800790e:	2d0c      	cmp	r5, #12
 8007910:	bf38      	it	cc
 8007912:	250c      	movcc	r5, #12
 8007914:	2d00      	cmp	r5, #0
 8007916:	4606      	mov	r6, r0
 8007918:	db01      	blt.n	800791e <_malloc_r+0x1a>
 800791a:	42a9      	cmp	r1, r5
 800791c:	d903      	bls.n	8007926 <_malloc_r+0x22>
 800791e:	230c      	movs	r3, #12
 8007920:	6033      	str	r3, [r6, #0]
 8007922:	2000      	movs	r0, #0
 8007924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007926:	f000 fa0f 	bl	8007d48 <__malloc_lock>
 800792a:	4921      	ldr	r1, [pc, #132]	; (80079b0 <_malloc_r+0xac>)
 800792c:	680a      	ldr	r2, [r1, #0]
 800792e:	4614      	mov	r4, r2
 8007930:	b99c      	cbnz	r4, 800795a <_malloc_r+0x56>
 8007932:	4f20      	ldr	r7, [pc, #128]	; (80079b4 <_malloc_r+0xb0>)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	b923      	cbnz	r3, 8007942 <_malloc_r+0x3e>
 8007938:	4621      	mov	r1, r4
 800793a:	4630      	mov	r0, r6
 800793c:	f000 f998 	bl	8007c70 <_sbrk_r>
 8007940:	6038      	str	r0, [r7, #0]
 8007942:	4629      	mov	r1, r5
 8007944:	4630      	mov	r0, r6
 8007946:	f000 f993 	bl	8007c70 <_sbrk_r>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d123      	bne.n	8007996 <_malloc_r+0x92>
 800794e:	230c      	movs	r3, #12
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	4630      	mov	r0, r6
 8007954:	f000 f9fe 	bl	8007d54 <__malloc_unlock>
 8007958:	e7e3      	b.n	8007922 <_malloc_r+0x1e>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	1b5b      	subs	r3, r3, r5
 800795e:	d417      	bmi.n	8007990 <_malloc_r+0x8c>
 8007960:	2b0b      	cmp	r3, #11
 8007962:	d903      	bls.n	800796c <_malloc_r+0x68>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	441c      	add	r4, r3
 8007968:	6025      	str	r5, [r4, #0]
 800796a:	e004      	b.n	8007976 <_malloc_r+0x72>
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	42a2      	cmp	r2, r4
 8007970:	bf0c      	ite	eq
 8007972:	600b      	streq	r3, [r1, #0]
 8007974:	6053      	strne	r3, [r2, #4]
 8007976:	4630      	mov	r0, r6
 8007978:	f000 f9ec 	bl	8007d54 <__malloc_unlock>
 800797c:	f104 000b 	add.w	r0, r4, #11
 8007980:	1d23      	adds	r3, r4, #4
 8007982:	f020 0007 	bic.w	r0, r0, #7
 8007986:	1ac2      	subs	r2, r0, r3
 8007988:	d0cc      	beq.n	8007924 <_malloc_r+0x20>
 800798a:	1a1b      	subs	r3, r3, r0
 800798c:	50a3      	str	r3, [r4, r2]
 800798e:	e7c9      	b.n	8007924 <_malloc_r+0x20>
 8007990:	4622      	mov	r2, r4
 8007992:	6864      	ldr	r4, [r4, #4]
 8007994:	e7cc      	b.n	8007930 <_malloc_r+0x2c>
 8007996:	1cc4      	adds	r4, r0, #3
 8007998:	f024 0403 	bic.w	r4, r4, #3
 800799c:	42a0      	cmp	r0, r4
 800799e:	d0e3      	beq.n	8007968 <_malloc_r+0x64>
 80079a0:	1a21      	subs	r1, r4, r0
 80079a2:	4630      	mov	r0, r6
 80079a4:	f000 f964 	bl	8007c70 <_sbrk_r>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d1dd      	bne.n	8007968 <_malloc_r+0x64>
 80079ac:	e7cf      	b.n	800794e <_malloc_r+0x4a>
 80079ae:	bf00      	nop
 80079b0:	20000224 	.word	0x20000224
 80079b4:	20000228 	.word	0x20000228

080079b8 <__ssputs_r>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	688e      	ldr	r6, [r1, #8]
 80079be:	429e      	cmp	r6, r3
 80079c0:	4682      	mov	sl, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	4690      	mov	r8, r2
 80079c6:	461f      	mov	r7, r3
 80079c8:	d838      	bhi.n	8007a3c <__ssputs_r+0x84>
 80079ca:	898a      	ldrh	r2, [r1, #12]
 80079cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079d0:	d032      	beq.n	8007a38 <__ssputs_r+0x80>
 80079d2:	6825      	ldr	r5, [r4, #0]
 80079d4:	6909      	ldr	r1, [r1, #16]
 80079d6:	eba5 0901 	sub.w	r9, r5, r1
 80079da:	6965      	ldr	r5, [r4, #20]
 80079dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079e4:	3301      	adds	r3, #1
 80079e6:	444b      	add	r3, r9
 80079e8:	106d      	asrs	r5, r5, #1
 80079ea:	429d      	cmp	r5, r3
 80079ec:	bf38      	it	cc
 80079ee:	461d      	movcc	r5, r3
 80079f0:	0553      	lsls	r3, r2, #21
 80079f2:	d531      	bpl.n	8007a58 <__ssputs_r+0xa0>
 80079f4:	4629      	mov	r1, r5
 80079f6:	f7ff ff85 	bl	8007904 <_malloc_r>
 80079fa:	4606      	mov	r6, r0
 80079fc:	b950      	cbnz	r0, 8007a14 <__ssputs_r+0x5c>
 80079fe:	230c      	movs	r3, #12
 8007a00:	f8ca 3000 	str.w	r3, [sl]
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a0a:	81a3      	strh	r3, [r4, #12]
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a14:	6921      	ldr	r1, [r4, #16]
 8007a16:	464a      	mov	r2, r9
 8007a18:	f7fe f870 	bl	8005afc <memcpy>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	6126      	str	r6, [r4, #16]
 8007a2a:	6165      	str	r5, [r4, #20]
 8007a2c:	444e      	add	r6, r9
 8007a2e:	eba5 0509 	sub.w	r5, r5, r9
 8007a32:	6026      	str	r6, [r4, #0]
 8007a34:	60a5      	str	r5, [r4, #8]
 8007a36:	463e      	mov	r6, r7
 8007a38:	42be      	cmp	r6, r7
 8007a3a:	d900      	bls.n	8007a3e <__ssputs_r+0x86>
 8007a3c:	463e      	mov	r6, r7
 8007a3e:	4632      	mov	r2, r6
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	4641      	mov	r1, r8
 8007a44:	f000 f966 	bl	8007d14 <memmove>
 8007a48:	68a3      	ldr	r3, [r4, #8]
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	1b9b      	subs	r3, r3, r6
 8007a4e:	4432      	add	r2, r6
 8007a50:	60a3      	str	r3, [r4, #8]
 8007a52:	6022      	str	r2, [r4, #0]
 8007a54:	2000      	movs	r0, #0
 8007a56:	e7db      	b.n	8007a10 <__ssputs_r+0x58>
 8007a58:	462a      	mov	r2, r5
 8007a5a:	f000 f981 	bl	8007d60 <_realloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1e1      	bne.n	8007a28 <__ssputs_r+0x70>
 8007a64:	6921      	ldr	r1, [r4, #16]
 8007a66:	4650      	mov	r0, sl
 8007a68:	f7ff fefc 	bl	8007864 <_free_r>
 8007a6c:	e7c7      	b.n	80079fe <__ssputs_r+0x46>
	...

08007a70 <_svfiprintf_r>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4698      	mov	r8, r3
 8007a76:	898b      	ldrh	r3, [r1, #12]
 8007a78:	061b      	lsls	r3, r3, #24
 8007a7a:	b09d      	sub	sp, #116	; 0x74
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	4614      	mov	r4, r2
 8007a82:	d50e      	bpl.n	8007aa2 <_svfiprintf_r+0x32>
 8007a84:	690b      	ldr	r3, [r1, #16]
 8007a86:	b963      	cbnz	r3, 8007aa2 <_svfiprintf_r+0x32>
 8007a88:	2140      	movs	r1, #64	; 0x40
 8007a8a:	f7ff ff3b 	bl	8007904 <_malloc_r>
 8007a8e:	6028      	str	r0, [r5, #0]
 8007a90:	6128      	str	r0, [r5, #16]
 8007a92:	b920      	cbnz	r0, 8007a9e <_svfiprintf_r+0x2e>
 8007a94:	230c      	movs	r3, #12
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	e0d1      	b.n	8007c42 <_svfiprintf_r+0x1d2>
 8007a9e:	2340      	movs	r3, #64	; 0x40
 8007aa0:	616b      	str	r3, [r5, #20]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa6:	2320      	movs	r3, #32
 8007aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab0:	2330      	movs	r3, #48	; 0x30
 8007ab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c5c <_svfiprintf_r+0x1ec>
 8007ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aba:	f04f 0901 	mov.w	r9, #1
 8007abe:	4623      	mov	r3, r4
 8007ac0:	469a      	mov	sl, r3
 8007ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac6:	b10a      	cbz	r2, 8007acc <_svfiprintf_r+0x5c>
 8007ac8:	2a25      	cmp	r2, #37	; 0x25
 8007aca:	d1f9      	bne.n	8007ac0 <_svfiprintf_r+0x50>
 8007acc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad0:	d00b      	beq.n	8007aea <_svfiprintf_r+0x7a>
 8007ad2:	465b      	mov	r3, fp
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7ff ff6d 	bl	80079b8 <__ssputs_r>
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f000 80aa 	beq.w	8007c38 <_svfiprintf_r+0x1c8>
 8007ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae6:	445a      	add	r2, fp
 8007ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8007aea:	f89a 3000 	ldrb.w	r3, [sl]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 80a2 	beq.w	8007c38 <_svfiprintf_r+0x1c8>
 8007af4:	2300      	movs	r3, #0
 8007af6:	f04f 32ff 	mov.w	r2, #4294967295
 8007afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007afe:	f10a 0a01 	add.w	sl, sl, #1
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	9307      	str	r3, [sp, #28]
 8007b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0c:	4654      	mov	r4, sl
 8007b0e:	2205      	movs	r2, #5
 8007b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b14:	4851      	ldr	r0, [pc, #324]	; (8007c5c <_svfiprintf_r+0x1ec>)
 8007b16:	f7f8 fb83 	bl	8000220 <memchr>
 8007b1a:	9a04      	ldr	r2, [sp, #16]
 8007b1c:	b9d8      	cbnz	r0, 8007b56 <_svfiprintf_r+0xe6>
 8007b1e:	06d0      	lsls	r0, r2, #27
 8007b20:	bf44      	itt	mi
 8007b22:	2320      	movmi	r3, #32
 8007b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b28:	0711      	lsls	r1, r2, #28
 8007b2a:	bf44      	itt	mi
 8007b2c:	232b      	movmi	r3, #43	; 0x2b
 8007b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b32:	f89a 3000 	ldrb.w	r3, [sl]
 8007b36:	2b2a      	cmp	r3, #42	; 0x2a
 8007b38:	d015      	beq.n	8007b66 <_svfiprintf_r+0xf6>
 8007b3a:	9a07      	ldr	r2, [sp, #28]
 8007b3c:	4654      	mov	r4, sl
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f04f 0c0a 	mov.w	ip, #10
 8007b44:	4621      	mov	r1, r4
 8007b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b4a:	3b30      	subs	r3, #48	; 0x30
 8007b4c:	2b09      	cmp	r3, #9
 8007b4e:	d94e      	bls.n	8007bee <_svfiprintf_r+0x17e>
 8007b50:	b1b0      	cbz	r0, 8007b80 <_svfiprintf_r+0x110>
 8007b52:	9207      	str	r2, [sp, #28]
 8007b54:	e014      	b.n	8007b80 <_svfiprintf_r+0x110>
 8007b56:	eba0 0308 	sub.w	r3, r0, r8
 8007b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	46a2      	mov	sl, r4
 8007b64:	e7d2      	b.n	8007b0c <_svfiprintf_r+0x9c>
 8007b66:	9b03      	ldr	r3, [sp, #12]
 8007b68:	1d19      	adds	r1, r3, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	9103      	str	r1, [sp, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bfbb      	ittet	lt
 8007b72:	425b      	neglt	r3, r3
 8007b74:	f042 0202 	orrlt.w	r2, r2, #2
 8007b78:	9307      	strge	r3, [sp, #28]
 8007b7a:	9307      	strlt	r3, [sp, #28]
 8007b7c:	bfb8      	it	lt
 8007b7e:	9204      	strlt	r2, [sp, #16]
 8007b80:	7823      	ldrb	r3, [r4, #0]
 8007b82:	2b2e      	cmp	r3, #46	; 0x2e
 8007b84:	d10c      	bne.n	8007ba0 <_svfiprintf_r+0x130>
 8007b86:	7863      	ldrb	r3, [r4, #1]
 8007b88:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8a:	d135      	bne.n	8007bf8 <_svfiprintf_r+0x188>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	1d1a      	adds	r2, r3, #4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	9203      	str	r2, [sp, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bfb8      	it	lt
 8007b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b9c:	3402      	adds	r4, #2
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c6c <_svfiprintf_r+0x1fc>
 8007ba4:	7821      	ldrb	r1, [r4, #0]
 8007ba6:	2203      	movs	r2, #3
 8007ba8:	4650      	mov	r0, sl
 8007baa:	f7f8 fb39 	bl	8000220 <memchr>
 8007bae:	b140      	cbz	r0, 8007bc2 <_svfiprintf_r+0x152>
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	eba0 000a 	sub.w	r0, r0, sl
 8007bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	4303      	orrs	r3, r0
 8007bbe:	3401      	adds	r4, #1
 8007bc0:	9304      	str	r3, [sp, #16]
 8007bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc6:	4826      	ldr	r0, [pc, #152]	; (8007c60 <_svfiprintf_r+0x1f0>)
 8007bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bcc:	2206      	movs	r2, #6
 8007bce:	f7f8 fb27 	bl	8000220 <memchr>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d038      	beq.n	8007c48 <_svfiprintf_r+0x1d8>
 8007bd6:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <_svfiprintf_r+0x1f4>)
 8007bd8:	bb1b      	cbnz	r3, 8007c22 <_svfiprintf_r+0x1b2>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	3307      	adds	r3, #7
 8007bde:	f023 0307 	bic.w	r3, r3, #7
 8007be2:	3308      	adds	r3, #8
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be8:	4433      	add	r3, r6
 8007bea:	9309      	str	r3, [sp, #36]	; 0x24
 8007bec:	e767      	b.n	8007abe <_svfiprintf_r+0x4e>
 8007bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e7a5      	b.n	8007b44 <_svfiprintf_r+0xd4>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	3401      	adds	r4, #1
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4620      	mov	r0, r4
 8007c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0a:	3a30      	subs	r2, #48	; 0x30
 8007c0c:	2a09      	cmp	r2, #9
 8007c0e:	d903      	bls.n	8007c18 <_svfiprintf_r+0x1a8>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0c5      	beq.n	8007ba0 <_svfiprintf_r+0x130>
 8007c14:	9105      	str	r1, [sp, #20]
 8007c16:	e7c3      	b.n	8007ba0 <_svfiprintf_r+0x130>
 8007c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7f0      	b.n	8007c04 <_svfiprintf_r+0x194>
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	462a      	mov	r2, r5
 8007c28:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <_svfiprintf_r+0x1f8>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f7fe f81b 	bl	8005c68 <_printf_float>
 8007c32:	1c42      	adds	r2, r0, #1
 8007c34:	4606      	mov	r6, r0
 8007c36:	d1d6      	bne.n	8007be6 <_svfiprintf_r+0x176>
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	065b      	lsls	r3, r3, #25
 8007c3c:	f53f af2c 	bmi.w	8007a98 <_svfiprintf_r+0x28>
 8007c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c42:	b01d      	add	sp, #116	; 0x74
 8007c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	ab03      	add	r3, sp, #12
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <_svfiprintf_r+0x1f8>)
 8007c50:	a904      	add	r1, sp, #16
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7fe faac 	bl	80061b0 <_printf_i>
 8007c58:	e7eb      	b.n	8007c32 <_svfiprintf_r+0x1c2>
 8007c5a:	bf00      	nop
 8007c5c:	080091c4 	.word	0x080091c4
 8007c60:	080091ce 	.word	0x080091ce
 8007c64:	08005c69 	.word	0x08005c69
 8007c68:	080079b9 	.word	0x080079b9
 8007c6c:	080091ca 	.word	0x080091ca

08007c70 <_sbrk_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d06      	ldr	r5, [pc, #24]	; (8007c8c <_sbrk_r+0x1c>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	f7fa fa0e 	bl	800209c <_sbrk>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_sbrk_r+0x1a>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_sbrk_r+0x1a>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	2000042c 	.word	0x2000042c

08007c90 <__assert_func>:
 8007c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c92:	4614      	mov	r4, r2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <__assert_func+0x2c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	68d8      	ldr	r0, [r3, #12]
 8007c9e:	b14c      	cbz	r4, 8007cb4 <__assert_func+0x24>
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <__assert_func+0x30>)
 8007ca2:	9100      	str	r1, [sp, #0]
 8007ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ca8:	4906      	ldr	r1, [pc, #24]	; (8007cc4 <__assert_func+0x34>)
 8007caa:	462b      	mov	r3, r5
 8007cac:	f000 f80e 	bl	8007ccc <fiprintf>
 8007cb0:	f000 faa4 	bl	80081fc <abort>
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <__assert_func+0x38>)
 8007cb6:	461c      	mov	r4, r3
 8007cb8:	e7f3      	b.n	8007ca2 <__assert_func+0x12>
 8007cba:	bf00      	nop
 8007cbc:	2000001c 	.word	0x2000001c
 8007cc0:	080091d5 	.word	0x080091d5
 8007cc4:	080091e2 	.word	0x080091e2
 8007cc8:	08009210 	.word	0x08009210

08007ccc <fiprintf>:
 8007ccc:	b40e      	push	{r1, r2, r3}
 8007cce:	b503      	push	{r0, r1, lr}
 8007cd0:	4601      	mov	r1, r0
 8007cd2:	ab03      	add	r3, sp, #12
 8007cd4:	4805      	ldr	r0, [pc, #20]	; (8007cec <fiprintf+0x20>)
 8007cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cda:	6800      	ldr	r0, [r0, #0]
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	f000 f88f 	bl	8007e00 <_vfiprintf_r>
 8007ce2:	b002      	add	sp, #8
 8007ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce8:	b003      	add	sp, #12
 8007cea:	4770      	bx	lr
 8007cec:	2000001c 	.word	0x2000001c

08007cf0 <__ascii_mbtowc>:
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	b901      	cbnz	r1, 8007cf6 <__ascii_mbtowc+0x6>
 8007cf4:	a901      	add	r1, sp, #4
 8007cf6:	b142      	cbz	r2, 8007d0a <__ascii_mbtowc+0x1a>
 8007cf8:	b14b      	cbz	r3, 8007d0e <__ascii_mbtowc+0x1e>
 8007cfa:	7813      	ldrb	r3, [r2, #0]
 8007cfc:	600b      	str	r3, [r1, #0]
 8007cfe:	7812      	ldrb	r2, [r2, #0]
 8007d00:	1e10      	subs	r0, r2, #0
 8007d02:	bf18      	it	ne
 8007d04:	2001      	movne	r0, #1
 8007d06:	b002      	add	sp, #8
 8007d08:	4770      	bx	lr
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	e7fb      	b.n	8007d06 <__ascii_mbtowc+0x16>
 8007d0e:	f06f 0001 	mvn.w	r0, #1
 8007d12:	e7f8      	b.n	8007d06 <__ascii_mbtowc+0x16>

08007d14 <memmove>:
 8007d14:	4288      	cmp	r0, r1
 8007d16:	b510      	push	{r4, lr}
 8007d18:	eb01 0402 	add.w	r4, r1, r2
 8007d1c:	d902      	bls.n	8007d24 <memmove+0x10>
 8007d1e:	4284      	cmp	r4, r0
 8007d20:	4623      	mov	r3, r4
 8007d22:	d807      	bhi.n	8007d34 <memmove+0x20>
 8007d24:	1e43      	subs	r3, r0, #1
 8007d26:	42a1      	cmp	r1, r4
 8007d28:	d008      	beq.n	8007d3c <memmove+0x28>
 8007d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d32:	e7f8      	b.n	8007d26 <memmove+0x12>
 8007d34:	4402      	add	r2, r0
 8007d36:	4601      	mov	r1, r0
 8007d38:	428a      	cmp	r2, r1
 8007d3a:	d100      	bne.n	8007d3e <memmove+0x2a>
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d46:	e7f7      	b.n	8007d38 <memmove+0x24>

08007d48 <__malloc_lock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_lock+0x8>)
 8007d4a:	f000 bc17 	b.w	800857c <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20000434 	.word	0x20000434

08007d54 <__malloc_unlock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__malloc_unlock+0x8>)
 8007d56:	f000 bc12 	b.w	800857e <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20000434 	.word	0x20000434

08007d60 <_realloc_r>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	4607      	mov	r7, r0
 8007d64:	4614      	mov	r4, r2
 8007d66:	460e      	mov	r6, r1
 8007d68:	b921      	cbnz	r1, 8007d74 <_realloc_r+0x14>
 8007d6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d6e:	4611      	mov	r1, r2
 8007d70:	f7ff bdc8 	b.w	8007904 <_malloc_r>
 8007d74:	b922      	cbnz	r2, 8007d80 <_realloc_r+0x20>
 8007d76:	f7ff fd75 	bl	8007864 <_free_r>
 8007d7a:	4625      	mov	r5, r4
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d80:	f000 fc62 	bl	8008648 <_malloc_usable_size_r>
 8007d84:	42a0      	cmp	r0, r4
 8007d86:	d20f      	bcs.n	8007da8 <_realloc_r+0x48>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	f7ff fdba 	bl	8007904 <_malloc_r>
 8007d90:	4605      	mov	r5, r0
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d0f2      	beq.n	8007d7c <_realloc_r+0x1c>
 8007d96:	4631      	mov	r1, r6
 8007d98:	4622      	mov	r2, r4
 8007d9a:	f7fd feaf 	bl	8005afc <memcpy>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff fd5f 	bl	8007864 <_free_r>
 8007da6:	e7e9      	b.n	8007d7c <_realloc_r+0x1c>
 8007da8:	4635      	mov	r5, r6
 8007daa:	e7e7      	b.n	8007d7c <_realloc_r+0x1c>

08007dac <__sfputc_r>:
 8007dac:	6893      	ldr	r3, [r2, #8]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	b410      	push	{r4}
 8007db4:	6093      	str	r3, [r2, #8]
 8007db6:	da08      	bge.n	8007dca <__sfputc_r+0x1e>
 8007db8:	6994      	ldr	r4, [r2, #24]
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	db01      	blt.n	8007dc2 <__sfputc_r+0x16>
 8007dbe:	290a      	cmp	r1, #10
 8007dc0:	d103      	bne.n	8007dca <__sfputc_r+0x1e>
 8007dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc6:	f000 b94b 	b.w	8008060 <__swbuf_r>
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	1c58      	adds	r0, r3, #1
 8007dce:	6010      	str	r0, [r2, #0]
 8007dd0:	7019      	strb	r1, [r3, #0]
 8007dd2:	4608      	mov	r0, r1
 8007dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <__sfputs_r>:
 8007dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	4614      	mov	r4, r2
 8007de2:	18d5      	adds	r5, r2, r3
 8007de4:	42ac      	cmp	r4, r5
 8007de6:	d101      	bne.n	8007dec <__sfputs_r+0x12>
 8007de8:	2000      	movs	r0, #0
 8007dea:	e007      	b.n	8007dfc <__sfputs_r+0x22>
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	463a      	mov	r2, r7
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff ffda 	bl	8007dac <__sfputc_r>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d1f3      	bne.n	8007de4 <__sfputs_r+0xa>
 8007dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e00 <_vfiprintf_r>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	460d      	mov	r5, r1
 8007e06:	b09d      	sub	sp, #116	; 0x74
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4698      	mov	r8, r3
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	b118      	cbz	r0, 8007e18 <_vfiprintf_r+0x18>
 8007e10:	6983      	ldr	r3, [r0, #24]
 8007e12:	b90b      	cbnz	r3, 8007e18 <_vfiprintf_r+0x18>
 8007e14:	f000 fb14 	bl	8008440 <__sinit>
 8007e18:	4b89      	ldr	r3, [pc, #548]	; (8008040 <_vfiprintf_r+0x240>)
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	d11b      	bne.n	8007e56 <_vfiprintf_r+0x56>
 8007e1e:	6875      	ldr	r5, [r6, #4]
 8007e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d405      	bmi.n	8007e32 <_vfiprintf_r+0x32>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	059a      	lsls	r2, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_vfiprintf_r+0x32>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e2e:	f000 fba5 	bl	800857c <__retarget_lock_acquire_recursive>
 8007e32:	89ab      	ldrh	r3, [r5, #12]
 8007e34:	071b      	lsls	r3, r3, #28
 8007e36:	d501      	bpl.n	8007e3c <_vfiprintf_r+0x3c>
 8007e38:	692b      	ldr	r3, [r5, #16]
 8007e3a:	b9eb      	cbnz	r3, 8007e78 <_vfiprintf_r+0x78>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f96e 	bl	8008120 <__swsetup_r>
 8007e44:	b1c0      	cbz	r0, 8007e78 <_vfiprintf_r+0x78>
 8007e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e48:	07dc      	lsls	r4, r3, #31
 8007e4a:	d50e      	bpl.n	8007e6a <_vfiprintf_r+0x6a>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	b01d      	add	sp, #116	; 0x74
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e56:	4b7b      	ldr	r3, [pc, #492]	; (8008044 <_vfiprintf_r+0x244>)
 8007e58:	429d      	cmp	r5, r3
 8007e5a:	d101      	bne.n	8007e60 <_vfiprintf_r+0x60>
 8007e5c:	68b5      	ldr	r5, [r6, #8]
 8007e5e:	e7df      	b.n	8007e20 <_vfiprintf_r+0x20>
 8007e60:	4b79      	ldr	r3, [pc, #484]	; (8008048 <_vfiprintf_r+0x248>)
 8007e62:	429d      	cmp	r5, r3
 8007e64:	bf08      	it	eq
 8007e66:	68f5      	ldreq	r5, [r6, #12]
 8007e68:	e7da      	b.n	8007e20 <_vfiprintf_r+0x20>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	0598      	lsls	r0, r3, #22
 8007e6e:	d4ed      	bmi.n	8007e4c <_vfiprintf_r+0x4c>
 8007e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e72:	f000 fb84 	bl	800857e <__retarget_lock_release_recursive>
 8007e76:	e7e9      	b.n	8007e4c <_vfiprintf_r+0x4c>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e86:	2330      	movs	r3, #48	; 0x30
 8007e88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800804c <_vfiprintf_r+0x24c>
 8007e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e90:	f04f 0901 	mov.w	r9, #1
 8007e94:	4623      	mov	r3, r4
 8007e96:	469a      	mov	sl, r3
 8007e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e9c:	b10a      	cbz	r2, 8007ea2 <_vfiprintf_r+0xa2>
 8007e9e:	2a25      	cmp	r2, #37	; 0x25
 8007ea0:	d1f9      	bne.n	8007e96 <_vfiprintf_r+0x96>
 8007ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea6:	d00b      	beq.n	8007ec0 <_vfiprintf_r+0xc0>
 8007ea8:	465b      	mov	r3, fp
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff ff93 	bl	8007dda <__sfputs_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f000 80aa 	beq.w	800800e <_vfiprintf_r+0x20e>
 8007eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ebc:	445a      	add	r2, fp
 8007ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80a2 	beq.w	800800e <_vfiprintf_r+0x20e>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed4:	f10a 0a01 	add.w	sl, sl, #1
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	9307      	str	r3, [sp, #28]
 8007edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ee2:	4654      	mov	r4, sl
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eea:	4858      	ldr	r0, [pc, #352]	; (800804c <_vfiprintf_r+0x24c>)
 8007eec:	f7f8 f998 	bl	8000220 <memchr>
 8007ef0:	9a04      	ldr	r2, [sp, #16]
 8007ef2:	b9d8      	cbnz	r0, 8007f2c <_vfiprintf_r+0x12c>
 8007ef4:	06d1      	lsls	r1, r2, #27
 8007ef6:	bf44      	itt	mi
 8007ef8:	2320      	movmi	r3, #32
 8007efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007efe:	0713      	lsls	r3, r2, #28
 8007f00:	bf44      	itt	mi
 8007f02:	232b      	movmi	r3, #43	; 0x2b
 8007f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f08:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0e:	d015      	beq.n	8007f3c <_vfiprintf_r+0x13c>
 8007f10:	9a07      	ldr	r2, [sp, #28]
 8007f12:	4654      	mov	r4, sl
 8007f14:	2000      	movs	r0, #0
 8007f16:	f04f 0c0a 	mov.w	ip, #10
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f20:	3b30      	subs	r3, #48	; 0x30
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	d94e      	bls.n	8007fc4 <_vfiprintf_r+0x1c4>
 8007f26:	b1b0      	cbz	r0, 8007f56 <_vfiprintf_r+0x156>
 8007f28:	9207      	str	r2, [sp, #28]
 8007f2a:	e014      	b.n	8007f56 <_vfiprintf_r+0x156>
 8007f2c:	eba0 0308 	sub.w	r3, r0, r8
 8007f30:	fa09 f303 	lsl.w	r3, r9, r3
 8007f34:	4313      	orrs	r3, r2
 8007f36:	9304      	str	r3, [sp, #16]
 8007f38:	46a2      	mov	sl, r4
 8007f3a:	e7d2      	b.n	8007ee2 <_vfiprintf_r+0xe2>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1d19      	adds	r1, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	9103      	str	r1, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfbb      	ittet	lt
 8007f48:	425b      	neglt	r3, r3
 8007f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f4e:	9307      	strge	r3, [sp, #28]
 8007f50:	9307      	strlt	r3, [sp, #28]
 8007f52:	bfb8      	it	lt
 8007f54:	9204      	strlt	r2, [sp, #16]
 8007f56:	7823      	ldrb	r3, [r4, #0]
 8007f58:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5a:	d10c      	bne.n	8007f76 <_vfiprintf_r+0x176>
 8007f5c:	7863      	ldrb	r3, [r4, #1]
 8007f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f60:	d135      	bne.n	8007fce <_vfiprintf_r+0x1ce>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	1d1a      	adds	r2, r3, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	9203      	str	r2, [sp, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfb8      	it	lt
 8007f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f72:	3402      	adds	r4, #2
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800805c <_vfiprintf_r+0x25c>
 8007f7a:	7821      	ldrb	r1, [r4, #0]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	4650      	mov	r0, sl
 8007f80:	f7f8 f94e 	bl	8000220 <memchr>
 8007f84:	b140      	cbz	r0, 8007f98 <_vfiprintf_r+0x198>
 8007f86:	2340      	movs	r3, #64	; 0x40
 8007f88:	eba0 000a 	sub.w	r0, r0, sl
 8007f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	4303      	orrs	r3, r0
 8007f94:	3401      	adds	r4, #1
 8007f96:	9304      	str	r3, [sp, #16]
 8007f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9c:	482c      	ldr	r0, [pc, #176]	; (8008050 <_vfiprintf_r+0x250>)
 8007f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fa2:	2206      	movs	r2, #6
 8007fa4:	f7f8 f93c 	bl	8000220 <memchr>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d03f      	beq.n	800802c <_vfiprintf_r+0x22c>
 8007fac:	4b29      	ldr	r3, [pc, #164]	; (8008054 <_vfiprintf_r+0x254>)
 8007fae:	bb1b      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x1f8>
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	3307      	adds	r3, #7
 8007fb4:	f023 0307 	bic.w	r3, r3, #7
 8007fb8:	3308      	adds	r3, #8
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbe:	443b      	add	r3, r7
 8007fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc2:	e767      	b.n	8007e94 <_vfiprintf_r+0x94>
 8007fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc8:	460c      	mov	r4, r1
 8007fca:	2001      	movs	r0, #1
 8007fcc:	e7a5      	b.n	8007f1a <_vfiprintf_r+0x11a>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	3401      	adds	r4, #1
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	f04f 0c0a 	mov.w	ip, #10
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe0:	3a30      	subs	r2, #48	; 0x30
 8007fe2:	2a09      	cmp	r2, #9
 8007fe4:	d903      	bls.n	8007fee <_vfiprintf_r+0x1ee>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0c5      	beq.n	8007f76 <_vfiprintf_r+0x176>
 8007fea:	9105      	str	r1, [sp, #20]
 8007fec:	e7c3      	b.n	8007f76 <_vfiprintf_r+0x176>
 8007fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e7f0      	b.n	8007fda <_vfiprintf_r+0x1da>
 8007ff8:	ab03      	add	r3, sp, #12
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	4b16      	ldr	r3, [pc, #88]	; (8008058 <_vfiprintf_r+0x258>)
 8008000:	a904      	add	r1, sp, #16
 8008002:	4630      	mov	r0, r6
 8008004:	f7fd fe30 	bl	8005c68 <_printf_float>
 8008008:	4607      	mov	r7, r0
 800800a:	1c78      	adds	r0, r7, #1
 800800c:	d1d6      	bne.n	8007fbc <_vfiprintf_r+0x1bc>
 800800e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008010:	07d9      	lsls	r1, r3, #31
 8008012:	d405      	bmi.n	8008020 <_vfiprintf_r+0x220>
 8008014:	89ab      	ldrh	r3, [r5, #12]
 8008016:	059a      	lsls	r2, r3, #22
 8008018:	d402      	bmi.n	8008020 <_vfiprintf_r+0x220>
 800801a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800801c:	f000 faaf 	bl	800857e <__retarget_lock_release_recursive>
 8008020:	89ab      	ldrh	r3, [r5, #12]
 8008022:	065b      	lsls	r3, r3, #25
 8008024:	f53f af12 	bmi.w	8007e4c <_vfiprintf_r+0x4c>
 8008028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800802a:	e711      	b.n	8007e50 <_vfiprintf_r+0x50>
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	462a      	mov	r2, r5
 8008032:	4b09      	ldr	r3, [pc, #36]	; (8008058 <_vfiprintf_r+0x258>)
 8008034:	a904      	add	r1, sp, #16
 8008036:	4630      	mov	r0, r6
 8008038:	f7fe f8ba 	bl	80061b0 <_printf_i>
 800803c:	e7e4      	b.n	8008008 <_vfiprintf_r+0x208>
 800803e:	bf00      	nop
 8008040:	0800933c 	.word	0x0800933c
 8008044:	0800935c 	.word	0x0800935c
 8008048:	0800931c 	.word	0x0800931c
 800804c:	080091c4 	.word	0x080091c4
 8008050:	080091ce 	.word	0x080091ce
 8008054:	08005c69 	.word	0x08005c69
 8008058:	08007ddb 	.word	0x08007ddb
 800805c:	080091ca 	.word	0x080091ca

08008060 <__swbuf_r>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	460e      	mov	r6, r1
 8008064:	4614      	mov	r4, r2
 8008066:	4605      	mov	r5, r0
 8008068:	b118      	cbz	r0, 8008072 <__swbuf_r+0x12>
 800806a:	6983      	ldr	r3, [r0, #24]
 800806c:	b90b      	cbnz	r3, 8008072 <__swbuf_r+0x12>
 800806e:	f000 f9e7 	bl	8008440 <__sinit>
 8008072:	4b21      	ldr	r3, [pc, #132]	; (80080f8 <__swbuf_r+0x98>)
 8008074:	429c      	cmp	r4, r3
 8008076:	d12b      	bne.n	80080d0 <__swbuf_r+0x70>
 8008078:	686c      	ldr	r4, [r5, #4]
 800807a:	69a3      	ldr	r3, [r4, #24]
 800807c:	60a3      	str	r3, [r4, #8]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	071a      	lsls	r2, r3, #28
 8008082:	d52f      	bpl.n	80080e4 <__swbuf_r+0x84>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	b36b      	cbz	r3, 80080e4 <__swbuf_r+0x84>
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	1ac0      	subs	r0, r0, r3
 800808e:	6963      	ldr	r3, [r4, #20]
 8008090:	b2f6      	uxtb	r6, r6
 8008092:	4283      	cmp	r3, r0
 8008094:	4637      	mov	r7, r6
 8008096:	dc04      	bgt.n	80080a2 <__swbuf_r+0x42>
 8008098:	4621      	mov	r1, r4
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f93c 	bl	8008318 <_fflush_r>
 80080a0:	bb30      	cbnz	r0, 80080f0 <__swbuf_r+0x90>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	60a3      	str	r3, [r4, #8]
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	6022      	str	r2, [r4, #0]
 80080ae:	701e      	strb	r6, [r3, #0]
 80080b0:	6963      	ldr	r3, [r4, #20]
 80080b2:	3001      	adds	r0, #1
 80080b4:	4283      	cmp	r3, r0
 80080b6:	d004      	beq.n	80080c2 <__swbuf_r+0x62>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	07db      	lsls	r3, r3, #31
 80080bc:	d506      	bpl.n	80080cc <__swbuf_r+0x6c>
 80080be:	2e0a      	cmp	r6, #10
 80080c0:	d104      	bne.n	80080cc <__swbuf_r+0x6c>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 f927 	bl	8008318 <_fflush_r>
 80080ca:	b988      	cbnz	r0, 80080f0 <__swbuf_r+0x90>
 80080cc:	4638      	mov	r0, r7
 80080ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <__swbuf_r+0x9c>)
 80080d2:	429c      	cmp	r4, r3
 80080d4:	d101      	bne.n	80080da <__swbuf_r+0x7a>
 80080d6:	68ac      	ldr	r4, [r5, #8]
 80080d8:	e7cf      	b.n	800807a <__swbuf_r+0x1a>
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <__swbuf_r+0xa0>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	bf08      	it	eq
 80080e0:	68ec      	ldreq	r4, [r5, #12]
 80080e2:	e7ca      	b.n	800807a <__swbuf_r+0x1a>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 f81a 	bl	8008120 <__swsetup_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d0cb      	beq.n	8008088 <__swbuf_r+0x28>
 80080f0:	f04f 37ff 	mov.w	r7, #4294967295
 80080f4:	e7ea      	b.n	80080cc <__swbuf_r+0x6c>
 80080f6:	bf00      	nop
 80080f8:	0800933c 	.word	0x0800933c
 80080fc:	0800935c 	.word	0x0800935c
 8008100:	0800931c 	.word	0x0800931c

08008104 <__ascii_wctomb>:
 8008104:	b149      	cbz	r1, 800811a <__ascii_wctomb+0x16>
 8008106:	2aff      	cmp	r2, #255	; 0xff
 8008108:	bf85      	ittet	hi
 800810a:	238a      	movhi	r3, #138	; 0x8a
 800810c:	6003      	strhi	r3, [r0, #0]
 800810e:	700a      	strbls	r2, [r1, #0]
 8008110:	f04f 30ff 	movhi.w	r0, #4294967295
 8008114:	bf98      	it	ls
 8008116:	2001      	movls	r0, #1
 8008118:	4770      	bx	lr
 800811a:	4608      	mov	r0, r1
 800811c:	4770      	bx	lr
	...

08008120 <__swsetup_r>:
 8008120:	4b32      	ldr	r3, [pc, #200]	; (80081ec <__swsetup_r+0xcc>)
 8008122:	b570      	push	{r4, r5, r6, lr}
 8008124:	681d      	ldr	r5, [r3, #0]
 8008126:	4606      	mov	r6, r0
 8008128:	460c      	mov	r4, r1
 800812a:	b125      	cbz	r5, 8008136 <__swsetup_r+0x16>
 800812c:	69ab      	ldr	r3, [r5, #24]
 800812e:	b913      	cbnz	r3, 8008136 <__swsetup_r+0x16>
 8008130:	4628      	mov	r0, r5
 8008132:	f000 f985 	bl	8008440 <__sinit>
 8008136:	4b2e      	ldr	r3, [pc, #184]	; (80081f0 <__swsetup_r+0xd0>)
 8008138:	429c      	cmp	r4, r3
 800813a:	d10f      	bne.n	800815c <__swsetup_r+0x3c>
 800813c:	686c      	ldr	r4, [r5, #4]
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008144:	0719      	lsls	r1, r3, #28
 8008146:	d42c      	bmi.n	80081a2 <__swsetup_r+0x82>
 8008148:	06dd      	lsls	r5, r3, #27
 800814a:	d411      	bmi.n	8008170 <__swsetup_r+0x50>
 800814c:	2309      	movs	r3, #9
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	f04f 30ff 	mov.w	r0, #4294967295
 800815a:	e03e      	b.n	80081da <__swsetup_r+0xba>
 800815c:	4b25      	ldr	r3, [pc, #148]	; (80081f4 <__swsetup_r+0xd4>)
 800815e:	429c      	cmp	r4, r3
 8008160:	d101      	bne.n	8008166 <__swsetup_r+0x46>
 8008162:	68ac      	ldr	r4, [r5, #8]
 8008164:	e7eb      	b.n	800813e <__swsetup_r+0x1e>
 8008166:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <__swsetup_r+0xd8>)
 8008168:	429c      	cmp	r4, r3
 800816a:	bf08      	it	eq
 800816c:	68ec      	ldreq	r4, [r5, #12]
 800816e:	e7e6      	b.n	800813e <__swsetup_r+0x1e>
 8008170:	0758      	lsls	r0, r3, #29
 8008172:	d512      	bpl.n	800819a <__swsetup_r+0x7a>
 8008174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008176:	b141      	cbz	r1, 800818a <__swsetup_r+0x6a>
 8008178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800817c:	4299      	cmp	r1, r3
 800817e:	d002      	beq.n	8008186 <__swsetup_r+0x66>
 8008180:	4630      	mov	r0, r6
 8008182:	f7ff fb6f 	bl	8007864 <_free_r>
 8008186:	2300      	movs	r3, #0
 8008188:	6363      	str	r3, [r4, #52]	; 0x34
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	2300      	movs	r3, #0
 8008194:	6063      	str	r3, [r4, #4]
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	f043 0308 	orr.w	r3, r3, #8
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	b94b      	cbnz	r3, 80081ba <__swsetup_r+0x9a>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b0:	d003      	beq.n	80081ba <__swsetup_r+0x9a>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4630      	mov	r0, r6
 80081b6:	f000 fa07 	bl	80085c8 <__smakebuf_r>
 80081ba:	89a0      	ldrh	r0, [r4, #12]
 80081bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081c0:	f010 0301 	ands.w	r3, r0, #1
 80081c4:	d00a      	beq.n	80081dc <__swsetup_r+0xbc>
 80081c6:	2300      	movs	r3, #0
 80081c8:	60a3      	str	r3, [r4, #8]
 80081ca:	6963      	ldr	r3, [r4, #20]
 80081cc:	425b      	negs	r3, r3
 80081ce:	61a3      	str	r3, [r4, #24]
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	b943      	cbnz	r3, 80081e6 <__swsetup_r+0xc6>
 80081d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081d8:	d1ba      	bne.n	8008150 <__swsetup_r+0x30>
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	0781      	lsls	r1, r0, #30
 80081de:	bf58      	it	pl
 80081e0:	6963      	ldrpl	r3, [r4, #20]
 80081e2:	60a3      	str	r3, [r4, #8]
 80081e4:	e7f4      	b.n	80081d0 <__swsetup_r+0xb0>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e7f7      	b.n	80081da <__swsetup_r+0xba>
 80081ea:	bf00      	nop
 80081ec:	2000001c 	.word	0x2000001c
 80081f0:	0800933c 	.word	0x0800933c
 80081f4:	0800935c 	.word	0x0800935c
 80081f8:	0800931c 	.word	0x0800931c

080081fc <abort>:
 80081fc:	b508      	push	{r3, lr}
 80081fe:	2006      	movs	r0, #6
 8008200:	f000 fa52 	bl	80086a8 <raise>
 8008204:	2001      	movs	r0, #1
 8008206:	f7f9 fed1 	bl	8001fac <_exit>
	...

0800820c <__sflush_r>:
 800820c:	898a      	ldrh	r2, [r1, #12]
 800820e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	4605      	mov	r5, r0
 8008214:	0710      	lsls	r0, r2, #28
 8008216:	460c      	mov	r4, r1
 8008218:	d458      	bmi.n	80082cc <__sflush_r+0xc0>
 800821a:	684b      	ldr	r3, [r1, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc05      	bgt.n	800822c <__sflush_r+0x20>
 8008220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	dc02      	bgt.n	800822c <__sflush_r+0x20>
 8008226:	2000      	movs	r0, #0
 8008228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800822e:	2e00      	cmp	r6, #0
 8008230:	d0f9      	beq.n	8008226 <__sflush_r+0x1a>
 8008232:	2300      	movs	r3, #0
 8008234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008238:	682f      	ldr	r7, [r5, #0]
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	d032      	beq.n	80082a4 <__sflush_r+0x98>
 800823e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	075a      	lsls	r2, r3, #29
 8008244:	d505      	bpl.n	8008252 <__sflush_r+0x46>
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	1ac0      	subs	r0, r0, r3
 800824a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800824c:	b10b      	cbz	r3, 8008252 <__sflush_r+0x46>
 800824e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008250:	1ac0      	subs	r0, r0, r3
 8008252:	2300      	movs	r3, #0
 8008254:	4602      	mov	r2, r0
 8008256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008258:	6a21      	ldr	r1, [r4, #32]
 800825a:	4628      	mov	r0, r5
 800825c:	47b0      	blx	r6
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	d106      	bne.n	8008272 <__sflush_r+0x66>
 8008264:	6829      	ldr	r1, [r5, #0]
 8008266:	291d      	cmp	r1, #29
 8008268:	d82c      	bhi.n	80082c4 <__sflush_r+0xb8>
 800826a:	4a2a      	ldr	r2, [pc, #168]	; (8008314 <__sflush_r+0x108>)
 800826c:	40ca      	lsrs	r2, r1
 800826e:	07d6      	lsls	r6, r2, #31
 8008270:	d528      	bpl.n	80082c4 <__sflush_r+0xb8>
 8008272:	2200      	movs	r2, #0
 8008274:	6062      	str	r2, [r4, #4]
 8008276:	04d9      	lsls	r1, r3, #19
 8008278:	6922      	ldr	r2, [r4, #16]
 800827a:	6022      	str	r2, [r4, #0]
 800827c:	d504      	bpl.n	8008288 <__sflush_r+0x7c>
 800827e:	1c42      	adds	r2, r0, #1
 8008280:	d101      	bne.n	8008286 <__sflush_r+0x7a>
 8008282:	682b      	ldr	r3, [r5, #0]
 8008284:	b903      	cbnz	r3, 8008288 <__sflush_r+0x7c>
 8008286:	6560      	str	r0, [r4, #84]	; 0x54
 8008288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800828a:	602f      	str	r7, [r5, #0]
 800828c:	2900      	cmp	r1, #0
 800828e:	d0ca      	beq.n	8008226 <__sflush_r+0x1a>
 8008290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008294:	4299      	cmp	r1, r3
 8008296:	d002      	beq.n	800829e <__sflush_r+0x92>
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff fae3 	bl	8007864 <_free_r>
 800829e:	2000      	movs	r0, #0
 80082a0:	6360      	str	r0, [r4, #52]	; 0x34
 80082a2:	e7c1      	b.n	8008228 <__sflush_r+0x1c>
 80082a4:	6a21      	ldr	r1, [r4, #32]
 80082a6:	2301      	movs	r3, #1
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b0      	blx	r6
 80082ac:	1c41      	adds	r1, r0, #1
 80082ae:	d1c7      	bne.n	8008240 <__sflush_r+0x34>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0c4      	beq.n	8008240 <__sflush_r+0x34>
 80082b6:	2b1d      	cmp	r3, #29
 80082b8:	d001      	beq.n	80082be <__sflush_r+0xb2>
 80082ba:	2b16      	cmp	r3, #22
 80082bc:	d101      	bne.n	80082c2 <__sflush_r+0xb6>
 80082be:	602f      	str	r7, [r5, #0]
 80082c0:	e7b1      	b.n	8008226 <__sflush_r+0x1a>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	e7ad      	b.n	8008228 <__sflush_r+0x1c>
 80082cc:	690f      	ldr	r7, [r1, #16]
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	d0a9      	beq.n	8008226 <__sflush_r+0x1a>
 80082d2:	0793      	lsls	r3, r2, #30
 80082d4:	680e      	ldr	r6, [r1, #0]
 80082d6:	bf08      	it	eq
 80082d8:	694b      	ldreq	r3, [r1, #20]
 80082da:	600f      	str	r7, [r1, #0]
 80082dc:	bf18      	it	ne
 80082de:	2300      	movne	r3, #0
 80082e0:	eba6 0807 	sub.w	r8, r6, r7
 80082e4:	608b      	str	r3, [r1, #8]
 80082e6:	f1b8 0f00 	cmp.w	r8, #0
 80082ea:	dd9c      	ble.n	8008226 <__sflush_r+0x1a>
 80082ec:	6a21      	ldr	r1, [r4, #32]
 80082ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082f0:	4643      	mov	r3, r8
 80082f2:	463a      	mov	r2, r7
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b0      	blx	r6
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dc06      	bgt.n	800830a <__sflush_r+0xfe>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	e78e      	b.n	8008228 <__sflush_r+0x1c>
 800830a:	4407      	add	r7, r0
 800830c:	eba8 0800 	sub.w	r8, r8, r0
 8008310:	e7e9      	b.n	80082e6 <__sflush_r+0xda>
 8008312:	bf00      	nop
 8008314:	20400001 	.word	0x20400001

08008318 <_fflush_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	690b      	ldr	r3, [r1, #16]
 800831c:	4605      	mov	r5, r0
 800831e:	460c      	mov	r4, r1
 8008320:	b913      	cbnz	r3, 8008328 <_fflush_r+0x10>
 8008322:	2500      	movs	r5, #0
 8008324:	4628      	mov	r0, r5
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	b118      	cbz	r0, 8008332 <_fflush_r+0x1a>
 800832a:	6983      	ldr	r3, [r0, #24]
 800832c:	b90b      	cbnz	r3, 8008332 <_fflush_r+0x1a>
 800832e:	f000 f887 	bl	8008440 <__sinit>
 8008332:	4b14      	ldr	r3, [pc, #80]	; (8008384 <_fflush_r+0x6c>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d11b      	bne.n	8008370 <_fflush_r+0x58>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0ef      	beq.n	8008322 <_fflush_r+0xa>
 8008342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008344:	07d0      	lsls	r0, r2, #31
 8008346:	d404      	bmi.n	8008352 <_fflush_r+0x3a>
 8008348:	0599      	lsls	r1, r3, #22
 800834a:	d402      	bmi.n	8008352 <_fflush_r+0x3a>
 800834c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834e:	f000 f915 	bl	800857c <__retarget_lock_acquire_recursive>
 8008352:	4628      	mov	r0, r5
 8008354:	4621      	mov	r1, r4
 8008356:	f7ff ff59 	bl	800820c <__sflush_r>
 800835a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800835c:	07da      	lsls	r2, r3, #31
 800835e:	4605      	mov	r5, r0
 8008360:	d4e0      	bmi.n	8008324 <_fflush_r+0xc>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	059b      	lsls	r3, r3, #22
 8008366:	d4dd      	bmi.n	8008324 <_fflush_r+0xc>
 8008368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836a:	f000 f908 	bl	800857e <__retarget_lock_release_recursive>
 800836e:	e7d9      	b.n	8008324 <_fflush_r+0xc>
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <_fflush_r+0x70>)
 8008372:	429c      	cmp	r4, r3
 8008374:	d101      	bne.n	800837a <_fflush_r+0x62>
 8008376:	68ac      	ldr	r4, [r5, #8]
 8008378:	e7df      	b.n	800833a <_fflush_r+0x22>
 800837a:	4b04      	ldr	r3, [pc, #16]	; (800838c <_fflush_r+0x74>)
 800837c:	429c      	cmp	r4, r3
 800837e:	bf08      	it	eq
 8008380:	68ec      	ldreq	r4, [r5, #12]
 8008382:	e7da      	b.n	800833a <_fflush_r+0x22>
 8008384:	0800933c 	.word	0x0800933c
 8008388:	0800935c 	.word	0x0800935c
 800838c:	0800931c 	.word	0x0800931c

08008390 <std>:
 8008390:	2300      	movs	r3, #0
 8008392:	b510      	push	{r4, lr}
 8008394:	4604      	mov	r4, r0
 8008396:	e9c0 3300 	strd	r3, r3, [r0]
 800839a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800839e:	6083      	str	r3, [r0, #8]
 80083a0:	8181      	strh	r1, [r0, #12]
 80083a2:	6643      	str	r3, [r0, #100]	; 0x64
 80083a4:	81c2      	strh	r2, [r0, #14]
 80083a6:	6183      	str	r3, [r0, #24]
 80083a8:	4619      	mov	r1, r3
 80083aa:	2208      	movs	r2, #8
 80083ac:	305c      	adds	r0, #92	; 0x5c
 80083ae:	f7fd fbb3 	bl	8005b18 <memset>
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <std+0x38>)
 80083b4:	6263      	str	r3, [r4, #36]	; 0x24
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std+0x3c>)
 80083b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x40>)
 80083bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x44>)
 80083c0:	6224      	str	r4, [r4, #32]
 80083c2:	6323      	str	r3, [r4, #48]	; 0x30
 80083c4:	bd10      	pop	{r4, pc}
 80083c6:	bf00      	nop
 80083c8:	080086e1 	.word	0x080086e1
 80083cc:	08008703 	.word	0x08008703
 80083d0:	0800873b 	.word	0x0800873b
 80083d4:	0800875f 	.word	0x0800875f

080083d8 <_cleanup_r>:
 80083d8:	4901      	ldr	r1, [pc, #4]	; (80083e0 <_cleanup_r+0x8>)
 80083da:	f000 b8af 	b.w	800853c <_fwalk_reent>
 80083de:	bf00      	nop
 80083e0:	08008319 	.word	0x08008319

080083e4 <__sfmoreglue>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	1e4a      	subs	r2, r1, #1
 80083e8:	2568      	movs	r5, #104	; 0x68
 80083ea:	4355      	muls	r5, r2
 80083ec:	460e      	mov	r6, r1
 80083ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083f2:	f7ff fa87 	bl	8007904 <_malloc_r>
 80083f6:	4604      	mov	r4, r0
 80083f8:	b140      	cbz	r0, 800840c <__sfmoreglue+0x28>
 80083fa:	2100      	movs	r1, #0
 80083fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008400:	300c      	adds	r0, #12
 8008402:	60a0      	str	r0, [r4, #8]
 8008404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008408:	f7fd fb86 	bl	8005b18 <memset>
 800840c:	4620      	mov	r0, r4
 800840e:	bd70      	pop	{r4, r5, r6, pc}

08008410 <__sfp_lock_acquire>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__sfp_lock_acquire+0x8>)
 8008412:	f000 b8b3 	b.w	800857c <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	20000438 	.word	0x20000438

0800841c <__sfp_lock_release>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__sfp_lock_release+0x8>)
 800841e:	f000 b8ae 	b.w	800857e <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	20000438 	.word	0x20000438

08008428 <__sinit_lock_acquire>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__sinit_lock_acquire+0x8>)
 800842a:	f000 b8a7 	b.w	800857c <__retarget_lock_acquire_recursive>
 800842e:	bf00      	nop
 8008430:	20000433 	.word	0x20000433

08008434 <__sinit_lock_release>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__sinit_lock_release+0x8>)
 8008436:	f000 b8a2 	b.w	800857e <__retarget_lock_release_recursive>
 800843a:	bf00      	nop
 800843c:	20000433 	.word	0x20000433

08008440 <__sinit>:
 8008440:	b510      	push	{r4, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	f7ff fff0 	bl	8008428 <__sinit_lock_acquire>
 8008448:	69a3      	ldr	r3, [r4, #24]
 800844a:	b11b      	cbz	r3, 8008454 <__sinit+0x14>
 800844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008450:	f7ff bff0 	b.w	8008434 <__sinit_lock_release>
 8008454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008458:	6523      	str	r3, [r4, #80]	; 0x50
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <__sinit+0x68>)
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <__sinit+0x6c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	62a2      	str	r2, [r4, #40]	; 0x28
 8008462:	42a3      	cmp	r3, r4
 8008464:	bf04      	itt	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	61a3      	streq	r3, [r4, #24]
 800846a:	4620      	mov	r0, r4
 800846c:	f000 f820 	bl	80084b0 <__sfp>
 8008470:	6060      	str	r0, [r4, #4]
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f81c 	bl	80084b0 <__sfp>
 8008478:	60a0      	str	r0, [r4, #8]
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f818 	bl	80084b0 <__sfp>
 8008480:	2200      	movs	r2, #0
 8008482:	60e0      	str	r0, [r4, #12]
 8008484:	2104      	movs	r1, #4
 8008486:	6860      	ldr	r0, [r4, #4]
 8008488:	f7ff ff82 	bl	8008390 <std>
 800848c:	68a0      	ldr	r0, [r4, #8]
 800848e:	2201      	movs	r2, #1
 8008490:	2109      	movs	r1, #9
 8008492:	f7ff ff7d 	bl	8008390 <std>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	2202      	movs	r2, #2
 800849a:	2112      	movs	r1, #18
 800849c:	f7ff ff78 	bl	8008390 <std>
 80084a0:	2301      	movs	r3, #1
 80084a2:	61a3      	str	r3, [r4, #24]
 80084a4:	e7d2      	b.n	800844c <__sinit+0xc>
 80084a6:	bf00      	nop
 80084a8:	08008f9c 	.word	0x08008f9c
 80084ac:	080083d9 	.word	0x080083d9

080084b0 <__sfp>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	4607      	mov	r7, r0
 80084b4:	f7ff ffac 	bl	8008410 <__sfp_lock_acquire>
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <__sfp+0x84>)
 80084ba:	681e      	ldr	r6, [r3, #0]
 80084bc:	69b3      	ldr	r3, [r6, #24]
 80084be:	b913      	cbnz	r3, 80084c6 <__sfp+0x16>
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff ffbd 	bl	8008440 <__sinit>
 80084c6:	3648      	adds	r6, #72	; 0x48
 80084c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	d503      	bpl.n	80084d8 <__sfp+0x28>
 80084d0:	6833      	ldr	r3, [r6, #0]
 80084d2:	b30b      	cbz	r3, 8008518 <__sfp+0x68>
 80084d4:	6836      	ldr	r6, [r6, #0]
 80084d6:	e7f7      	b.n	80084c8 <__sfp+0x18>
 80084d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084dc:	b9d5      	cbnz	r5, 8008514 <__sfp+0x64>
 80084de:	4b16      	ldr	r3, [pc, #88]	; (8008538 <__sfp+0x88>)
 80084e0:	60e3      	str	r3, [r4, #12]
 80084e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084e6:	6665      	str	r5, [r4, #100]	; 0x64
 80084e8:	f000 f847 	bl	800857a <__retarget_lock_init_recursive>
 80084ec:	f7ff ff96 	bl	800841c <__sfp_lock_release>
 80084f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084f8:	6025      	str	r5, [r4, #0]
 80084fa:	61a5      	str	r5, [r4, #24]
 80084fc:	2208      	movs	r2, #8
 80084fe:	4629      	mov	r1, r5
 8008500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008504:	f7fd fb08 	bl	8005b18 <memset>
 8008508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800850c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008510:	4620      	mov	r0, r4
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008514:	3468      	adds	r4, #104	; 0x68
 8008516:	e7d9      	b.n	80084cc <__sfp+0x1c>
 8008518:	2104      	movs	r1, #4
 800851a:	4638      	mov	r0, r7
 800851c:	f7ff ff62 	bl	80083e4 <__sfmoreglue>
 8008520:	4604      	mov	r4, r0
 8008522:	6030      	str	r0, [r6, #0]
 8008524:	2800      	cmp	r0, #0
 8008526:	d1d5      	bne.n	80084d4 <__sfp+0x24>
 8008528:	f7ff ff78 	bl	800841c <__sfp_lock_release>
 800852c:	230c      	movs	r3, #12
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	e7ee      	b.n	8008510 <__sfp+0x60>
 8008532:	bf00      	nop
 8008534:	08008f9c 	.word	0x08008f9c
 8008538:	ffff0001 	.word	0xffff0001

0800853c <_fwalk_reent>:
 800853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008540:	4606      	mov	r6, r0
 8008542:	4688      	mov	r8, r1
 8008544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008548:	2700      	movs	r7, #0
 800854a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800854e:	f1b9 0901 	subs.w	r9, r9, #1
 8008552:	d505      	bpl.n	8008560 <_fwalk_reent+0x24>
 8008554:	6824      	ldr	r4, [r4, #0]
 8008556:	2c00      	cmp	r4, #0
 8008558:	d1f7      	bne.n	800854a <_fwalk_reent+0xe>
 800855a:	4638      	mov	r0, r7
 800855c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008560:	89ab      	ldrh	r3, [r5, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d907      	bls.n	8008576 <_fwalk_reent+0x3a>
 8008566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800856a:	3301      	adds	r3, #1
 800856c:	d003      	beq.n	8008576 <_fwalk_reent+0x3a>
 800856e:	4629      	mov	r1, r5
 8008570:	4630      	mov	r0, r6
 8008572:	47c0      	blx	r8
 8008574:	4307      	orrs	r7, r0
 8008576:	3568      	adds	r5, #104	; 0x68
 8008578:	e7e9      	b.n	800854e <_fwalk_reent+0x12>

0800857a <__retarget_lock_init_recursive>:
 800857a:	4770      	bx	lr

0800857c <__retarget_lock_acquire_recursive>:
 800857c:	4770      	bx	lr

0800857e <__retarget_lock_release_recursive>:
 800857e:	4770      	bx	lr

08008580 <__swhatbuf_r>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	460e      	mov	r6, r1
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	2900      	cmp	r1, #0
 800858a:	b096      	sub	sp, #88	; 0x58
 800858c:	4614      	mov	r4, r2
 800858e:	461d      	mov	r5, r3
 8008590:	da07      	bge.n	80085a2 <__swhatbuf_r+0x22>
 8008592:	2300      	movs	r3, #0
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	89b3      	ldrh	r3, [r6, #12]
 8008598:	061a      	lsls	r2, r3, #24
 800859a:	d410      	bmi.n	80085be <__swhatbuf_r+0x3e>
 800859c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a0:	e00e      	b.n	80085c0 <__swhatbuf_r+0x40>
 80085a2:	466a      	mov	r2, sp
 80085a4:	f000 f902 	bl	80087ac <_fstat_r>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	dbf2      	blt.n	8008592 <__swhatbuf_r+0x12>
 80085ac:	9a01      	ldr	r2, [sp, #4]
 80085ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085b6:	425a      	negs	r2, r3
 80085b8:	415a      	adcs	r2, r3
 80085ba:	602a      	str	r2, [r5, #0]
 80085bc:	e7ee      	b.n	800859c <__swhatbuf_r+0x1c>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	2000      	movs	r0, #0
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	b016      	add	sp, #88	; 0x58
 80085c6:	bd70      	pop	{r4, r5, r6, pc}

080085c8 <__smakebuf_r>:
 80085c8:	898b      	ldrh	r3, [r1, #12]
 80085ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085cc:	079d      	lsls	r5, r3, #30
 80085ce:	4606      	mov	r6, r0
 80085d0:	460c      	mov	r4, r1
 80085d2:	d507      	bpl.n	80085e4 <__smakebuf_r+0x1c>
 80085d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	2301      	movs	r3, #1
 80085de:	6163      	str	r3, [r4, #20]
 80085e0:	b002      	add	sp, #8
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	ab01      	add	r3, sp, #4
 80085e6:	466a      	mov	r2, sp
 80085e8:	f7ff ffca 	bl	8008580 <__swhatbuf_r>
 80085ec:	9900      	ldr	r1, [sp, #0]
 80085ee:	4605      	mov	r5, r0
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff f987 	bl	8007904 <_malloc_r>
 80085f6:	b948      	cbnz	r0, 800860c <__smakebuf_r+0x44>
 80085f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fc:	059a      	lsls	r2, r3, #22
 80085fe:	d4ef      	bmi.n	80085e0 <__smakebuf_r+0x18>
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	f043 0302 	orr.w	r3, r3, #2
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	e7e3      	b.n	80085d4 <__smakebuf_r+0xc>
 800860c:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <__smakebuf_r+0x7c>)
 800860e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	9b00      	ldr	r3, [sp, #0]
 800861c:	6163      	str	r3, [r4, #20]
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	6120      	str	r0, [r4, #16]
 8008622:	b15b      	cbz	r3, 800863c <__smakebuf_r+0x74>
 8008624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008628:	4630      	mov	r0, r6
 800862a:	f000 f8d1 	bl	80087d0 <_isatty_r>
 800862e:	b128      	cbz	r0, 800863c <__smakebuf_r+0x74>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	89a0      	ldrh	r0, [r4, #12]
 800863e:	4305      	orrs	r5, r0
 8008640:	81a5      	strh	r5, [r4, #12]
 8008642:	e7cd      	b.n	80085e0 <__smakebuf_r+0x18>
 8008644:	080083d9 	.word	0x080083d9

08008648 <_malloc_usable_size_r>:
 8008648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800864c:	1f18      	subs	r0, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfbc      	itt	lt
 8008652:	580b      	ldrlt	r3, [r1, r0]
 8008654:	18c0      	addlt	r0, r0, r3
 8008656:	4770      	bx	lr

08008658 <_raise_r>:
 8008658:	291f      	cmp	r1, #31
 800865a:	b538      	push	{r3, r4, r5, lr}
 800865c:	4604      	mov	r4, r0
 800865e:	460d      	mov	r5, r1
 8008660:	d904      	bls.n	800866c <_raise_r+0x14>
 8008662:	2316      	movs	r3, #22
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800866e:	b112      	cbz	r2, 8008676 <_raise_r+0x1e>
 8008670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008674:	b94b      	cbnz	r3, 800868a <_raise_r+0x32>
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f830 	bl	80086dc <_getpid_r>
 800867c:	462a      	mov	r2, r5
 800867e:	4601      	mov	r1, r0
 8008680:	4620      	mov	r0, r4
 8008682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008686:	f000 b817 	b.w	80086b8 <_kill_r>
 800868a:	2b01      	cmp	r3, #1
 800868c:	d00a      	beq.n	80086a4 <_raise_r+0x4c>
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	d103      	bne.n	800869a <_raise_r+0x42>
 8008692:	2316      	movs	r3, #22
 8008694:	6003      	str	r3, [r0, #0]
 8008696:	2001      	movs	r0, #1
 8008698:	e7e7      	b.n	800866a <_raise_r+0x12>
 800869a:	2400      	movs	r4, #0
 800869c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086a0:	4628      	mov	r0, r5
 80086a2:	4798      	blx	r3
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7e0      	b.n	800866a <_raise_r+0x12>

080086a8 <raise>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <raise+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f7ff bfd3 	b.w	8008658 <_raise_r>
 80086b2:	bf00      	nop
 80086b4:	2000001c 	.word	0x2000001c

080086b8 <_kill_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d07      	ldr	r5, [pc, #28]	; (80086d8 <_kill_r+0x20>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7f9 fc61 	bl	8001f8c <_kill>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_kill_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_kill_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	2000042c 	.word	0x2000042c

080086dc <_getpid_r>:
 80086dc:	f7f9 bc4e 	b.w	8001f7c <_getpid>

080086e0 <__sread>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	460c      	mov	r4, r1
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	f000 f894 	bl	8008814 <_read_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	bfab      	itete	ge
 80086f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086f2:	89a3      	ldrhlt	r3, [r4, #12]
 80086f4:	181b      	addge	r3, r3, r0
 80086f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086fa:	bfac      	ite	ge
 80086fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086fe:	81a3      	strhlt	r3, [r4, #12]
 8008700:	bd10      	pop	{r4, pc}

08008702 <__swrite>:
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	461f      	mov	r7, r3
 8008708:	898b      	ldrh	r3, [r1, #12]
 800870a:	05db      	lsls	r3, r3, #23
 800870c:	4605      	mov	r5, r0
 800870e:	460c      	mov	r4, r1
 8008710:	4616      	mov	r6, r2
 8008712:	d505      	bpl.n	8008720 <__swrite+0x1e>
 8008714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008718:	2302      	movs	r3, #2
 800871a:	2200      	movs	r2, #0
 800871c:	f000 f868 	bl	80087f0 <_lseek_r>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	4632      	mov	r2, r6
 800872e:	463b      	mov	r3, r7
 8008730:	4628      	mov	r0, r5
 8008732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	f000 b817 	b.w	8008768 <_write_r>

0800873a <__sseek>:
 800873a:	b510      	push	{r4, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 f855 	bl	80087f0 <_lseek_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	bf15      	itete	ne
 800874c:	6560      	strne	r0, [r4, #84]	; 0x54
 800874e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008756:	81a3      	strheq	r3, [r4, #12]
 8008758:	bf18      	it	ne
 800875a:	81a3      	strhne	r3, [r4, #12]
 800875c:	bd10      	pop	{r4, pc}

0800875e <__sclose>:
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 b813 	b.w	800878c <_close_r>
	...

08008768 <_write_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_write_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7f9 fc3f 	bl	8001ffa <_write>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_write_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_write_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	2000042c 	.word	0x2000042c

0800878c <_close_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d06      	ldr	r5, [pc, #24]	; (80087a8 <_close_r+0x1c>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7f9 fc4b 	bl	8002032 <_close>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_close_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_close_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	2000042c 	.word	0x2000042c

080087ac <_fstat_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	; (80087cc <_fstat_r+0x20>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	f7f9 fc46 	bl	800204a <_fstat>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d102      	bne.n	80087c8 <_fstat_r+0x1c>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	b103      	cbz	r3, 80087c8 <_fstat_r+0x1c>
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop
 80087cc:	2000042c 	.word	0x2000042c

080087d0 <_isatty_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d06      	ldr	r5, [pc, #24]	; (80087ec <_isatty_r+0x1c>)
 80087d4:	2300      	movs	r3, #0
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 fc45 	bl	800206a <_isatty>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_isatty_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_isatty_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	2000042c 	.word	0x2000042c

080087f0 <_lseek_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d07      	ldr	r5, [pc, #28]	; (8008810 <_lseek_r+0x20>)
 80087f4:	4604      	mov	r4, r0
 80087f6:	4608      	mov	r0, r1
 80087f8:	4611      	mov	r1, r2
 80087fa:	2200      	movs	r2, #0
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7f9 fc3e 	bl	8002080 <_lseek>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_lseek_r+0x1e>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_lseek_r+0x1e>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	2000042c 	.word	0x2000042c

08008814 <_read_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d07      	ldr	r5, [pc, #28]	; (8008834 <_read_r+0x20>)
 8008818:	4604      	mov	r4, r0
 800881a:	4608      	mov	r0, r1
 800881c:	4611      	mov	r1, r2
 800881e:	2200      	movs	r2, #0
 8008820:	602a      	str	r2, [r5, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	f7f9 fbcc 	bl	8001fc0 <_read>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_read_r+0x1e>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_read_r+0x1e>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	2000042c 	.word	0x2000042c

08008838 <atan2>:
 8008838:	f000 b836 	b.w	80088a8 <__ieee754_atan2>

0800883c <sqrt>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	ed2d 8b02 	vpush	{d8}
 8008842:	ec55 4b10 	vmov	r4, r5, d0
 8008846:	f000 f8f9 	bl	8008a3c <__ieee754_sqrt>
 800884a:	4b15      	ldr	r3, [pc, #84]	; (80088a0 <sqrt+0x64>)
 800884c:	eeb0 8a40 	vmov.f32	s16, s0
 8008850:	eef0 8a60 	vmov.f32	s17, s1
 8008854:	f993 3000 	ldrsb.w	r3, [r3]
 8008858:	3301      	adds	r3, #1
 800885a:	d019      	beq.n	8008890 <sqrt+0x54>
 800885c:	4622      	mov	r2, r4
 800885e:	462b      	mov	r3, r5
 8008860:	4620      	mov	r0, r4
 8008862:	4629      	mov	r1, r5
 8008864:	f7f8 f982 	bl	8000b6c <__aeabi_dcmpun>
 8008868:	b990      	cbnz	r0, 8008890 <sqrt+0x54>
 800886a:	2200      	movs	r2, #0
 800886c:	2300      	movs	r3, #0
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f8 f953 	bl	8000b1c <__aeabi_dcmplt>
 8008876:	b158      	cbz	r0, 8008890 <sqrt+0x54>
 8008878:	f7fd f916 	bl	8005aa8 <__errno>
 800887c:	2321      	movs	r3, #33	; 0x21
 800887e:	6003      	str	r3, [r0, #0]
 8008880:	2200      	movs	r2, #0
 8008882:	2300      	movs	r3, #0
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
 8008888:	f7f8 f800 	bl	800088c <__aeabi_ddiv>
 800888c:	ec41 0b18 	vmov	d8, r0, r1
 8008890:	eeb0 0a48 	vmov.f32	s0, s16
 8008894:	eef0 0a68 	vmov.f32	s1, s17
 8008898:	ecbd 8b02 	vpop	{d8}
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	bf00      	nop
 80088a0:	200001ec 	.word	0x200001ec
 80088a4:	00000000 	.word	0x00000000

080088a8 <__ieee754_atan2>:
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	ec57 6b11 	vmov	r6, r7, d1
 80088b0:	4273      	negs	r3, r6
 80088b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008a38 <__ieee754_atan2+0x190>
 80088b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80088ba:	4333      	orrs	r3, r6
 80088bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088c0:	4573      	cmp	r3, lr
 80088c2:	ec51 0b10 	vmov	r0, r1, d0
 80088c6:	ee11 8a10 	vmov	r8, s2
 80088ca:	d80a      	bhi.n	80088e2 <__ieee754_atan2+0x3a>
 80088cc:	4244      	negs	r4, r0
 80088ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088d2:	4304      	orrs	r4, r0
 80088d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80088d8:	4574      	cmp	r4, lr
 80088da:	ee10 9a10 	vmov	r9, s0
 80088de:	468c      	mov	ip, r1
 80088e0:	d907      	bls.n	80088f2 <__ieee754_atan2+0x4a>
 80088e2:	4632      	mov	r2, r6
 80088e4:	463b      	mov	r3, r7
 80088e6:	f7f7 fcf1 	bl	80002cc <__adddf3>
 80088ea:	ec41 0b10 	vmov	d0, r0, r1
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80088f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088fa:	4334      	orrs	r4, r6
 80088fc:	d103      	bne.n	8008906 <__ieee754_atan2+0x5e>
 80088fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008902:	f000 b951 	b.w	8008ba8 <atan>
 8008906:	17bc      	asrs	r4, r7, #30
 8008908:	f004 0402 	and.w	r4, r4, #2
 800890c:	ea53 0909 	orrs.w	r9, r3, r9
 8008910:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008914:	d107      	bne.n	8008926 <__ieee754_atan2+0x7e>
 8008916:	2c02      	cmp	r4, #2
 8008918:	d060      	beq.n	80089dc <__ieee754_atan2+0x134>
 800891a:	2c03      	cmp	r4, #3
 800891c:	d1e5      	bne.n	80088ea <__ieee754_atan2+0x42>
 800891e:	a142      	add	r1, pc, #264	; (adr r1, 8008a28 <__ieee754_atan2+0x180>)
 8008920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008924:	e7e1      	b.n	80088ea <__ieee754_atan2+0x42>
 8008926:	ea52 0808 	orrs.w	r8, r2, r8
 800892a:	d106      	bne.n	800893a <__ieee754_atan2+0x92>
 800892c:	f1bc 0f00 	cmp.w	ip, #0
 8008930:	da5f      	bge.n	80089f2 <__ieee754_atan2+0x14a>
 8008932:	a13f      	add	r1, pc, #252	; (adr r1, 8008a30 <__ieee754_atan2+0x188>)
 8008934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008938:	e7d7      	b.n	80088ea <__ieee754_atan2+0x42>
 800893a:	4572      	cmp	r2, lr
 800893c:	d10f      	bne.n	800895e <__ieee754_atan2+0xb6>
 800893e:	4293      	cmp	r3, r2
 8008940:	f104 34ff 	add.w	r4, r4, #4294967295
 8008944:	d107      	bne.n	8008956 <__ieee754_atan2+0xae>
 8008946:	2c02      	cmp	r4, #2
 8008948:	d84c      	bhi.n	80089e4 <__ieee754_atan2+0x13c>
 800894a:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <__ieee754_atan2+0x178>)
 800894c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008950:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008954:	e7c9      	b.n	80088ea <__ieee754_atan2+0x42>
 8008956:	2c02      	cmp	r4, #2
 8008958:	d848      	bhi.n	80089ec <__ieee754_atan2+0x144>
 800895a:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <__ieee754_atan2+0x17c>)
 800895c:	e7f6      	b.n	800894c <__ieee754_atan2+0xa4>
 800895e:	4573      	cmp	r3, lr
 8008960:	d0e4      	beq.n	800892c <__ieee754_atan2+0x84>
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008968:	ea4f 5223 	mov.w	r2, r3, asr #20
 800896c:	da1e      	bge.n	80089ac <__ieee754_atan2+0x104>
 800896e:	2f00      	cmp	r7, #0
 8008970:	da01      	bge.n	8008976 <__ieee754_atan2+0xce>
 8008972:	323c      	adds	r2, #60	; 0x3c
 8008974:	db1e      	blt.n	80089b4 <__ieee754_atan2+0x10c>
 8008976:	4632      	mov	r2, r6
 8008978:	463b      	mov	r3, r7
 800897a:	f7f7 ff87 	bl	800088c <__aeabi_ddiv>
 800897e:	ec41 0b10 	vmov	d0, r0, r1
 8008982:	f000 fab1 	bl	8008ee8 <fabs>
 8008986:	f000 f90f 	bl	8008ba8 <atan>
 800898a:	ec51 0b10 	vmov	r0, r1, d0
 800898e:	2c01      	cmp	r4, #1
 8008990:	d013      	beq.n	80089ba <__ieee754_atan2+0x112>
 8008992:	2c02      	cmp	r4, #2
 8008994:	d015      	beq.n	80089c2 <__ieee754_atan2+0x11a>
 8008996:	2c00      	cmp	r4, #0
 8008998:	d0a7      	beq.n	80088ea <__ieee754_atan2+0x42>
 800899a:	a319      	add	r3, pc, #100	; (adr r3, 8008a00 <__ieee754_atan2+0x158>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fc92 	bl	80002c8 <__aeabi_dsub>
 80089a4:	a318      	add	r3, pc, #96	; (adr r3, 8008a08 <__ieee754_atan2+0x160>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	e014      	b.n	80089d6 <__ieee754_atan2+0x12e>
 80089ac:	a118      	add	r1, pc, #96	; (adr r1, 8008a10 <__ieee754_atan2+0x168>)
 80089ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b2:	e7ec      	b.n	800898e <__ieee754_atan2+0xe6>
 80089b4:	2000      	movs	r0, #0
 80089b6:	2100      	movs	r1, #0
 80089b8:	e7e9      	b.n	800898e <__ieee754_atan2+0xe6>
 80089ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089be:	4619      	mov	r1, r3
 80089c0:	e793      	b.n	80088ea <__ieee754_atan2+0x42>
 80089c2:	a30f      	add	r3, pc, #60	; (adr r3, 8008a00 <__ieee754_atan2+0x158>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fc7e 	bl	80002c8 <__aeabi_dsub>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	a10d      	add	r1, pc, #52	; (adr r1, 8008a08 <__ieee754_atan2+0x160>)
 80089d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d6:	f7f7 fc77 	bl	80002c8 <__aeabi_dsub>
 80089da:	e786      	b.n	80088ea <__ieee754_atan2+0x42>
 80089dc:	a10a      	add	r1, pc, #40	; (adr r1, 8008a08 <__ieee754_atan2+0x160>)
 80089de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e2:	e782      	b.n	80088ea <__ieee754_atan2+0x42>
 80089e4:	a10c      	add	r1, pc, #48	; (adr r1, 8008a18 <__ieee754_atan2+0x170>)
 80089e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ea:	e77e      	b.n	80088ea <__ieee754_atan2+0x42>
 80089ec:	2000      	movs	r0, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	e77b      	b.n	80088ea <__ieee754_atan2+0x42>
 80089f2:	a107      	add	r1, pc, #28	; (adr r1, 8008a10 <__ieee754_atan2+0x168>)
 80089f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f8:	e777      	b.n	80088ea <__ieee754_atan2+0x42>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
 8008a00:	33145c07 	.word	0x33145c07
 8008a04:	3ca1a626 	.word	0x3ca1a626
 8008a08:	54442d18 	.word	0x54442d18
 8008a0c:	400921fb 	.word	0x400921fb
 8008a10:	54442d18 	.word	0x54442d18
 8008a14:	3ff921fb 	.word	0x3ff921fb
 8008a18:	54442d18 	.word	0x54442d18
 8008a1c:	3fe921fb 	.word	0x3fe921fb
 8008a20:	08009380 	.word	0x08009380
 8008a24:	08009398 	.word	0x08009398
 8008a28:	54442d18 	.word	0x54442d18
 8008a2c:	c00921fb 	.word	0xc00921fb
 8008a30:	54442d18 	.word	0x54442d18
 8008a34:	bff921fb 	.word	0xbff921fb
 8008a38:	7ff00000 	.word	0x7ff00000

08008a3c <__ieee754_sqrt>:
 8008a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a40:	ec55 4b10 	vmov	r4, r5, d0
 8008a44:	4e56      	ldr	r6, [pc, #344]	; (8008ba0 <__ieee754_sqrt+0x164>)
 8008a46:	43ae      	bics	r6, r5
 8008a48:	ee10 0a10 	vmov	r0, s0
 8008a4c:	ee10 3a10 	vmov	r3, s0
 8008a50:	4629      	mov	r1, r5
 8008a52:	462a      	mov	r2, r5
 8008a54:	d110      	bne.n	8008a78 <__ieee754_sqrt+0x3c>
 8008a56:	ee10 2a10 	vmov	r2, s0
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	f7f7 fdec 	bl	8000638 <__aeabi_dmul>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f7 fc30 	bl	80002cc <__adddf3>
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	460d      	mov	r5, r1
 8008a70:	ec45 4b10 	vmov	d0, r4, r5
 8008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	dc10      	bgt.n	8008a9e <__ieee754_sqrt+0x62>
 8008a7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a80:	4330      	orrs	r0, r6
 8008a82:	d0f5      	beq.n	8008a70 <__ieee754_sqrt+0x34>
 8008a84:	b15d      	cbz	r5, 8008a9e <__ieee754_sqrt+0x62>
 8008a86:	ee10 2a10 	vmov	r2, s0
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	ee10 0a10 	vmov	r0, s0
 8008a90:	f7f7 fc1a 	bl	80002c8 <__aeabi_dsub>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	f7f7 fef8 	bl	800088c <__aeabi_ddiv>
 8008a9c:	e7e6      	b.n	8008a6c <__ieee754_sqrt+0x30>
 8008a9e:	1509      	asrs	r1, r1, #20
 8008aa0:	d076      	beq.n	8008b90 <__ieee754_sqrt+0x154>
 8008aa2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008aa6:	07ce      	lsls	r6, r1, #31
 8008aa8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008aac:	bf5e      	ittt	pl
 8008aae:	0fda      	lsrpl	r2, r3, #31
 8008ab0:	005b      	lslpl	r3, r3, #1
 8008ab2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008ab6:	0fda      	lsrs	r2, r3, #31
 8008ab8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008abc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	106d      	asrs	r5, r5, #1
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	f04f 0e16 	mov.w	lr, #22
 8008aca:	4684      	mov	ip, r0
 8008acc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ad0:	eb0c 0401 	add.w	r4, ip, r1
 8008ad4:	4294      	cmp	r4, r2
 8008ad6:	bfde      	ittt	le
 8008ad8:	1b12      	suble	r2, r2, r4
 8008ada:	eb04 0c01 	addle.w	ip, r4, r1
 8008ade:	1840      	addle	r0, r0, r1
 8008ae0:	0052      	lsls	r2, r2, #1
 8008ae2:	f1be 0e01 	subs.w	lr, lr, #1
 8008ae6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008aea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008aee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008af2:	d1ed      	bne.n	8008ad0 <__ieee754_sqrt+0x94>
 8008af4:	4671      	mov	r1, lr
 8008af6:	2720      	movs	r7, #32
 8008af8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008afc:	4562      	cmp	r2, ip
 8008afe:	eb04 060e 	add.w	r6, r4, lr
 8008b02:	dc02      	bgt.n	8008b0a <__ieee754_sqrt+0xce>
 8008b04:	d113      	bne.n	8008b2e <__ieee754_sqrt+0xf2>
 8008b06:	429e      	cmp	r6, r3
 8008b08:	d811      	bhi.n	8008b2e <__ieee754_sqrt+0xf2>
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	eb06 0e04 	add.w	lr, r6, r4
 8008b10:	da43      	bge.n	8008b9a <__ieee754_sqrt+0x15e>
 8008b12:	f1be 0f00 	cmp.w	lr, #0
 8008b16:	db40      	blt.n	8008b9a <__ieee754_sqrt+0x15e>
 8008b18:	f10c 0801 	add.w	r8, ip, #1
 8008b1c:	eba2 020c 	sub.w	r2, r2, ip
 8008b20:	429e      	cmp	r6, r3
 8008b22:	bf88      	it	hi
 8008b24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b28:	1b9b      	subs	r3, r3, r6
 8008b2a:	4421      	add	r1, r4
 8008b2c:	46c4      	mov	ip, r8
 8008b2e:	0052      	lsls	r2, r2, #1
 8008b30:	3f01      	subs	r7, #1
 8008b32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008b36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008b3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b3e:	d1dd      	bne.n	8008afc <__ieee754_sqrt+0xc0>
 8008b40:	4313      	orrs	r3, r2
 8008b42:	d006      	beq.n	8008b52 <__ieee754_sqrt+0x116>
 8008b44:	1c4c      	adds	r4, r1, #1
 8008b46:	bf13      	iteet	ne
 8008b48:	3101      	addne	r1, #1
 8008b4a:	3001      	addeq	r0, #1
 8008b4c:	4639      	moveq	r1, r7
 8008b4e:	f021 0101 	bicne.w	r1, r1, #1
 8008b52:	1043      	asrs	r3, r0, #1
 8008b54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b58:	0849      	lsrs	r1, r1, #1
 8008b5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b5e:	07c2      	lsls	r2, r0, #31
 8008b60:	bf48      	it	mi
 8008b62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008b66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	463d      	mov	r5, r7
 8008b6e:	e77f      	b.n	8008a70 <__ieee754_sqrt+0x34>
 8008b70:	0ada      	lsrs	r2, r3, #11
 8008b72:	3815      	subs	r0, #21
 8008b74:	055b      	lsls	r3, r3, #21
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	d0fa      	beq.n	8008b70 <__ieee754_sqrt+0x134>
 8008b7a:	02d7      	lsls	r7, r2, #11
 8008b7c:	d50a      	bpl.n	8008b94 <__ieee754_sqrt+0x158>
 8008b7e:	f1c1 0420 	rsb	r4, r1, #32
 8008b82:	fa23 f404 	lsr.w	r4, r3, r4
 8008b86:	1e4d      	subs	r5, r1, #1
 8008b88:	408b      	lsls	r3, r1
 8008b8a:	4322      	orrs	r2, r4
 8008b8c:	1b41      	subs	r1, r0, r5
 8008b8e:	e788      	b.n	8008aa2 <__ieee754_sqrt+0x66>
 8008b90:	4608      	mov	r0, r1
 8008b92:	e7f0      	b.n	8008b76 <__ieee754_sqrt+0x13a>
 8008b94:	0052      	lsls	r2, r2, #1
 8008b96:	3101      	adds	r1, #1
 8008b98:	e7ef      	b.n	8008b7a <__ieee754_sqrt+0x13e>
 8008b9a:	46e0      	mov	r8, ip
 8008b9c:	e7be      	b.n	8008b1c <__ieee754_sqrt+0xe0>
 8008b9e:	bf00      	nop
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	00000000 	.word	0x00000000

08008ba8 <atan>:
 8008ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	ec55 4b10 	vmov	r4, r5, d0
 8008bb0:	4bc3      	ldr	r3, [pc, #780]	; (8008ec0 <atan+0x318>)
 8008bb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008bb6:	429e      	cmp	r6, r3
 8008bb8:	46ab      	mov	fp, r5
 8008bba:	dd18      	ble.n	8008bee <atan+0x46>
 8008bbc:	4bc1      	ldr	r3, [pc, #772]	; (8008ec4 <atan+0x31c>)
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	dc01      	bgt.n	8008bc6 <atan+0x1e>
 8008bc2:	d109      	bne.n	8008bd8 <atan+0x30>
 8008bc4:	b144      	cbz	r4, 8008bd8 <atan+0x30>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fb7d 	bl	80002cc <__adddf3>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	e006      	b.n	8008be6 <atan+0x3e>
 8008bd8:	f1bb 0f00 	cmp.w	fp, #0
 8008bdc:	f300 8131 	bgt.w	8008e42 <atan+0x29a>
 8008be0:	a59b      	add	r5, pc, #620	; (adr r5, 8008e50 <atan+0x2a8>)
 8008be2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008be6:	ec45 4b10 	vmov	d0, r4, r5
 8008bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	4bb6      	ldr	r3, [pc, #728]	; (8008ec8 <atan+0x320>)
 8008bf0:	429e      	cmp	r6, r3
 8008bf2:	dc14      	bgt.n	8008c1e <atan+0x76>
 8008bf4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	dc0d      	bgt.n	8008c18 <atan+0x70>
 8008bfc:	a396      	add	r3, pc, #600	; (adr r3, 8008e58 <atan+0x2b0>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	ee10 0a10 	vmov	r0, s0
 8008c06:	4629      	mov	r1, r5
 8008c08:	f7f7 fb60 	bl	80002cc <__adddf3>
 8008c0c:	4baf      	ldr	r3, [pc, #700]	; (8008ecc <atan+0x324>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f7f7 ffa2 	bl	8000b58 <__aeabi_dcmpgt>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d1e6      	bne.n	8008be6 <atan+0x3e>
 8008c18:	f04f 3aff 	mov.w	sl, #4294967295
 8008c1c:	e02b      	b.n	8008c76 <atan+0xce>
 8008c1e:	f000 f963 	bl	8008ee8 <fabs>
 8008c22:	4bab      	ldr	r3, [pc, #684]	; (8008ed0 <atan+0x328>)
 8008c24:	429e      	cmp	r6, r3
 8008c26:	ec55 4b10 	vmov	r4, r5, d0
 8008c2a:	f300 80bf 	bgt.w	8008dac <atan+0x204>
 8008c2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c32:	429e      	cmp	r6, r3
 8008c34:	f300 80a0 	bgt.w	8008d78 <atan+0x1d0>
 8008c38:	ee10 2a10 	vmov	r2, s0
 8008c3c:	ee10 0a10 	vmov	r0, s0
 8008c40:	462b      	mov	r3, r5
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 fb42 	bl	80002cc <__adddf3>
 8008c48:	4ba0      	ldr	r3, [pc, #640]	; (8008ecc <atan+0x324>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f7f7 fb3c 	bl	80002c8 <__aeabi_dsub>
 8008c50:	2200      	movs	r2, #0
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 fb35 	bl	80002cc <__adddf3>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 fe0f 	bl	800088c <__aeabi_ddiv>
 8008c6e:	f04f 0a00 	mov.w	sl, #0
 8008c72:	4604      	mov	r4, r0
 8008c74:	460d      	mov	r5, r1
 8008c76:	4622      	mov	r2, r4
 8008c78:	462b      	mov	r3, r5
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 fcdb 	bl	8000638 <__aeabi_dmul>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4680      	mov	r8, r0
 8008c88:	4689      	mov	r9, r1
 8008c8a:	f7f7 fcd5 	bl	8000638 <__aeabi_dmul>
 8008c8e:	a374      	add	r3, pc, #464	; (adr r3, 8008e60 <atan+0x2b8>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	f7f7 fcce 	bl	8000638 <__aeabi_dmul>
 8008c9c:	a372      	add	r3, pc, #456	; (adr r3, 8008e68 <atan+0x2c0>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fb13 	bl	80002cc <__adddf3>
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	463b      	mov	r3, r7
 8008caa:	f7f7 fcc5 	bl	8000638 <__aeabi_dmul>
 8008cae:	a370      	add	r3, pc, #448	; (adr r3, 8008e70 <atan+0x2c8>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 fb0a 	bl	80002cc <__adddf3>
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	f7f7 fcbc 	bl	8000638 <__aeabi_dmul>
 8008cc0:	a36d      	add	r3, pc, #436	; (adr r3, 8008e78 <atan+0x2d0>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fb01 	bl	80002cc <__adddf3>
 8008cca:	4632      	mov	r2, r6
 8008ccc:	463b      	mov	r3, r7
 8008cce:	f7f7 fcb3 	bl	8000638 <__aeabi_dmul>
 8008cd2:	a36b      	add	r3, pc, #428	; (adr r3, 8008e80 <atan+0x2d8>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 faf8 	bl	80002cc <__adddf3>
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	f7f7 fcaa 	bl	8000638 <__aeabi_dmul>
 8008ce4:	a368      	add	r3, pc, #416	; (adr r3, 8008e88 <atan+0x2e0>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 faef 	bl	80002cc <__adddf3>
 8008cee:	4642      	mov	r2, r8
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	f7f7 fca1 	bl	8000638 <__aeabi_dmul>
 8008cf6:	a366      	add	r3, pc, #408	; (adr r3, 8008e90 <atan+0x2e8>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	4689      	mov	r9, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fc98 	bl	8000638 <__aeabi_dmul>
 8008d08:	a363      	add	r3, pc, #396	; (adr r3, 8008e98 <atan+0x2f0>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fadb 	bl	80002c8 <__aeabi_dsub>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	f7f7 fc8f 	bl	8000638 <__aeabi_dmul>
 8008d1a:	a361      	add	r3, pc, #388	; (adr r3, 8008ea0 <atan+0x2f8>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fad2 	bl	80002c8 <__aeabi_dsub>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	f7f7 fc86 	bl	8000638 <__aeabi_dmul>
 8008d2c:	a35e      	add	r3, pc, #376	; (adr r3, 8008ea8 <atan+0x300>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fac9 	bl	80002c8 <__aeabi_dsub>
 8008d36:	4632      	mov	r2, r6
 8008d38:	463b      	mov	r3, r7
 8008d3a:	f7f7 fc7d 	bl	8000638 <__aeabi_dmul>
 8008d3e:	a35c      	add	r3, pc, #368	; (adr r3, 8008eb0 <atan+0x308>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fac0 	bl	80002c8 <__aeabi_dsub>
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	f7f7 fc74 	bl	8000638 <__aeabi_dmul>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4640      	mov	r0, r8
 8008d56:	4649      	mov	r1, r9
 8008d58:	f7f7 fab8 	bl	80002cc <__adddf3>
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	462b      	mov	r3, r5
 8008d60:	f7f7 fc6a 	bl	8000638 <__aeabi_dmul>
 8008d64:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	d14b      	bne.n	8008e06 <atan+0x25e>
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 faa9 	bl	80002c8 <__aeabi_dsub>
 8008d76:	e72c      	b.n	8008bd2 <atan+0x2a>
 8008d78:	ee10 0a10 	vmov	r0, s0
 8008d7c:	4b53      	ldr	r3, [pc, #332]	; (8008ecc <atan+0x324>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 faa1 	bl	80002c8 <__aeabi_dsub>
 8008d86:	4b51      	ldr	r3, [pc, #324]	; (8008ecc <atan+0x324>)
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460f      	mov	r7, r1
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 fa9b 	bl	80002cc <__adddf3>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fd75 	bl	800088c <__aeabi_ddiv>
 8008da2:	f04f 0a01 	mov.w	sl, #1
 8008da6:	4604      	mov	r4, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	e764      	b.n	8008c76 <atan+0xce>
 8008dac:	4b49      	ldr	r3, [pc, #292]	; (8008ed4 <atan+0x32c>)
 8008dae:	429e      	cmp	r6, r3
 8008db0:	da1d      	bge.n	8008dee <atan+0x246>
 8008db2:	ee10 0a10 	vmov	r0, s0
 8008db6:	4b48      	ldr	r3, [pc, #288]	; (8008ed8 <atan+0x330>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	4629      	mov	r1, r5
 8008dbc:	f7f7 fa84 	bl	80002c8 <__aeabi_dsub>
 8008dc0:	4b45      	ldr	r3, [pc, #276]	; (8008ed8 <atan+0x330>)
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f7f7 fc34 	bl	8000638 <__aeabi_dmul>
 8008dd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ecc <atan+0x324>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f7f7 fa7a 	bl	80002cc <__adddf3>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fd54 	bl	800088c <__aeabi_ddiv>
 8008de4:	f04f 0a02 	mov.w	sl, #2
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	e743      	b.n	8008c76 <atan+0xce>
 8008dee:	462b      	mov	r3, r5
 8008df0:	ee10 2a10 	vmov	r2, s0
 8008df4:	4939      	ldr	r1, [pc, #228]	; (8008edc <atan+0x334>)
 8008df6:	2000      	movs	r0, #0
 8008df8:	f7f7 fd48 	bl	800088c <__aeabi_ddiv>
 8008dfc:	f04f 0a03 	mov.w	sl, #3
 8008e00:	4604      	mov	r4, r0
 8008e02:	460d      	mov	r5, r1
 8008e04:	e737      	b.n	8008c76 <atan+0xce>
 8008e06:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <atan+0x338>)
 8008e08:	4e36      	ldr	r6, [pc, #216]	; (8008ee4 <atan+0x33c>)
 8008e0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008e0e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008e12:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e16:	f7f7 fa57 	bl	80002c8 <__aeabi_dsub>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	f7f7 fa53 	bl	80002c8 <__aeabi_dsub>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e2a:	f7f7 fa4d 	bl	80002c8 <__aeabi_dsub>
 8008e2e:	f1bb 0f00 	cmp.w	fp, #0
 8008e32:	4604      	mov	r4, r0
 8008e34:	460d      	mov	r5, r1
 8008e36:	f6bf aed6 	bge.w	8008be6 <atan+0x3e>
 8008e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e3e:	461d      	mov	r5, r3
 8008e40:	e6d1      	b.n	8008be6 <atan+0x3e>
 8008e42:	a51d      	add	r5, pc, #116	; (adr r5, 8008eb8 <atan+0x310>)
 8008e44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e48:	e6cd      	b.n	8008be6 <atan+0x3e>
 8008e4a:	bf00      	nop
 8008e4c:	f3af 8000 	nop.w
 8008e50:	54442d18 	.word	0x54442d18
 8008e54:	bff921fb 	.word	0xbff921fb
 8008e58:	8800759c 	.word	0x8800759c
 8008e5c:	7e37e43c 	.word	0x7e37e43c
 8008e60:	e322da11 	.word	0xe322da11
 8008e64:	3f90ad3a 	.word	0x3f90ad3a
 8008e68:	24760deb 	.word	0x24760deb
 8008e6c:	3fa97b4b 	.word	0x3fa97b4b
 8008e70:	a0d03d51 	.word	0xa0d03d51
 8008e74:	3fb10d66 	.word	0x3fb10d66
 8008e78:	c54c206e 	.word	0xc54c206e
 8008e7c:	3fb745cd 	.word	0x3fb745cd
 8008e80:	920083ff 	.word	0x920083ff
 8008e84:	3fc24924 	.word	0x3fc24924
 8008e88:	5555550d 	.word	0x5555550d
 8008e8c:	3fd55555 	.word	0x3fd55555
 8008e90:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e94:	bfa2b444 	.word	0xbfa2b444
 8008e98:	52defd9a 	.word	0x52defd9a
 8008e9c:	3fadde2d 	.word	0x3fadde2d
 8008ea0:	af749a6d 	.word	0xaf749a6d
 8008ea4:	3fb3b0f2 	.word	0x3fb3b0f2
 8008ea8:	fe231671 	.word	0xfe231671
 8008eac:	3fbc71c6 	.word	0x3fbc71c6
 8008eb0:	9998ebc4 	.word	0x9998ebc4
 8008eb4:	3fc99999 	.word	0x3fc99999
 8008eb8:	54442d18 	.word	0x54442d18
 8008ebc:	3ff921fb 	.word	0x3ff921fb
 8008ec0:	440fffff 	.word	0x440fffff
 8008ec4:	7ff00000 	.word	0x7ff00000
 8008ec8:	3fdbffff 	.word	0x3fdbffff
 8008ecc:	3ff00000 	.word	0x3ff00000
 8008ed0:	3ff2ffff 	.word	0x3ff2ffff
 8008ed4:	40038000 	.word	0x40038000
 8008ed8:	3ff80000 	.word	0x3ff80000
 8008edc:	bff00000 	.word	0xbff00000
 8008ee0:	080093d0 	.word	0x080093d0
 8008ee4:	080093b0 	.word	0x080093b0

08008ee8 <fabs>:
 8008ee8:	ec51 0b10 	vmov	r0, r1, d0
 8008eec:	ee10 2a10 	vmov	r2, s0
 8008ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ef4:	ec43 2b10 	vmov	d0, r2, r3
 8008ef8:	4770      	bx	lr
	...

08008efc <_init>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr

08008f08 <_fini>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	bf00      	nop
 8008f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0e:	bc08      	pop	{r3}
 8008f10:	469e      	mov	lr, r3
 8008f12:	4770      	bx	lr
